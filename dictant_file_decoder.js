// Generated by dart2js (NullSafetyMode.sound, deferred-serialization, csp), the Dart to JavaScript compiler version: 2.18.6.
// The code supports the following hooks:
// dartPrint(message):
//    if this function is defined it is called instead of the Dart [print]
//    method.
//
// dartMainRunner(main, args):
//    if this function is defined, the Dart [main] method will not be invoked
//    directly. Instead, a closure that will invoke [main], and its arguments
//    [args] is passed to [dartMainRunner].
//
// dartDeferredLibraryLoader(uri, successCallback, errorCallback, loadId):
//    if this function is defined, it will be called when a deferred library
//    is loaded. It should load and eval the javascript of `uri`, and call
//    successCallback. If it fails to do so, it should call errorCallback with
//    an error. The loadId argument is the deferred import that resulted in
//    this uri being loaded.
//
// dartCallInstrumentation(id, qualifiedName):
//    if this function is defined, it will be called at each entry of a
//    method or constructor. Used only when compiling programs with
//    --experiment-call-instrumentation.
  function copyProperties(from, to) {
    var keys = Object.keys(from);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      to[key] = from[key];
    }
  }
  function mixinPropertiesHard(from, to) {
    var keys = Object.keys(from);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      if (!to.hasOwnProperty(key))
        to[key] = from[key];
    }
  }
  function mixinPropertiesEasy(from, to) {
    Object.assign(to, from);
  }
  var supportsDirectProtoAccess = function() {
    var cls = function() {
    };
    cls.prototype = {p: {}};
    var object = new cls();
    if (!(object.__proto__ && object.__proto__.p === cls.prototype.p))
      return false;
    try {
      if (typeof navigator != "undefined" && typeof navigator.userAgent == "string" && navigator.userAgent.indexOf("Chrome/") >= 0)
        return true;
      if (typeof version == "function" && version.length == 0) {
        var v = version();
        if (/^\d+\.\d+\.\d+\.\d+$/.test(v))
          return true;
      }
    } catch (_) {
    }
    return false;
  }();
  function inherit(cls, sup) {
    cls.prototype.constructor = cls;
    cls.prototype["$is" + cls.name] = cls;
    if (sup != null) {
      if (supportsDirectProtoAccess) {
        cls.prototype.__proto__ = sup.prototype;
        return;
      }
      var clsPrototype = Object.create(sup.prototype);
      copyProperties(cls.prototype, clsPrototype);
      cls.prototype = clsPrototype;
    }
  }
  function inheritMany(sup, classes) {
    for (var i = 0; i < classes.length; i++)
      inherit(classes[i], sup);
  }
  function mixinEasy(cls, mixin) {
    mixinPropertiesEasy(mixin.prototype, cls.prototype);
    cls.prototype.constructor = cls;
  }
  function mixinHard(cls, mixin) {
    mixinPropertiesHard(mixin.prototype, cls.prototype);
    cls.prototype.constructor = cls;
  }
  function lazyOld(holder, name, getterName, initializer) {
    var uninitializedSentinel = holder;
    holder[name] = uninitializedSentinel;
    holder[getterName] = function() {
      holder[getterName] = function() {
        A.throwCyclicInit(name);
      };
      var result;
      var sentinelInProgress = initializer;
      try {
        if (holder[name] === uninitializedSentinel) {
          result = holder[name] = sentinelInProgress;
          result = holder[name] = initializer();
        } else
          result = holder[name];
      } finally {
        if (result === sentinelInProgress)
          holder[name] = null;
        holder[getterName] = function() {
          return this[name];
        };
      }
      return result;
    };
  }
  function lazy(holder, name, getterName, initializer) {
    var uninitializedSentinel = holder;
    holder[name] = uninitializedSentinel;
    holder[getterName] = function() {
      if (holder[name] === uninitializedSentinel)
        holder[name] = initializer();
      holder[getterName] = function() {
        return this[name];
      };
      return holder[name];
    };
  }
  function lazyFinal(holder, name, getterName, initializer) {
    var uninitializedSentinel = holder;
    holder[name] = uninitializedSentinel;
    holder[getterName] = function() {
      if (holder[name] === uninitializedSentinel) {
        var value = initializer();
        if (holder[name] !== uninitializedSentinel)
          A.throwLateFieldADI(name);
        holder[name] = value;
      }
      var finalValue = holder[name];
      holder[getterName] = function() {
        return finalValue;
      };
      return finalValue;
    };
  }
  function makeConstList(list) {
    list.immutable$list = Array;
    list.fixed$length = Array;
    return list;
  }
  function convertToFastObject(properties) {
    function t() {
    }
    t.prototype = properties;
    new t();
    return properties;
  }
  function convertAllToFastObject(arrayOfObjects) {
    for (var i = 0; i < arrayOfObjects.length; ++i)
      convertToFastObject(arrayOfObjects[i]);
  }
  var functionCounter = 0;
  function instanceTearOffGetter(isIntercepted, parameters) {
    var cache = null;
    return isIntercepted ? function(receiver) {
      if (cache === null)
        cache = A.closureFromTearOff(parameters);
      return new cache(receiver, this);
    } : function() {
      if (cache === null)
        cache = A.closureFromTearOff(parameters);
      return new cache(this, null);
    };
  }
  function staticTearOffGetter(parameters) {
    var cache = null;
    return function() {
      if (cache === null)
        cache = A.closureFromTearOff(parameters).prototype;
      return cache;
    };
  }
  var typesOffset = 0;
  function tearOffParameters(container, isStatic, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex, needsDirectAccess) {
    if (typeof funType == "number")
      funType += typesOffset;
    return {co: container, iS: isStatic, iI: isIntercepted, rC: requiredParameterCount, dV: optionalParameterDefaultValues, cs: callNames, fs: funsOrNames, fT: funType, aI: applyIndex || 0, nDA: needsDirectAccess};
  }
  function installStaticTearOff(holder, getterName, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex) {
    var parameters = tearOffParameters(holder, true, false, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex, false);
    var getterFunction = staticTearOffGetter(parameters);
    holder[getterName] = getterFunction;
  }
  function installInstanceTearOff(prototype, getterName, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex, needsDirectAccess) {
    isIntercepted = !!isIntercepted;
    var parameters = tearOffParameters(prototype, false, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex, !!needsDirectAccess);
    var getterFunction = instanceTearOffGetter(isIntercepted, parameters);
    prototype[getterName] = getterFunction;
  }
  function setOrUpdateInterceptorsByTag(newTags) {
    var tags = init.interceptorsByTag;
    if (!tags) {
      init.interceptorsByTag = newTags;
      return;
    }
    copyProperties(newTags, tags);
  }
  function setOrUpdateLeafTags(newTags) {
    var tags = init.leafTags;
    if (!tags) {
      init.leafTags = newTags;
      return;
    }
    copyProperties(newTags, tags);
  }
  function updateTypes(newTypes) {
    var types = init.types;
    var length = types.length;
    types.push.apply(types, newTypes);
    return length;
  }
  function updateHolder(holder, newHolder) {
    copyProperties(newHolder, holder);
    return holder;
  }
  var hunkHelpers = function() {
    var mkInstance = function(isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, applyIndex) {
        return function(container, getterName, name, funType) {
          return installInstanceTearOff(container, getterName, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, [name], funType, applyIndex, false);
        };
      },
      mkStatic = function(requiredParameterCount, optionalParameterDefaultValues, callNames, applyIndex) {
        return function(container, getterName, name, funType) {
          return installStaticTearOff(container, getterName, requiredParameterCount, optionalParameterDefaultValues, callNames, [name], funType, applyIndex);
        };
      };
    return {inherit: inherit, inheritMany: inheritMany, mixin: mixinEasy, mixinHard: mixinHard, installStaticTearOff: installStaticTearOff, installInstanceTearOff: installInstanceTearOff, _instance_0u: mkInstance(0, 0, null, ["call$0"], 0), _instance_1u: mkInstance(0, 1, null, ["call$1"], 0), _instance_2u: mkInstance(0, 2, null, ["call$2"], 0), _instance_0i: mkInstance(1, 0, null, ["call$0"], 0), _instance_1i: mkInstance(1, 1, null, ["call$1"], 0), _instance_2i: mkInstance(1, 2, null, ["call$2"], 0), _static_0: mkStatic(0, null, ["call$0"], 0), _static_1: mkStatic(1, null, ["call$1"], 0), _static_2: mkStatic(2, null, ["call$2"], 0), makeConstList: makeConstList, lazy: lazy, lazyFinal: lazyFinal, lazyOld: lazyOld, updateHolder: updateHolder, convertToFastObject: convertToFastObject, updateTypes: updateTypes, setOrUpdateInterceptorsByTag: setOrUpdateInterceptorsByTag, setOrUpdateLeafTags: setOrUpdateLeafTags};
  }();
  function initializeDeferredHunk(hunk) {
    typesOffset = init.types.length;
    hunk(hunkHelpers, init, holders, $);
  }
  var A = {JS_CONST: function JS_CONST() {
    },
    LateError$fieldNI(fieldName) {
      return new A.LateError("Field '" + fieldName + "' has not been initialized.");
    },
    SubListIterable$(_iterable, _start, _endOrLength, $E) {
      A.RangeError_checkNotNegative(_start, "start");
      if (_endOrLength != null) {
        A.RangeError_checkNotNegative(_endOrLength, "end");
        if (_start > _endOrLength)
          A.throwExpression(A.RangeError$range(_start, 0, _endOrLength, "start", null));
      }
      return new A.SubListIterable(_iterable, _start, _endOrLength, $E._eval$1("SubListIterable<0>"));
    },
    LateError: function LateError(t0) {
      this._message = t0;
    },
    EfficientLengthIterable: function EfficientLengthIterable() {
    },
    ListIterable: function ListIterable() {
    },
    SubListIterable: function SubListIterable(t0, t1, t2, t3) {
      var _ = this;
      _.__internal$_iterable = t0;
      _._start = t1;
      _._endOrLength = t2;
      _.$ti = t3;
    },
    ListIterator: function ListIterator(t0, t1, t2) {
      var _ = this;
      _.__internal$_iterable = t0;
      _.__internal$_length = t1;
      _.__internal$_index = 0;
      _.__internal$_current = null;
      _.$ti = t2;
    },
    FixedLengthListMixin: function FixedLengthListMixin() {
    },
    Symbol: function Symbol(t0) {
      this._name = t0;
    },
    unminifyOrTag(rawClassName) {
      var preserved = init.mangledGlobalNames[rawClassName];
      if (preserved != null)
        return preserved;
      return rawClassName;
    },
    isJsIndexable(object, record) {
      var result;
      if (record != null) {
        result = record.x;
        if (result != null)
          return result;
      }
      return type$.JavaScriptIndexingBehavior_dynamic._is(object);
    },
    S(value) {
      var result;
      if (typeof value == "string")
        return value;
      if (typeof value == "number") {
        if (value !== 0)
          return "" + value;
      } else if (true === value)
        return "true";
      else if (false === value)
        return "false";
      else if (value == null)
        return "null";
      result = J.toString$0$(value);
      return result;
    },
    Primitives_objectHashCode(object) {
      var hash,
        property = $.Primitives__identityHashCodeProperty;
      if (property == null)
        property = $.Primitives__identityHashCodeProperty = Symbol("identityHashCode");
      hash = object[property];
      if (hash == null) {
        hash = Math.random() * 0x3fffffff | 0;
        object[property] = hash;
      }
      return hash;
    },
    Primitives_objectTypeName(object) {
      return A.Primitives__objectTypeNameNewRti(object);
    },
    Primitives__objectTypeNameNewRti(object) {
      var interceptor, dispatchName, $constructor, constructorName;
      if (object instanceof A.Object)
        return A._rtiToString(A.instanceType(object), null);
      interceptor = J.getInterceptor$(object);
      if (interceptor === B.Interceptor_methods || interceptor === B.JavaScriptObject_methods || type$.UnknownJavaScriptObject._is(object)) {
        dispatchName = B.C_JS_CONST(object);
        if (dispatchName !== "Object" && dispatchName !== "")
          return dispatchName;
        $constructor = object.constructor;
        if (typeof $constructor == "function") {
          constructorName = $constructor.name;
          if (typeof constructorName == "string" && constructorName !== "Object" && constructorName !== "")
            return constructorName;
        }
      }
      return A._rtiToString(A.instanceType(object), null);
    },
    Primitives__fromCharCodeApply(array) {
      var result, i, i0, chunkEnd,
        end = array.length;
      if (end <= 500)
        return String.fromCharCode.apply(null, array);
      for (result = "", i = 0; i < end; i = i0) {
        i0 = i + 500;
        chunkEnd = i0 < end ? i0 : end;
        result += String.fromCharCode.apply(null, array.slice(i, chunkEnd));
      }
      return result;
    },
    Primitives_stringFromCodePoints(codePoints) {
      var t1, _i, i,
        a = A._setArrayType([], type$.JSArray_int);
      for (t1 = codePoints.length, _i = 0; _i < codePoints.length; codePoints.length === t1 || (0, A.throwConcurrentModificationError)(codePoints), ++_i) {
        i = codePoints[_i];
        if (!A._isInt(i))
          throw A.wrapException(A.argumentErrorValue(i));
        if (i <= 65535)
          B.JSArray_methods.add$1(a, i);
        else if (i <= 1114111) {
          B.JSArray_methods.add$1(a, 55296 + (B.JSInt_methods._shrOtherPositive$1(i - 65536, 10) & 1023));
          B.JSArray_methods.add$1(a, 56320 + (i & 1023));
        } else
          throw A.wrapException(A.argumentErrorValue(i));
      }
      return A.Primitives__fromCharCodeApply(a);
    },
    Primitives_stringFromCharCodes(charCodes) {
      var t1, _i, i;
      for (t1 = charCodes.length, _i = 0; _i < t1; ++_i) {
        i = charCodes[_i];
        if (!A._isInt(i))
          throw A.wrapException(A.argumentErrorValue(i));
        if (i < 0)
          throw A.wrapException(A.argumentErrorValue(i));
        if (i > 65535)
          return A.Primitives_stringFromCodePoints(charCodes);
      }
      return A.Primitives__fromCharCodeApply(charCodes);
    },
    Primitives_stringFromNativeUint8List(charCodes, start, end) {
      var i, result, i0, chunkEnd;
      if (end <= 500 && start === 0 && end === charCodes.length)
        return String.fromCharCode.apply(null, charCodes);
      for (i = start, result = ""; i < end; i = i0) {
        i0 = i + 500;
        chunkEnd = i0 < end ? i0 : end;
        result += String.fromCharCode.apply(null, charCodes.subarray(i, chunkEnd));
      }
      return result;
    },
    Primitives_stringFromCharCode(charCode) {
      var bits;
      if (charCode <= 65535)
        return String.fromCharCode(charCode);
      if (charCode <= 1114111) {
        bits = charCode - 65536;
        return String.fromCharCode((B.JSInt_methods._shrOtherPositive$1(bits, 10) | 55296) >>> 0, bits & 1023 | 56320);
      }
      throw A.wrapException(A.RangeError$range(charCode, 0, 1114111, null, null));
    },
    Primitives_functionNoSuchMethod($function, positionalArguments, namedArguments) {
      var $arguments, namedArgumentList, t1 = {};
      t1.argumentCount = 0;
      $arguments = [];
      namedArgumentList = [];
      t1.argumentCount = positionalArguments.length;
      B.JSArray_methods.addAll$1($arguments, positionalArguments);
      t1.names = "";
      if (namedArguments != null && namedArguments.__js_helper$_length !== 0)
        namedArguments.forEach$1(0, new A.Primitives_functionNoSuchMethod_closure(t1, namedArgumentList, $arguments));
      return J.noSuchMethod$1$($function, new A.JSInvocationMirror(B.Symbol_call, 0, $arguments, namedArgumentList, 0));
    },
    Primitives_applyFunction($function, positionalArguments, namedArguments) {
      var t1, argumentCount, jsStub;
      if (Array.isArray(positionalArguments))
        t1 = namedArguments == null || namedArguments.__js_helper$_length === 0;
      else
        t1 = false;
      if (t1) {
        argumentCount = positionalArguments.length;
        if (argumentCount === 0) {
          if (!!$function.call$0)
            return $function.call$0();
        } else if (argumentCount === 1) {
          if (!!$function.call$1)
            return $function.call$1(positionalArguments[0]);
        } else if (argumentCount === 2) {
          if (!!$function.call$2)
            return $function.call$2(positionalArguments[0], positionalArguments[1]);
        } else if (argumentCount === 3) {
          if (!!$function.call$3)
            return $function.call$3(positionalArguments[0], positionalArguments[1], positionalArguments[2]);
        } else if (argumentCount === 4) {
          if (!!$function.call$4)
            return $function.call$4(positionalArguments[0], positionalArguments[1], positionalArguments[2], positionalArguments[3]);
        } else if (argumentCount === 5)
          if (!!$function.call$5)
            return $function.call$5(positionalArguments[0], positionalArguments[1], positionalArguments[2], positionalArguments[3], positionalArguments[4]);
        jsStub = $function["call" + "$" + argumentCount];
        if (jsStub != null)
          return jsStub.apply($function, positionalArguments);
      }
      return A.Primitives__generalApplyFunction($function, positionalArguments, namedArguments);
    },
    Primitives__generalApplyFunction($function, positionalArguments, namedArguments) {
      var defaultValuesClosure, t1, defaultValues, interceptor, jsFunction, maxArguments, missingDefaults, keys, _i, defaultValue, used, key,
        $arguments = Array.isArray(positionalArguments) ? positionalArguments : A.List_List$of(positionalArguments, true, type$.dynamic),
        argumentCount = $arguments.length,
        requiredParameterCount = $function.$requiredArgCount;
      if (argumentCount < requiredParameterCount)
        return A.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
      defaultValuesClosure = $function.$defaultValues;
      t1 = defaultValuesClosure == null;
      defaultValues = !t1 ? defaultValuesClosure() : null;
      interceptor = J.getInterceptor$($function);
      jsFunction = interceptor["call*"];
      if (typeof jsFunction == "string")
        jsFunction = interceptor[jsFunction];
      if (t1) {
        if (namedArguments != null && namedArguments.__js_helper$_length !== 0)
          return A.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
        if (argumentCount === requiredParameterCount)
          return jsFunction.apply($function, $arguments);
        return A.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
      }
      if (Array.isArray(defaultValues)) {
        if (namedArguments != null && namedArguments.__js_helper$_length !== 0)
          return A.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
        maxArguments = requiredParameterCount + defaultValues.length;
        if (argumentCount > maxArguments)
          return A.Primitives_functionNoSuchMethod($function, $arguments, null);
        if (argumentCount < maxArguments) {
          missingDefaults = defaultValues.slice(argumentCount - requiredParameterCount);
          if ($arguments === positionalArguments)
            $arguments = A.List_List$of($arguments, true, type$.dynamic);
          B.JSArray_methods.addAll$1($arguments, missingDefaults);
        }
        return jsFunction.apply($function, $arguments);
      } else {
        if (argumentCount > requiredParameterCount)
          return A.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
        if ($arguments === positionalArguments)
          $arguments = A.List_List$of($arguments, true, type$.dynamic);
        keys = Object.keys(defaultValues);
        if (namedArguments == null)
          for (t1 = keys.length, _i = 0; _i < keys.length; keys.length === t1 || (0, A.throwConcurrentModificationError)(keys), ++_i) {
            defaultValue = defaultValues[A._asString(keys[_i])];
            if (B.C__Required === defaultValue)
              return A.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
            B.JSArray_methods.add$1($arguments, defaultValue);
          }
        else {
          for (t1 = keys.length, used = 0, _i = 0; _i < keys.length; keys.length === t1 || (0, A.throwConcurrentModificationError)(keys), ++_i) {
            key = A._asString(keys[_i]);
            if (namedArguments.containsKey$1(key)) {
              ++used;
              B.JSArray_methods.add$1($arguments, namedArguments.$index(0, key));
            } else {
              defaultValue = defaultValues[key];
              if (B.C__Required === defaultValue)
                return A.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
              B.JSArray_methods.add$1($arguments, defaultValue);
            }
          }
          if (used !== namedArguments.__js_helper$_length)
            return A.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
        }
        return jsFunction.apply($function, $arguments);
      }
    },
    iae(argument) {
      throw A.wrapException(A.argumentErrorValue(argument));
    },
    ioore(receiver, index) {
      if (receiver == null)
        J.get$length$asx(receiver);
      throw A.wrapException(A.diagnoseIndexError(receiver, index));
    },
    diagnoseIndexError(indexable, index) {
      var $length, _s5_ = "index", _null = null;
      if (!A._isInt(index))
        return new A.ArgumentError(true, index, _s5_, _null);
      $length = J.get$length$asx(indexable);
      if (index < 0 || index >= $length)
        return A.IndexError$(index, indexable, _s5_, _null, $length);
      return new A.RangeError(_null, _null, true, index, _s5_, "Value not in range");
    },
    diagnoseRangeError(start, end, $length) {
      if (start < 0 || start > $length)
        return A.RangeError$range(start, 0, $length, "start", null);
      if (end != null)
        if (end < start || end > $length)
          return A.RangeError$range(end, start, $length, "end", null);
      return new A.ArgumentError(true, end, "end", null);
    },
    argumentErrorValue(object) {
      return new A.ArgumentError(true, object, null, null);
    },
    wrapException(ex) {
      var wrapper, t1;
      if (ex == null)
        ex = new A.NullThrownError();
      wrapper = new Error();
      wrapper.dartException = ex;
      t1 = A.toStringWrapper;
      if ("defineProperty" in Object) {
        Object.defineProperty(wrapper, "message", {get: t1});
        wrapper.name = "";
      } else
        wrapper.toString = t1;
      return wrapper;
    },
    toStringWrapper() {
      return J.toString$0$(this.dartException);
    },
    throwExpression(ex) {
      throw A.wrapException(ex);
    },
    throwConcurrentModificationError(collection) {
      throw A.wrapException(A.ConcurrentModificationError$(collection));
    },
    objectHashCode(object) {
      if (object == null || typeof object != "object")
        return J.get$hashCode$(object);
      else
        return A.Primitives_objectHashCode(object);
    },
    Closure_fromTearOff(parameters) {
      var $prototype, $constructor, t2, trampoline, applyTrampoline, i, stub, stub0, stubName, stubCallName,
        container = parameters.co,
        isStatic = parameters.iS,
        isIntercepted = parameters.iI,
        needsDirectAccess = parameters.nDA,
        applyTrampolineIndex = parameters.aI,
        funsOrNames = parameters.fs,
        callNames = parameters.cs,
        $name = funsOrNames[0],
        callName = callNames[0],
        $function = container[$name],
        t1 = parameters.fT;
      t1.toString;
      $prototype = isStatic ? Object.create(new A.StaticClosure().constructor.prototype) : Object.create(new A.BoundClosure(null, null).constructor.prototype);
      $prototype.$initialize = $prototype.constructor;
      if (isStatic)
        $constructor = function static_tear_off() {
          this.$initialize();
        };
      else
        $constructor = function tear_off(a, b) {
          this.$initialize(a, b);
        };
      $prototype.constructor = $constructor;
      $constructor.prototype = $prototype;
      $prototype.$_name = $name;
      $prototype.$_target = $function;
      t2 = !isStatic;
      if (t2)
        trampoline = A.Closure_forwardCallTo($name, $function, isIntercepted, needsDirectAccess);
      else {
        $prototype.$static_name = $name;
        trampoline = $function;
      }
      $prototype.$signature = A.Closure__computeSignatureFunctionNewRti(t1, isStatic, isIntercepted);
      $prototype[callName] = trampoline;
      for (applyTrampoline = trampoline, i = 1; i < funsOrNames.length; ++i) {
        stub = funsOrNames[i];
        if (typeof stub == "string") {
          stub0 = container[stub];
          stubName = stub;
          stub = stub0;
        } else
          stubName = "";
        stubCallName = callNames[i];
        if (stubCallName != null) {
          if (t2)
            stub = A.Closure_forwardCallTo(stubName, stub, isIntercepted, needsDirectAccess);
          $prototype[stubCallName] = stub;
        }
        if (i === applyTrampolineIndex)
          applyTrampoline = stub;
      }
      $prototype["call*"] = applyTrampoline;
      $prototype.$requiredArgCount = parameters.rC;
      $prototype.$defaultValues = parameters.dV;
      return $constructor;
    },
    Closure__computeSignatureFunctionNewRti(functionType, isStatic, isIntercepted) {
      if (typeof functionType == "number")
        return functionType;
      if (typeof functionType == "string") {
        if (isStatic)
          throw A.wrapException("Cannot compute signature for static tearoff.");
        return function(recipe, evalOnReceiver) {
          return function() {
            return evalOnReceiver(this, recipe);
          };
        }(functionType, A.BoundClosure_evalRecipe);
      }
      throw A.wrapException("Error in functionType of tearoff");
    },
    Closure_cspForwardCall(arity, needsDirectAccess, stubName, $function) {
      var getReceiver = A.BoundClosure_receiverOf;
      switch (needsDirectAccess ? -1 : arity) {
        case 0:
          return function(entry, receiverOf) {
            return function() {
              return receiverOf(this)[entry]();
            };
          }(stubName, getReceiver);
        case 1:
          return function(entry, receiverOf) {
            return function(a) {
              return receiverOf(this)[entry](a);
            };
          }(stubName, getReceiver);
        case 2:
          return function(entry, receiverOf) {
            return function(a, b) {
              return receiverOf(this)[entry](a, b);
            };
          }(stubName, getReceiver);
        case 3:
          return function(entry, receiverOf) {
            return function(a, b, c) {
              return receiverOf(this)[entry](a, b, c);
            };
          }(stubName, getReceiver);
        case 4:
          return function(entry, receiverOf) {
            return function(a, b, c, d) {
              return receiverOf(this)[entry](a, b, c, d);
            };
          }(stubName, getReceiver);
        case 5:
          return function(entry, receiverOf) {
            return function(a, b, c, d, e) {
              return receiverOf(this)[entry](a, b, c, d, e);
            };
          }(stubName, getReceiver);
        default:
          return function(f, receiverOf) {
            return function() {
              return f.apply(receiverOf(this), arguments);
            };
          }($function, getReceiver);
      }
    },
    Closure_forwardCallTo(stubName, $function, isIntercepted, needsDirectAccess) {
      var arity, t1;
      if (isIntercepted)
        return A.Closure_forwardInterceptedCallTo(stubName, $function, needsDirectAccess);
      arity = $function.length;
      t1 = A.Closure_cspForwardCall(arity, needsDirectAccess, stubName, $function);
      return t1;
    },
    Closure_cspForwardInterceptedCall(arity, needsDirectAccess, stubName, $function) {
      var getReceiver = A.BoundClosure_receiverOf,
        getInterceptor = A.BoundClosure_interceptorOf;
      switch (needsDirectAccess ? -1 : arity) {
        case 0:
          throw A.wrapException(new A.RuntimeError("Intercepted function with no arguments."));
        case 1:
          return function(entry, interceptorOf, receiverOf) {
            return function() {
              return interceptorOf(this)[entry](receiverOf(this));
            };
          }(stubName, getInterceptor, getReceiver);
        case 2:
          return function(entry, interceptorOf, receiverOf) {
            return function(a) {
              return interceptorOf(this)[entry](receiverOf(this), a);
            };
          }(stubName, getInterceptor, getReceiver);
        case 3:
          return function(entry, interceptorOf, receiverOf) {
            return function(a, b) {
              return interceptorOf(this)[entry](receiverOf(this), a, b);
            };
          }(stubName, getInterceptor, getReceiver);
        case 4:
          return function(entry, interceptorOf, receiverOf) {
            return function(a, b, c) {
              return interceptorOf(this)[entry](receiverOf(this), a, b, c);
            };
          }(stubName, getInterceptor, getReceiver);
        case 5:
          return function(entry, interceptorOf, receiverOf) {
            return function(a, b, c, d) {
              return interceptorOf(this)[entry](receiverOf(this), a, b, c, d);
            };
          }(stubName, getInterceptor, getReceiver);
        case 6:
          return function(entry, interceptorOf, receiverOf) {
            return function(a, b, c, d, e) {
              return interceptorOf(this)[entry](receiverOf(this), a, b, c, d, e);
            };
          }(stubName, getInterceptor, getReceiver);
        default:
          return function(f, interceptorOf, receiverOf) {
            return function() {
              var a = [receiverOf(this)];
              Array.prototype.push.apply(a, arguments);
              return f.apply(interceptorOf(this), a);
            };
          }($function, getInterceptor, getReceiver);
      }
    },
    Closure_forwardInterceptedCallTo(stubName, $function, needsDirectAccess) {
      var arity, t1;
      if ($.BoundClosure__interceptorFieldNameCache == null)
        $.BoundClosure__interceptorFieldNameCache = A.BoundClosure__computeFieldNamed("interceptor");
      if ($.BoundClosure__receiverFieldNameCache == null)
        $.BoundClosure__receiverFieldNameCache = A.BoundClosure__computeFieldNamed("receiver");
      arity = $function.length;
      t1 = A.Closure_cspForwardInterceptedCall(arity, needsDirectAccess, stubName, $function);
      return t1;
    },
    closureFromTearOff(parameters) {
      return A.Closure_fromTearOff(parameters);
    },
    BoundClosure_evalRecipe(closure, recipe) {
      return A._Universe_evalInEnvironment(init.typeUniverse, A.instanceType(closure._receiver), recipe);
    },
    BoundClosure_receiverOf(closure) {
      return closure._receiver;
    },
    BoundClosure_interceptorOf(closure) {
      return closure._interceptor;
    },
    BoundClosure__computeFieldNamed(fieldName) {
      var t1, i, $name,
        template = new A.BoundClosure("receiver", "interceptor"),
        names = J.JSArray_markFixedList(Object.getOwnPropertyNames(template), type$.nullable_Object);
      for (t1 = names.length, i = 0; i < t1; ++i) {
        $name = names[i];
        if (template[$name] === fieldName)
          return $name;
      }
      throw A.wrapException(A.ArgumentError$("Field name " + fieldName + " not found."));
    },
    throwCyclicInit(staticName) {
      throw A.wrapException(new A.CyclicInitializationError(staticName));
    },
    getIsolateAffinityTag($name) {
      return init.getIsolateTag($name);
    },
    defineProperty(obj, property, value) {
      Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
    },
    lookupAndCacheInterceptor(obj) {
      var interceptor, interceptorClass, altTag, mark, t1,
        tag = A._asString($.getTagFunction.call$1(obj)),
        record = $.dispatchRecordsForInstanceTags[tag];
      if (record != null) {
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      interceptor = $.interceptorsForUncacheableTags[tag];
      if (interceptor != null)
        return interceptor;
      interceptorClass = init.interceptorsByTag[tag];
      if (interceptorClass == null) {
        altTag = A._asStringQ($.alternateTagFunction.call$2(obj, tag));
        if (altTag != null) {
          record = $.dispatchRecordsForInstanceTags[altTag];
          if (record != null) {
            Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
            return record.i;
          }
          interceptor = $.interceptorsForUncacheableTags[altTag];
          if (interceptor != null)
            return interceptor;
          interceptorClass = init.interceptorsByTag[altTag];
          tag = altTag;
        }
      }
      if (interceptorClass == null)
        return null;
      interceptor = interceptorClass.prototype;
      mark = tag[0];
      if (mark === "!") {
        record = A.makeLeafDispatchRecord(interceptor);
        $.dispatchRecordsForInstanceTags[tag] = record;
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      if (mark === "~") {
        $.interceptorsForUncacheableTags[tag] = interceptor;
        return interceptor;
      }
      if (mark === "-") {
        t1 = A.makeLeafDispatchRecord(interceptor);
        Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
        return t1.i;
      }
      if (mark === "+")
        return A.patchInteriorProto(obj, interceptor);
      if (mark === "*")
        throw A.wrapException(A.UnimplementedError$(tag));
      if (init.leafTags[tag] === true) {
        t1 = A.makeLeafDispatchRecord(interceptor);
        Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
        return t1.i;
      } else
        return A.patchInteriorProto(obj, interceptor);
    },
    patchInteriorProto(obj, interceptor) {
      var proto = Object.getPrototypeOf(obj);
      Object.defineProperty(proto, init.dispatchPropertyName, {value: J.makeDispatchRecord(interceptor, proto, null, null), enumerable: false, writable: true, configurable: true});
      return interceptor;
    },
    makeLeafDispatchRecord(interceptor) {
      return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
    },
    makeDefaultDispatchRecord(tag, interceptorClass, proto) {
      var interceptor = interceptorClass.prototype;
      if (init.leafTags[tag] === true)
        return A.makeLeafDispatchRecord(interceptor);
      else
        return J.makeDispatchRecord(interceptor, proto, null, null);
    },
    initNativeDispatch() {
      if (true === $.initNativeDispatchFlag)
        return;
      $.initNativeDispatchFlag = true;
      A.initNativeDispatchContinue();
    },
    initNativeDispatchContinue() {
      var map, tags, fun, i, tag, proto, record, interceptorClass;
      $.dispatchRecordsForInstanceTags = Object.create(null);
      $.interceptorsForUncacheableTags = Object.create(null);
      A.initHooks();
      map = init.interceptorsByTag;
      tags = Object.getOwnPropertyNames(map);
      if (typeof window != "undefined") {
        window;
        fun = function() {
        };
        for (i = 0; i < tags.length; ++i) {
          tag = tags[i];
          proto = $.prototypeForTagFunction.call$1(tag);
          if (proto != null) {
            record = A.makeDefaultDispatchRecord(tag, map[tag], proto);
            if (record != null) {
              Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
              fun.prototype = proto;
            }
          }
        }
      }
      for (i = 0; i < tags.length; ++i) {
        tag = tags[i];
        if (/^[A-Za-z_]/.test(tag)) {
          interceptorClass = map[tag];
          map["!" + tag] = interceptorClass;
          map["~" + tag] = interceptorClass;
          map["-" + tag] = interceptorClass;
          map["+" + tag] = interceptorClass;
          map["*" + tag] = interceptorClass;
        }
      }
    },
    initHooks() {
      var transformers, i, transformer, getTag, getUnknownTag, prototypeForTag,
        hooks = B.C_JS_CONST0();
      hooks = A.applyHooksTransformer(B.C_JS_CONST1, A.applyHooksTransformer(B.C_JS_CONST2, A.applyHooksTransformer(B.C_JS_CONST3, A.applyHooksTransformer(B.C_JS_CONST3, A.applyHooksTransformer(B.C_JS_CONST4, A.applyHooksTransformer(B.C_JS_CONST5, A.applyHooksTransformer(B.C_JS_CONST6(B.C_JS_CONST), hooks)))))));
      if (typeof dartNativeDispatchHooksTransformer != "undefined") {
        transformers = dartNativeDispatchHooksTransformer;
        if (typeof transformers == "function")
          transformers = [transformers];
        if (transformers.constructor == Array)
          for (i = 0; i < transformers.length; ++i) {
            transformer = transformers[i];
            if (typeof transformer == "function")
              hooks = transformer(hooks) || hooks;
          }
      }
      getTag = hooks.getTag;
      getUnknownTag = hooks.getUnknownTag;
      prototypeForTag = hooks.prototypeForTag;
      $.getTagFunction = new A.initHooks_closure(getTag);
      $.alternateTagFunction = new A.initHooks_closure0(getUnknownTag);
      $.prototypeForTagFunction = new A.initHooks_closure1(prototypeForTag);
    },
    applyHooksTransformer(transformer, hooks) {
      return transformer(hooks) || hooks;
    },
    escapeReplacement(replacement) {
      if (replacement.indexOf("$", 0) >= 0)
        return replacement.replace(/\$/g, "$$$$");
      return replacement;
    },
    quoteStringForRegExp(string) {
      if (/[[\]{}()*+?.\\^$|]/.test(string))
        return string.replace(/[[\]{}()*+?.\\^$|]/g, "\\$&");
      return string;
    },
    stringReplaceAllUnchecked(receiver, pattern, replacement) {
      var t1 = A.stringReplaceAllUncheckedString(receiver, pattern, replacement);
      return t1;
    },
    stringReplaceAllUncheckedString(receiver, pattern, replacement) {
      var $length, t1, i, index;
      if (pattern === "") {
        if (receiver === "")
          return replacement;
        $length = receiver.length;
        t1 = "" + replacement;
        for (i = 0; i < $length; ++i)
          t1 = t1 + receiver[i] + replacement;
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      }
      index = receiver.indexOf(pattern, 0);
      if (index < 0)
        return receiver;
      if (receiver.length < 500 || replacement.indexOf("$", 0) >= 0)
        return receiver.split(pattern).join(replacement);
      return receiver.replace(new RegExp(A.quoteStringForRegExp(pattern), "g"), A.escapeReplacement(replacement));
    },
    ConstantMapView: function ConstantMapView(t0, t1) {
      this._collection$_map = t0;
      this.$ti = t1;
    },
    ConstantMap: function ConstantMap() {
    },
    ConstantStringMap: function ConstantStringMap(t0, t1, t2, t3) {
      var _ = this;
      _.__js_helper$_length = t0;
      _._jsObject = t1;
      _.__js_helper$_keys = t2;
      _.$ti = t3;
    },
    JSInvocationMirror: function JSInvocationMirror(t0, t1, t2, t3, t4) {
      var _ = this;
      _._memberName = t0;
      _.__js_helper$_kind = t1;
      _._arguments = t2;
      _._namedArgumentNames = t3;
      _._typeArgumentCount = t4;
    },
    Primitives_functionNoSuchMethod_closure: function Primitives_functionNoSuchMethod_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.namedArgumentList = t1;
      this.$arguments = t2;
    },
    Closure: function Closure() {
    },
    Closure0Args: function Closure0Args() {
    },
    Closure2Args: function Closure2Args() {
    },
    TearOffClosure: function TearOffClosure() {
    },
    StaticClosure: function StaticClosure() {
    },
    BoundClosure: function BoundClosure(t0, t1) {
      this._receiver = t0;
      this._interceptor = t1;
    },
    RuntimeError: function RuntimeError(t0) {
      this.message = t0;
    },
    _Required: function _Required() {
    },
    JsLinkedHashMap: function JsLinkedHashMap(t0) {
      var _ = this;
      _.__js_helper$_length = 0;
      _._last = _._first = _.__js_helper$_rest = _._nums = _._strings = null;
      _._modifications = 0;
      _.$ti = t0;
    },
    LinkedHashMapCell: function LinkedHashMapCell(t0, t1) {
      this.hashMapCellKey = t0;
      this.hashMapCellValue = t1;
      this._next = null;
    },
    initHooks_closure: function initHooks_closure(t0) {
      this.getTag = t0;
    },
    initHooks_closure0: function initHooks_closure0(t0) {
      this.getUnknownTag = t0;
    },
    initHooks_closure1: function initHooks_closure1(t0) {
      this.prototypeForTag = t0;
    },
    _checkViewArguments(buffer, offsetInBytes, $length) {
    },
    _ensureNativeList(list) {
      return list;
    },
    NativeByteData_NativeByteData$view(buffer, offsetInBytes, $length) {
      var t1;
      A._checkViewArguments(buffer, offsetInBytes, $length);
      t1 = new DataView(buffer, offsetInBytes, $length);
      return t1;
    },
    NativeUint8List_NativeUint8List$view(buffer, offsetInBytes, $length) {
      A._checkViewArguments(buffer, offsetInBytes, $length);
      return $length == null ? new Uint8Array(buffer, offsetInBytes) : new Uint8Array(buffer, offsetInBytes, $length);
    },
    _checkValidIndex(index, list, $length) {
      if (index >>> 0 !== index || index >= $length)
        throw A.wrapException(A.diagnoseIndexError(list, index));
    },
    _checkValidRange(start, end, $length) {
      var t1;
      if (!(start >>> 0 !== start))
        if (end == null)
          t1 = start > $length;
        else
          t1 = end >>> 0 !== end || start > end || end > $length;
      else
        t1 = true;
      if (t1)
        throw A.wrapException(A.diagnoseRangeError(start, end, $length));
      if (end == null)
        return $length;
      return end;
    },
    NativeTypedData: function NativeTypedData() {
    },
    NativeByteData: function NativeByteData() {
    },
    NativeTypedArray: function NativeTypedArray() {
    },
    NativeTypedArrayOfInt: function NativeTypedArrayOfInt() {
    },
    NativeUint32List: function NativeUint32List() {
    },
    NativeUint8List: function NativeUint8List() {
    },
    _NativeTypedArrayOfInt_NativeTypedArray_ListMixin: function _NativeTypedArrayOfInt_NativeTypedArray_ListMixin() {
    },
    _NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin: function _NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin() {
    },
    Rti__getQuestionFromStar(universe, rti) {
      var question = rti._precomputed1;
      return question == null ? rti._precomputed1 = A._Universe__lookupQuestionRti(universe, rti._primary, true) : question;
    },
    Rti__getFutureFromFutureOr(universe, rti) {
      var future = rti._precomputed1;
      return future == null ? rti._precomputed1 = A._Universe__lookupInterfaceRti(universe, "Future", [rti._primary]) : future;
    },
    Rti__isUnionOfFunctionType(rti) {
      var kind = rti._kind;
      if (kind === 6 || kind === 7 || kind === 8)
        return A.Rti__isUnionOfFunctionType(rti._primary);
      return kind === 11 || kind === 12;
    },
    Rti__getCanonicalRecipe(rti) {
      return rti._canonicalRecipe;
    },
    findType(recipe) {
      return A._Universe_eval(init.typeUniverse, recipe, false);
    },
    _substitute(universe, rti, typeArguments, depth) {
      var baseType, substitutedBaseType, interfaceTypeArguments, substitutedInterfaceTypeArguments, base, substitutedBase, $arguments, substitutedArguments, returnType, substitutedReturnType, functionParameters, substitutedFunctionParameters, bounds, substitutedBounds, index, argument,
        kind = rti._kind;
      switch (kind) {
        case 5:
        case 1:
        case 2:
        case 3:
        case 4:
          return rti;
        case 6:
          baseType = rti._primary;
          substitutedBaseType = A._substitute(universe, baseType, typeArguments, depth);
          if (substitutedBaseType === baseType)
            return rti;
          return A._Universe__lookupStarRti(universe, substitutedBaseType, true);
        case 7:
          baseType = rti._primary;
          substitutedBaseType = A._substitute(universe, baseType, typeArguments, depth);
          if (substitutedBaseType === baseType)
            return rti;
          return A._Universe__lookupQuestionRti(universe, substitutedBaseType, true);
        case 8:
          baseType = rti._primary;
          substitutedBaseType = A._substitute(universe, baseType, typeArguments, depth);
          if (substitutedBaseType === baseType)
            return rti;
          return A._Universe__lookupFutureOrRti(universe, substitutedBaseType, true);
        case 9:
          interfaceTypeArguments = rti._rest;
          substitutedInterfaceTypeArguments = A._substituteArray(universe, interfaceTypeArguments, typeArguments, depth);
          if (substitutedInterfaceTypeArguments === interfaceTypeArguments)
            return rti;
          return A._Universe__lookupInterfaceRti(universe, rti._primary, substitutedInterfaceTypeArguments);
        case 10:
          base = rti._primary;
          substitutedBase = A._substitute(universe, base, typeArguments, depth);
          $arguments = rti._rest;
          substitutedArguments = A._substituteArray(universe, $arguments, typeArguments, depth);
          if (substitutedBase === base && substitutedArguments === $arguments)
            return rti;
          return A._Universe__lookupBindingRti(universe, substitutedBase, substitutedArguments);
        case 11:
          returnType = rti._primary;
          substitutedReturnType = A._substitute(universe, returnType, typeArguments, depth);
          functionParameters = rti._rest;
          substitutedFunctionParameters = A._substituteFunctionParameters(universe, functionParameters, typeArguments, depth);
          if (substitutedReturnType === returnType && substitutedFunctionParameters === functionParameters)
            return rti;
          return A._Universe__lookupFunctionRti(universe, substitutedReturnType, substitutedFunctionParameters);
        case 12:
          bounds = rti._rest;
          depth += bounds.length;
          substitutedBounds = A._substituteArray(universe, bounds, typeArguments, depth);
          base = rti._primary;
          substitutedBase = A._substitute(universe, base, typeArguments, depth);
          if (substitutedBounds === bounds && substitutedBase === base)
            return rti;
          return A._Universe__lookupGenericFunctionRti(universe, substitutedBase, substitutedBounds, true);
        case 13:
          index = rti._primary;
          if (index < depth)
            return rti;
          argument = typeArguments[index - depth];
          if (argument == null)
            return rti;
          return argument;
        default:
          throw A.wrapException(A.AssertionError$("Attempted to substitute unexpected RTI kind " + kind));
      }
    },
    _substituteArray(universe, rtiArray, typeArguments, depth) {
      var changed, i, rti, substitutedRti,
        $length = rtiArray.length,
        result = A._Utils_newArrayOrEmpty($length);
      for (changed = false, i = 0; i < $length; ++i) {
        rti = rtiArray[i];
        substitutedRti = A._substitute(universe, rti, typeArguments, depth);
        if (substitutedRti !== rti)
          changed = true;
        result[i] = substitutedRti;
      }
      return changed ? result : rtiArray;
    },
    _substituteNamed(universe, namedArray, typeArguments, depth) {
      var changed, i, t1, t2, rti, substitutedRti,
        $length = namedArray.length,
        result = A._Utils_newArrayOrEmpty($length);
      for (changed = false, i = 0; i < $length; i += 3) {
        t1 = namedArray[i];
        t2 = namedArray[i + 1];
        rti = namedArray[i + 2];
        substitutedRti = A._substitute(universe, rti, typeArguments, depth);
        if (substitutedRti !== rti)
          changed = true;
        result.splice(i, 3, t1, t2, substitutedRti);
      }
      return changed ? result : namedArray;
    },
    _substituteFunctionParameters(universe, functionParameters, typeArguments, depth) {
      var result,
        requiredPositional = functionParameters._requiredPositional,
        substitutedRequiredPositional = A._substituteArray(universe, requiredPositional, typeArguments, depth),
        optionalPositional = functionParameters._optionalPositional,
        substitutedOptionalPositional = A._substituteArray(universe, optionalPositional, typeArguments, depth),
        named = functionParameters._named,
        substitutedNamed = A._substituteNamed(universe, named, typeArguments, depth);
      if (substitutedRequiredPositional === requiredPositional && substitutedOptionalPositional === optionalPositional && substitutedNamed === named)
        return functionParameters;
      result = new A._FunctionParameters();
      result._requiredPositional = substitutedRequiredPositional;
      result._optionalPositional = substitutedOptionalPositional;
      result._named = substitutedNamed;
      return result;
    },
    _setArrayType(target, rti) {
      target[init.arrayRti] = rti;
      return target;
    },
    closureFunctionType(closure) {
      var signature = closure.$signature;
      if (signature != null) {
        if (typeof signature == "number")
          return A.getTypeFromTypesTable(signature);
        return closure.$signature();
      }
      return null;
    },
    instanceOrFunctionType(object, testRti) {
      var rti;
      if (A.Rti__isUnionOfFunctionType(testRti))
        if (object instanceof A.Closure) {
          rti = A.closureFunctionType(object);
          if (rti != null)
            return rti;
        }
      return A.instanceType(object);
    },
    instanceType(object) {
      var rti;
      if (object instanceof A.Object) {
        rti = object.$ti;
        return rti != null ? rti : A._instanceTypeFromConstructor(object);
      }
      if (Array.isArray(object))
        return A._arrayInstanceType(object);
      return A._instanceTypeFromConstructor(J.getInterceptor$(object));
    },
    _arrayInstanceType(object) {
      var rti = object[init.arrayRti],
        defaultRti = type$.JSArray_dynamic;
      if (rti == null)
        return defaultRti;
      if (rti.constructor !== defaultRti.constructor)
        return defaultRti;
      return rti;
    },
    _instanceType(object) {
      var rti = object.$ti;
      return rti != null ? rti : A._instanceTypeFromConstructor(object);
    },
    _instanceTypeFromConstructor(instance) {
      var $constructor = instance.constructor,
        probe = $constructor.$ccache;
      if (probe != null)
        return probe;
      return A._instanceTypeFromConstructorMiss(instance, $constructor);
    },
    _instanceTypeFromConstructorMiss(instance, $constructor) {
      var effectiveConstructor = instance instanceof A.Closure ? instance.__proto__.__proto__.constructor : $constructor,
        rti = A._Universe_findErasedType(init.typeUniverse, effectiveConstructor.name);
      $constructor.$ccache = rti;
      return rti;
    },
    getTypeFromTypesTable(index) {
      var rti,
        table = init.types,
        type = table[index];
      if (typeof type == "string") {
        rti = A._Universe_eval(init.typeUniverse, type, false);
        table[index] = rti;
        return rti;
      }
      return type;
    },
    _installSpecializedIsTest(object) {
      var t1, unstarred, isFn, $name, testRti = this;
      if (testRti === type$.Object)
        return A._finishIsFn(testRti, object, A._isObject);
      if (!A.isStrongTopType(testRti))
        if (!(testRti === type$.legacy_Object))
          t1 = false;
        else
          t1 = true;
      else
        t1 = true;
      if (t1)
        return A._finishIsFn(testRti, object, A._isTop);
      t1 = testRti._kind;
      unstarred = t1 === 6 ? testRti._primary : testRti;
      if (unstarred === type$.int)
        isFn = A._isInt;
      else if (unstarred === type$.double || unstarred === type$.num)
        isFn = A._isNum;
      else if (unstarred === type$.String)
        isFn = A._isString;
      else
        isFn = unstarred === type$.bool ? A._isBool : null;
      if (isFn != null)
        return A._finishIsFn(testRti, object, isFn);
      if (unstarred._kind === 9) {
        $name = unstarred._primary;
        if (unstarred._rest.every(A.isTopType)) {
          testRti._specializedTestResource = "$is" + $name;
          if ($name === "List")
            return A._finishIsFn(testRti, object, A._isListTestViaProperty);
          return A._finishIsFn(testRti, object, A._isTestViaProperty);
        }
      } else if (t1 === 7)
        return A._finishIsFn(testRti, object, A._generalNullableIsTestImplementation);
      return A._finishIsFn(testRti, object, A._generalIsTestImplementation);
    },
    _finishIsFn(testRti, object, isFn) {
      testRti._is = isFn;
      return testRti._is(object);
    },
    _installSpecializedAsCheck(object) {
      var t1, testRti = this,
        asFn = A._generalAsCheckImplementation;
      if (!A.isStrongTopType(testRti))
        if (!(testRti === type$.legacy_Object))
          t1 = false;
        else
          t1 = true;
      else
        t1 = true;
      if (t1)
        asFn = A._asTop;
      else if (testRti === type$.Object)
        asFn = A._asObject;
      else {
        t1 = A.isNullable(testRti);
        if (t1)
          asFn = A._generalNullableAsCheckImplementation;
      }
      testRti._as = asFn;
      return testRti._as(object);
    },
    _nullIs(testRti) {
      var t1,
        kind = testRti._kind;
      if (!A.isStrongTopType(testRti))
        if (!(testRti === type$.legacy_Object))
          if (!(testRti === type$.legacy_Never))
            if (kind !== 7)
              t1 = kind === 8 && A._nullIs(testRti._primary) || testRti === type$.Null || testRti === type$.JSNull;
            else
              t1 = true;
          else
            t1 = true;
        else
          t1 = true;
      else
        t1 = true;
      return t1;
    },
    _generalIsTestImplementation(object) {
      var testRti = this;
      if (object == null)
        return A._nullIs(testRti);
      return A._isSubtype(init.typeUniverse, A.instanceOrFunctionType(object, testRti), null, testRti, null);
    },
    _generalNullableIsTestImplementation(object) {
      if (object == null)
        return true;
      return this._primary._is(object);
    },
    _isTestViaProperty(object) {
      var tag, testRti = this;
      if (object == null)
        return A._nullIs(testRti);
      tag = testRti._specializedTestResource;
      if (object instanceof A.Object)
        return !!object[tag];
      return !!J.getInterceptor$(object)[tag];
    },
    _isListTestViaProperty(object) {
      var tag, testRti = this;
      if (object == null)
        return A._nullIs(testRti);
      if (typeof object != "object")
        return false;
      if (Array.isArray(object))
        return true;
      tag = testRti._specializedTestResource;
      if (object instanceof A.Object)
        return !!object[tag];
      return !!J.getInterceptor$(object)[tag];
    },
    _generalAsCheckImplementation(object) {
      var t1, testRti = this;
      if (object == null) {
        t1 = A.isNullable(testRti);
        if (t1)
          return object;
      } else if (testRti._is(object))
        return object;
      A._failedAsCheck(object, testRti);
    },
    _generalNullableAsCheckImplementation(object) {
      var testRti = this;
      if (object == null)
        return object;
      else if (testRti._is(object))
        return object;
      A._failedAsCheck(object, testRti);
    },
    _failedAsCheck(object, testRti) {
      throw A.wrapException(A._TypeError$fromMessage(A._Error_compose(object, A.instanceOrFunctionType(object, testRti), A._rtiToString(testRti, null))));
    },
    _Error_compose(object, objectRti, checkedTypeDescription) {
      var objectDescription = A.Error_safeToString(object);
      return objectDescription + ": type '" + A._rtiToString(objectRti == null ? A.instanceType(object) : objectRti, null) + "' is not a subtype of type '" + checkedTypeDescription + "'";
    },
    _TypeError$fromMessage(message) {
      return new A._TypeError("TypeError: " + message);
    },
    _TypeError__TypeError$forType(object, type) {
      return new A._TypeError("TypeError: " + A._Error_compose(object, null, type));
    },
    _isObject(object) {
      return object != null;
    },
    _asObject(object) {
      if (object != null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "Object"));
    },
    _isTop(object) {
      return true;
    },
    _asTop(object) {
      return object;
    },
    _isBool(object) {
      return true === object || false === object;
    },
    _asBool(object) {
      if (true === object)
        return true;
      if (false === object)
        return false;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "bool"));
    },
    _asBoolS(object) {
      if (true === object)
        return true;
      if (false === object)
        return false;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "bool"));
    },
    _asBoolQ(object) {
      if (true === object)
        return true;
      if (false === object)
        return false;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "bool?"));
    },
    _asDouble(object) {
      if (typeof object == "number")
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "double"));
    },
    _asDoubleS(object) {
      if (typeof object == "number")
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "double"));
    },
    _asDoubleQ(object) {
      if (typeof object == "number")
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "double?"));
    },
    _isInt(object) {
      return typeof object == "number" && Math.floor(object) === object;
    },
    _asInt(object) {
      if (typeof object == "number" && Math.floor(object) === object)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "int"));
    },
    _asIntS(object) {
      if (typeof object == "number" && Math.floor(object) === object)
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "int"));
    },
    _asIntQ(object) {
      if (typeof object == "number" && Math.floor(object) === object)
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "int?"));
    },
    _isNum(object) {
      return typeof object == "number";
    },
    _asNum(object) {
      if (typeof object == "number")
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "num"));
    },
    _asNumS(object) {
      if (typeof object == "number")
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "num"));
    },
    _asNumQ(object) {
      if (typeof object == "number")
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "num?"));
    },
    _isString(object) {
      return typeof object == "string";
    },
    _asString(object) {
      if (typeof object == "string")
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "String"));
    },
    _asStringS(object) {
      if (typeof object == "string")
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "String"));
    },
    _asStringQ(object) {
      if (typeof object == "string")
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "String?"));
    },
    _rtiArrayToString(array, genericContext) {
      var s, sep, i;
      for (s = "", sep = "", i = 0; i < array.length; ++i, sep = ", ")
        s += sep + A._rtiToString(array[i], genericContext);
      return s;
    },
    _functionRtiToString(functionType, genericContext, bounds) {
      var boundsLength, outerContextLength, offset, i, t1, t2, typeParametersText, typeSep, t3, t4, boundRti, kind, parameters, requiredPositional, requiredPositionalLength, optionalPositional, optionalPositionalLength, named, namedLength, returnTypeText, argumentsText, sep, _s2_ = ", ";
      if (bounds != null) {
        boundsLength = bounds.length;
        if (genericContext == null) {
          genericContext = A._setArrayType([], type$.JSArray_String);
          outerContextLength = null;
        } else
          outerContextLength = genericContext.length;
        offset = genericContext.length;
        for (i = boundsLength; i > 0; --i)
          B.JSArray_methods.add$1(genericContext, "T" + (offset + i));
        for (t1 = type$.nullable_Object, t2 = type$.legacy_Object, typeParametersText = "<", typeSep = "", i = 0; i < boundsLength; ++i, typeSep = _s2_) {
          t3 = genericContext.length;
          t4 = t3 - 1 - i;
          if (!(t4 >= 0))
            return A.ioore(genericContext, t4);
          typeParametersText = B.JSString_methods.$add(typeParametersText + typeSep, genericContext[t4]);
          boundRti = bounds[i];
          kind = boundRti._kind;
          if (!(kind === 2 || kind === 3 || kind === 4 || kind === 5 || boundRti === t1))
            if (!(boundRti === t2))
              t3 = false;
            else
              t3 = true;
          else
            t3 = true;
          if (!t3)
            typeParametersText += " extends " + A._rtiToString(boundRti, genericContext);
        }
        typeParametersText += ">";
      } else {
        typeParametersText = "";
        outerContextLength = null;
      }
      t1 = functionType._primary;
      parameters = functionType._rest;
      requiredPositional = parameters._requiredPositional;
      requiredPositionalLength = requiredPositional.length;
      optionalPositional = parameters._optionalPositional;
      optionalPositionalLength = optionalPositional.length;
      named = parameters._named;
      namedLength = named.length;
      returnTypeText = A._rtiToString(t1, genericContext);
      for (argumentsText = "", sep = "", i = 0; i < requiredPositionalLength; ++i, sep = _s2_)
        argumentsText += sep + A._rtiToString(requiredPositional[i], genericContext);
      if (optionalPositionalLength > 0) {
        argumentsText += sep + "[";
        for (sep = "", i = 0; i < optionalPositionalLength; ++i, sep = _s2_)
          argumentsText += sep + A._rtiToString(optionalPositional[i], genericContext);
        argumentsText += "]";
      }
      if (namedLength > 0) {
        argumentsText += sep + "{";
        for (sep = "", i = 0; i < namedLength; i += 3, sep = _s2_) {
          argumentsText += sep;
          if (named[i + 1])
            argumentsText += "required ";
          argumentsText += A._rtiToString(named[i + 2], genericContext) + " " + named[i];
        }
        argumentsText += "}";
      }
      if (outerContextLength != null) {
        genericContext.toString;
        genericContext.length = outerContextLength;
      }
      return typeParametersText + "(" + argumentsText + ") => " + returnTypeText;
    },
    _rtiToString(rti, genericContext) {
      var s, questionArgument, argumentKind, $name, $arguments, t1, t2,
        kind = rti._kind;
      if (kind === 5)
        return "erased";
      if (kind === 2)
        return "dynamic";
      if (kind === 3)
        return "void";
      if (kind === 1)
        return "Never";
      if (kind === 4)
        return "any";
      if (kind === 6) {
        s = A._rtiToString(rti._primary, genericContext);
        return s;
      }
      if (kind === 7) {
        questionArgument = rti._primary;
        s = A._rtiToString(questionArgument, genericContext);
        argumentKind = questionArgument._kind;
        return (argumentKind === 11 || argumentKind === 12 ? "(" + s + ")" : s) + "?";
      }
      if (kind === 8)
        return "FutureOr<" + A._rtiToString(rti._primary, genericContext) + ">";
      if (kind === 9) {
        $name = A._unminifyOrTag(rti._primary);
        $arguments = rti._rest;
        return $arguments.length > 0 ? $name + ("<" + A._rtiArrayToString($arguments, genericContext) + ">") : $name;
      }
      if (kind === 11)
        return A._functionRtiToString(rti, genericContext, null);
      if (kind === 12)
        return A._functionRtiToString(rti._primary, genericContext, rti._rest);
      if (kind === 13) {
        t1 = rti._primary;
        t2 = genericContext.length;
        t1 = t2 - 1 - t1;
        if (!(t1 >= 0 && t1 < t2))
          return A.ioore(genericContext, t1);
        return genericContext[t1];
      }
      return "?";
    },
    _unminifyOrTag(rawClassName) {
      var preserved = init.mangledGlobalNames[rawClassName];
      if (preserved != null)
        return preserved;
      return rawClassName;
    },
    _Universe_findRule(universe, targetType) {
      var rule = universe.tR[targetType];
      for (; typeof rule == "string";)
        rule = universe.tR[rule];
      return rule;
    },
    _Universe_findErasedType(universe, cls) {
      var $length, erased, $arguments, i, $interface,
        t1 = universe.eT,
        probe = t1[cls];
      if (probe == null)
        return A._Universe_eval(universe, cls, false);
      else if (typeof probe == "number") {
        $length = probe;
        erased = A._Universe__lookupTerminalRti(universe, 5, "#");
        $arguments = A._Utils_newArrayOrEmpty($length);
        for (i = 0; i < $length; ++i)
          $arguments[i] = erased;
        $interface = A._Universe__lookupInterfaceRti(universe, cls, $arguments);
        t1[cls] = $interface;
        return $interface;
      } else
        return probe;
    },
    _Universe_addRules(universe, rules) {
      return A._Utils_objectAssign(universe.tR, rules);
    },
    _Universe_addErasedTypes(universe, types) {
      return A._Utils_objectAssign(universe.eT, types);
    },
    _Universe_eval(universe, recipe, normalize) {
      var rti,
        t1 = universe.eC,
        probe = t1.get(recipe);
      if (probe != null)
        return probe;
      rti = A._Parser_parse(A._Parser_create(universe, null, recipe, normalize));
      t1.set(recipe, rti);
      return rti;
    },
    _Universe_evalInEnvironment(universe, environment, recipe) {
      var probe, rti,
        cache = environment._evalCache;
      if (cache == null)
        cache = environment._evalCache = new Map();
      probe = cache.get(recipe);
      if (probe != null)
        return probe;
      rti = A._Parser_parse(A._Parser_create(universe, environment, recipe, true));
      cache.set(recipe, rti);
      return rti;
    },
    _Universe_bind(universe, environment, argumentsRti) {
      var argumentsRecipe, probe, rti,
        cache = environment._bindCache;
      if (cache == null)
        cache = environment._bindCache = new Map();
      argumentsRecipe = argumentsRti._canonicalRecipe;
      probe = cache.get(argumentsRecipe);
      if (probe != null)
        return probe;
      rti = A._Universe__lookupBindingRti(universe, environment, argumentsRti._kind === 10 ? argumentsRti._rest : [argumentsRti]);
      cache.set(argumentsRecipe, rti);
      return rti;
    },
    _Universe__installTypeTests(universe, rti) {
      rti._as = A._installSpecializedAsCheck;
      rti._is = A._installSpecializedIsTest;
      return rti;
    },
    _Universe__lookupTerminalRti(universe, kind, key) {
      var rti, t1,
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = kind;
      rti._canonicalRecipe = key;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__lookupStarRti(universe, baseType, normalize) {
      var t1,
        key = baseType._canonicalRecipe + "*",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = A._Universe__createStarRti(universe, baseType, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createStarRti(universe, baseType, key, normalize) {
      var baseKind, t1, rti;
      if (normalize) {
        baseKind = baseType._kind;
        if (!A.isStrongTopType(baseType))
          t1 = baseType === type$.Null || baseType === type$.JSNull || baseKind === 7 || baseKind === 6;
        else
          t1 = true;
        if (t1)
          return baseType;
      }
      rti = new A.Rti(null, null);
      rti._kind = 6;
      rti._primary = baseType;
      rti._canonicalRecipe = key;
      return A._Universe__installTypeTests(universe, rti);
    },
    _Universe__lookupQuestionRti(universe, baseType, normalize) {
      var t1,
        key = baseType._canonicalRecipe + "?",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = A._Universe__createQuestionRti(universe, baseType, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createQuestionRti(universe, baseType, key, normalize) {
      var baseKind, t1, starArgument, rti;
      if (normalize) {
        baseKind = baseType._kind;
        if (!A.isStrongTopType(baseType))
          if (!(baseType === type$.Null || baseType === type$.JSNull))
            if (baseKind !== 7)
              t1 = baseKind === 8 && A.isNullable(baseType._primary);
            else
              t1 = true;
          else
            t1 = true;
        else
          t1 = true;
        if (t1)
          return baseType;
        else if (baseKind === 1 || baseType === type$.legacy_Never)
          return type$.Null;
        else if (baseKind === 6) {
          starArgument = baseType._primary;
          if (starArgument._kind === 8 && A.isNullable(starArgument._primary))
            return starArgument;
          else
            return A.Rti__getQuestionFromStar(universe, baseType);
        }
      }
      rti = new A.Rti(null, null);
      rti._kind = 7;
      rti._primary = baseType;
      rti._canonicalRecipe = key;
      return A._Universe__installTypeTests(universe, rti);
    },
    _Universe__lookupFutureOrRti(universe, baseType, normalize) {
      var t1,
        key = baseType._canonicalRecipe + "/",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = A._Universe__createFutureOrRti(universe, baseType, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createFutureOrRti(universe, baseType, key, normalize) {
      var t1, t2, rti;
      if (normalize) {
        t1 = baseType._kind;
        if (!A.isStrongTopType(baseType))
          if (!(baseType === type$.legacy_Object))
            t2 = false;
          else
            t2 = true;
        else
          t2 = true;
        if (t2 || baseType === type$.Object)
          return baseType;
        else if (t1 === 1)
          return A._Universe__lookupInterfaceRti(universe, "Future", [baseType]);
        else if (baseType === type$.Null || baseType === type$.JSNull)
          return type$.nullable_Future_Null;
      }
      rti = new A.Rti(null, null);
      rti._kind = 8;
      rti._primary = baseType;
      rti._canonicalRecipe = key;
      return A._Universe__installTypeTests(universe, rti);
    },
    _Universe__lookupGenericFunctionParameterRti(universe, index) {
      var rti, t1,
        key = "" + index + "^",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = 13;
      rti._primary = index;
      rti._canonicalRecipe = key;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__canonicalRecipeJoin($arguments) {
      var s, sep, i,
        $length = $arguments.length;
      for (s = "", sep = "", i = 0; i < $length; ++i, sep = ",")
        s += sep + $arguments[i]._canonicalRecipe;
      return s;
    },
    _Universe__canonicalRecipeJoinNamed($arguments) {
      var s, sep, i, t1, nameSep,
        $length = $arguments.length;
      for (s = "", sep = "", i = 0; i < $length; i += 3, sep = ",") {
        t1 = $arguments[i];
        nameSep = $arguments[i + 1] ? "!" : ":";
        s += sep + t1 + nameSep + $arguments[i + 2]._canonicalRecipe;
      }
      return s;
    },
    _Universe__lookupInterfaceRti(universe, $name, $arguments) {
      var probe, rti, t1,
        s = $name;
      if ($arguments.length > 0)
        s += "<" + A._Universe__canonicalRecipeJoin($arguments) + ">";
      probe = universe.eC.get(s);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = 9;
      rti._primary = $name;
      rti._rest = $arguments;
      if ($arguments.length > 0)
        rti._precomputed1 = $arguments[0];
      rti._canonicalRecipe = s;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(s, t1);
      return t1;
    },
    _Universe__lookupBindingRti(universe, base, $arguments) {
      var newBase, newArguments, key, probe, rti, t1;
      if (base._kind === 10) {
        newBase = base._primary;
        newArguments = base._rest.concat($arguments);
      } else {
        newArguments = $arguments;
        newBase = base;
      }
      key = newBase._canonicalRecipe + (";<" + A._Universe__canonicalRecipeJoin(newArguments) + ">");
      probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = 10;
      rti._primary = newBase;
      rti._rest = newArguments;
      rti._canonicalRecipe = key;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__lookupFunctionRti(universe, returnType, parameters) {
      var sep, key, probe, rti, t1,
        s = returnType._canonicalRecipe,
        requiredPositional = parameters._requiredPositional,
        requiredPositionalLength = requiredPositional.length,
        optionalPositional = parameters._optionalPositional,
        optionalPositionalLength = optionalPositional.length,
        named = parameters._named,
        namedLength = named.length,
        recipe = "(" + A._Universe__canonicalRecipeJoin(requiredPositional);
      if (optionalPositionalLength > 0) {
        sep = requiredPositionalLength > 0 ? "," : "";
        recipe += sep + "[" + A._Universe__canonicalRecipeJoin(optionalPositional) + "]";
      }
      if (namedLength > 0) {
        sep = requiredPositionalLength > 0 ? "," : "";
        recipe += sep + "{" + A._Universe__canonicalRecipeJoinNamed(named) + "}";
      }
      key = s + (recipe + ")");
      probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = 11;
      rti._primary = returnType;
      rti._rest = parameters;
      rti._canonicalRecipe = key;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__lookupGenericFunctionRti(universe, baseFunctionType, bounds, normalize) {
      var t1,
        key = baseFunctionType._canonicalRecipe + ("<" + A._Universe__canonicalRecipeJoin(bounds) + ">"),
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = A._Universe__createGenericFunctionRti(universe, baseFunctionType, bounds, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createGenericFunctionRti(universe, baseFunctionType, bounds, key, normalize) {
      var $length, typeArguments, count, i, bound, substitutedBase, substitutedBounds, rti;
      if (normalize) {
        $length = bounds.length;
        typeArguments = A._Utils_newArrayOrEmpty($length);
        for (count = 0, i = 0; i < $length; ++i) {
          bound = bounds[i];
          if (bound._kind === 1) {
            typeArguments[i] = bound;
            ++count;
          }
        }
        if (count > 0) {
          substitutedBase = A._substitute(universe, baseFunctionType, typeArguments, 0);
          substitutedBounds = A._substituteArray(universe, bounds, typeArguments, 0);
          return A._Universe__lookupGenericFunctionRti(universe, substitutedBase, substitutedBounds, bounds !== substitutedBounds);
        }
      }
      rti = new A.Rti(null, null);
      rti._kind = 12;
      rti._primary = baseFunctionType;
      rti._rest = bounds;
      rti._canonicalRecipe = key;
      return A._Universe__installTypeTests(universe, rti);
    },
    _Parser_create(universe, environment, recipe, normalize) {
      return {u: universe, e: environment, r: recipe, s: [], p: 0, n: normalize};
    },
    _Parser_parse(parser) {
      var t2, i, ch, t3, array, head, base, parameters, optionalPositional, named, item,
        source = parser.r,
        t1 = parser.s;
      for (t2 = source.length, i = 0; i < t2;) {
        ch = source.charCodeAt(i);
        if (ch >= 48 && ch <= 57)
          i = A._Parser_handleDigit(i + 1, ch, source, t1);
        else if ((((ch | 32) >>> 0) - 97 & 65535) < 26 || ch === 95 || ch === 36)
          i = A._Parser_handleIdentifier(parser, i, source, t1, false);
        else if (ch === 46)
          i = A._Parser_handleIdentifier(parser, i, source, t1, true);
        else {
          ++i;
          switch (ch) {
            case 44:
              break;
            case 58:
              t1.push(false);
              break;
            case 33:
              t1.push(true);
              break;
            case 59:
              t1.push(A._Parser_toType(parser.u, parser.e, t1.pop()));
              break;
            case 94:
              t1.push(A._Universe__lookupGenericFunctionParameterRti(parser.u, t1.pop()));
              break;
            case 35:
              t1.push(A._Universe__lookupTerminalRti(parser.u, 5, "#"));
              break;
            case 64:
              t1.push(A._Universe__lookupTerminalRti(parser.u, 2, "@"));
              break;
            case 126:
              t1.push(A._Universe__lookupTerminalRti(parser.u, 3, "~"));
              break;
            case 60:
              t1.push(parser.p);
              parser.p = t1.length;
              break;
            case 62:
              t3 = parser.u;
              array = t1.splice(parser.p);
              A._Parser_toTypes(parser.u, parser.e, array);
              parser.p = t1.pop();
              head = t1.pop();
              if (typeof head == "string")
                t1.push(A._Universe__lookupInterfaceRti(t3, head, array));
              else {
                base = A._Parser_toType(t3, parser.e, head);
                switch (base._kind) {
                  case 11:
                    t1.push(A._Universe__lookupGenericFunctionRti(t3, base, array, parser.n));
                    break;
                  default:
                    t1.push(A._Universe__lookupBindingRti(t3, base, array));
                    break;
                }
              }
              break;
            case 38:
              A._Parser_handleExtendedOperations(parser, t1);
              break;
            case 42:
              t3 = parser.u;
              t1.push(A._Universe__lookupStarRti(t3, A._Parser_toType(t3, parser.e, t1.pop()), parser.n));
              break;
            case 63:
              t3 = parser.u;
              t1.push(A._Universe__lookupQuestionRti(t3, A._Parser_toType(t3, parser.e, t1.pop()), parser.n));
              break;
            case 47:
              t3 = parser.u;
              t1.push(A._Universe__lookupFutureOrRti(t3, A._Parser_toType(t3, parser.e, t1.pop()), parser.n));
              break;
            case 40:
              t1.push(parser.p);
              parser.p = t1.length;
              break;
            case 41:
              t3 = parser.u;
              parameters = new A._FunctionParameters();
              optionalPositional = t3.sEA;
              named = t3.sEA;
              head = t1.pop();
              if (typeof head == "number")
                switch (head) {
                  case -1:
                    optionalPositional = t1.pop();
                    break;
                  case -2:
                    named = t1.pop();
                    break;
                  default:
                    t1.push(head);
                    break;
                }
              else
                t1.push(head);
              array = t1.splice(parser.p);
              A._Parser_toTypes(parser.u, parser.e, array);
              parser.p = t1.pop();
              parameters._requiredPositional = array;
              parameters._optionalPositional = optionalPositional;
              parameters._named = named;
              t1.push(A._Universe__lookupFunctionRti(t3, A._Parser_toType(t3, parser.e, t1.pop()), parameters));
              break;
            case 91:
              t1.push(parser.p);
              parser.p = t1.length;
              break;
            case 93:
              array = t1.splice(parser.p);
              A._Parser_toTypes(parser.u, parser.e, array);
              parser.p = t1.pop();
              t1.push(array);
              t1.push(-1);
              break;
            case 123:
              t1.push(parser.p);
              parser.p = t1.length;
              break;
            case 125:
              array = t1.splice(parser.p);
              A._Parser_toTypesNamed(parser.u, parser.e, array);
              parser.p = t1.pop();
              t1.push(array);
              t1.push(-2);
              break;
            default:
              throw "Bad character " + ch;
          }
        }
      }
      item = t1.pop();
      return A._Parser_toType(parser.u, parser.e, item);
    },
    _Parser_handleDigit(i, digit, source, stack) {
      var t1, ch,
        value = digit - 48;
      for (t1 = source.length; i < t1; ++i) {
        ch = source.charCodeAt(i);
        if (!(ch >= 48 && ch <= 57))
          break;
        value = value * 10 + (ch - 48);
      }
      stack.push(value);
      return i;
    },
    _Parser_handleIdentifier(parser, start, source, stack, hasPeriod) {
      var t1, ch, t2, string, environment, recipe,
        i = start + 1;
      for (t1 = source.length; i < t1; ++i) {
        ch = source.charCodeAt(i);
        if (ch === 46) {
          if (hasPeriod)
            break;
          hasPeriod = true;
        } else {
          if (!((((ch | 32) >>> 0) - 97 & 65535) < 26 || ch === 95 || ch === 36))
            t2 = ch >= 48 && ch <= 57;
          else
            t2 = true;
          if (!t2)
            break;
        }
      }
      string = source.substring(start, i);
      if (hasPeriod) {
        t1 = parser.u;
        environment = parser.e;
        if (environment._kind === 10)
          environment = environment._primary;
        recipe = A._Universe_findRule(t1, environment._primary)[string];
        if (recipe == null)
          A.throwExpression('No "' + string + '" in "' + A.Rti__getCanonicalRecipe(environment) + '"');
        stack.push(A._Universe_evalInEnvironment(t1, environment, recipe));
      } else
        stack.push(string);
      return i;
    },
    _Parser_handleExtendedOperations(parser, stack) {
      var $top = stack.pop();
      if (0 === $top) {
        stack.push(A._Universe__lookupTerminalRti(parser.u, 1, "0&"));
        return;
      }
      if (1 === $top) {
        stack.push(A._Universe__lookupTerminalRti(parser.u, 4, "1&"));
        return;
      }
      throw A.wrapException(A.AssertionError$("Unexpected extended operation " + A.S($top)));
    },
    _Parser_toType(universe, environment, item) {
      if (typeof item == "string")
        return A._Universe__lookupInterfaceRti(universe, item, universe.sEA);
      else if (typeof item == "number")
        return A._Parser_indexToType(universe, environment, item);
      else
        return item;
    },
    _Parser_toTypes(universe, environment, items) {
      var i,
        $length = items.length;
      for (i = 0; i < $length; ++i)
        items[i] = A._Parser_toType(universe, environment, items[i]);
    },
    _Parser_toTypesNamed(universe, environment, items) {
      var i,
        $length = items.length;
      for (i = 2; i < $length; i += 3)
        items[i] = A._Parser_toType(universe, environment, items[i]);
    },
    _Parser_indexToType(universe, environment, index) {
      var typeArguments, len,
        kind = environment._kind;
      if (kind === 10) {
        if (index === 0)
          return environment._primary;
        typeArguments = environment._rest;
        len = typeArguments.length;
        if (index <= len)
          return typeArguments[index - 1];
        index -= len;
        environment = environment._primary;
        kind = environment._kind;
      } else if (index === 0)
        return environment;
      if (kind !== 9)
        throw A.wrapException(A.AssertionError$("Indexed base must be an interface type"));
      typeArguments = environment._rest;
      if (index <= typeArguments.length)
        return typeArguments[index - 1];
      throw A.wrapException(A.AssertionError$("Bad index " + index + " for " + environment.toString$0(0)));
    },
    _isSubtype(universe, s, sEnv, t, tEnv) {
      var t1, sKind, leftTypeVariable, tKind, sBounds, tBounds, sLength, i, sBound, tBound;
      if (s === t)
        return true;
      if (!A.isStrongTopType(t))
        if (!(t === type$.legacy_Object))
          t1 = false;
        else
          t1 = true;
      else
        t1 = true;
      if (t1)
        return true;
      sKind = s._kind;
      if (sKind === 4)
        return true;
      if (A.isStrongTopType(s))
        return false;
      if (s._kind !== 1)
        t1 = false;
      else
        t1 = true;
      if (t1)
        return true;
      leftTypeVariable = sKind === 13;
      if (leftTypeVariable)
        if (A._isSubtype(universe, sEnv[s._primary], sEnv, t, tEnv))
          return true;
      tKind = t._kind;
      t1 = s === type$.Null || s === type$.JSNull;
      if (t1) {
        if (tKind === 8)
          return A._isSubtype(universe, s, sEnv, t._primary, tEnv);
        return t === type$.Null || t === type$.JSNull || tKind === 7 || tKind === 6;
      }
      if (t === type$.Object) {
        if (sKind === 8)
          return A._isSubtype(universe, s._primary, sEnv, t, tEnv);
        if (sKind === 6)
          return A._isSubtype(universe, s._primary, sEnv, t, tEnv);
        return sKind !== 7;
      }
      if (sKind === 6)
        return A._isSubtype(universe, s._primary, sEnv, t, tEnv);
      if (tKind === 6) {
        t1 = A.Rti__getQuestionFromStar(universe, t);
        return A._isSubtype(universe, s, sEnv, t1, tEnv);
      }
      if (sKind === 8) {
        if (!A._isSubtype(universe, s._primary, sEnv, t, tEnv))
          return false;
        return A._isSubtype(universe, A.Rti__getFutureFromFutureOr(universe, s), sEnv, t, tEnv);
      }
      if (sKind === 7) {
        t1 = A._isSubtype(universe, type$.Null, sEnv, t, tEnv);
        return t1 && A._isSubtype(universe, s._primary, sEnv, t, tEnv);
      }
      if (tKind === 8) {
        if (A._isSubtype(universe, s, sEnv, t._primary, tEnv))
          return true;
        return A._isSubtype(universe, s, sEnv, A.Rti__getFutureFromFutureOr(universe, t), tEnv);
      }
      if (tKind === 7) {
        t1 = A._isSubtype(universe, s, sEnv, type$.Null, tEnv);
        return t1 || A._isSubtype(universe, s, sEnv, t._primary, tEnv);
      }
      if (leftTypeVariable)
        return false;
      t1 = sKind !== 11;
      if ((!t1 || sKind === 12) && t === type$.Function)
        return true;
      if (tKind === 12) {
        if (s === type$.JavaScriptFunction)
          return true;
        if (sKind !== 12)
          return false;
        sBounds = s._rest;
        tBounds = t._rest;
        sLength = sBounds.length;
        if (sLength !== tBounds.length)
          return false;
        sEnv = sEnv == null ? sBounds : sBounds.concat(sEnv);
        tEnv = tEnv == null ? tBounds : tBounds.concat(tEnv);
        for (i = 0; i < sLength; ++i) {
          sBound = sBounds[i];
          tBound = tBounds[i];
          if (!A._isSubtype(universe, sBound, sEnv, tBound, tEnv) || !A._isSubtype(universe, tBound, tEnv, sBound, sEnv))
            return false;
        }
        return A._isFunctionSubtype(universe, s._primary, sEnv, t._primary, tEnv);
      }
      if (tKind === 11) {
        if (s === type$.JavaScriptFunction)
          return true;
        if (t1)
          return false;
        return A._isFunctionSubtype(universe, s, sEnv, t, tEnv);
      }
      if (sKind === 9) {
        if (tKind !== 9)
          return false;
        return A._isInterfaceSubtype(universe, s, sEnv, t, tEnv);
      }
      return false;
    },
    _isFunctionSubtype(universe, s, sEnv, t, tEnv) {
      var sParameters, tParameters, sRequiredPositional, tRequiredPositional, sRequiredPositionalLength, tRequiredPositionalLength, requiredPositionalDelta, sOptionalPositional, tOptionalPositional, sOptionalPositionalLength, tOptionalPositionalLength, i, t1, sNamed, tNamed, sNamedLength, tNamedLength, sIndex, tIndex, tName, sName, sIsRequired;
      if (!A._isSubtype(universe, s._primary, sEnv, t._primary, tEnv))
        return false;
      sParameters = s._rest;
      tParameters = t._rest;
      sRequiredPositional = sParameters._requiredPositional;
      tRequiredPositional = tParameters._requiredPositional;
      sRequiredPositionalLength = sRequiredPositional.length;
      tRequiredPositionalLength = tRequiredPositional.length;
      if (sRequiredPositionalLength > tRequiredPositionalLength)
        return false;
      requiredPositionalDelta = tRequiredPositionalLength - sRequiredPositionalLength;
      sOptionalPositional = sParameters._optionalPositional;
      tOptionalPositional = tParameters._optionalPositional;
      sOptionalPositionalLength = sOptionalPositional.length;
      tOptionalPositionalLength = tOptionalPositional.length;
      if (sRequiredPositionalLength + sOptionalPositionalLength < tRequiredPositionalLength + tOptionalPositionalLength)
        return false;
      for (i = 0; i < sRequiredPositionalLength; ++i) {
        t1 = sRequiredPositional[i];
        if (!A._isSubtype(universe, tRequiredPositional[i], tEnv, t1, sEnv))
          return false;
      }
      for (i = 0; i < requiredPositionalDelta; ++i) {
        t1 = sOptionalPositional[i];
        if (!A._isSubtype(universe, tRequiredPositional[sRequiredPositionalLength + i], tEnv, t1, sEnv))
          return false;
      }
      for (i = 0; i < tOptionalPositionalLength; ++i) {
        t1 = sOptionalPositional[requiredPositionalDelta + i];
        if (!A._isSubtype(universe, tOptionalPositional[i], tEnv, t1, sEnv))
          return false;
      }
      sNamed = sParameters._named;
      tNamed = tParameters._named;
      sNamedLength = sNamed.length;
      tNamedLength = tNamed.length;
      for (sIndex = 0, tIndex = 0; tIndex < tNamedLength; tIndex += 3) {
        tName = tNamed[tIndex];
        for (; true;) {
          if (sIndex >= sNamedLength)
            return false;
          sName = sNamed[sIndex];
          sIndex += 3;
          if (tName < sName)
            return false;
          sIsRequired = sNamed[sIndex - 2];
          if (sName < tName) {
            if (sIsRequired)
              return false;
            continue;
          }
          t1 = tNamed[tIndex + 1];
          if (sIsRequired && !t1)
            return false;
          t1 = sNamed[sIndex - 1];
          if (!A._isSubtype(universe, tNamed[tIndex + 2], tEnv, t1, sEnv))
            return false;
          break;
        }
      }
      for (; sIndex < sNamedLength;) {
        if (sNamed[sIndex + 1])
          return false;
        sIndex += 3;
      }
      return true;
    },
    _isInterfaceSubtype(universe, s, sEnv, t, tEnv) {
      var rule, recipes, $length, supertypeArgs, i, t1, t2,
        sName = s._primary,
        tName = t._primary;
      for (; sName !== tName;) {
        rule = universe.tR[sName];
        if (rule == null)
          return false;
        if (typeof rule == "string") {
          sName = rule;
          continue;
        }
        recipes = rule[tName];
        if (recipes == null)
          return false;
        $length = recipes.length;
        supertypeArgs = $length > 0 ? new Array($length) : init.typeUniverse.sEA;
        for (i = 0; i < $length; ++i)
          supertypeArgs[i] = A._Universe_evalInEnvironment(universe, s, recipes[i]);
        return A._areArgumentsSubtypes(universe, supertypeArgs, null, sEnv, t._rest, tEnv);
      }
      t1 = s._rest;
      t2 = t._rest;
      return A._areArgumentsSubtypes(universe, t1, null, sEnv, t2, tEnv);
    },
    _areArgumentsSubtypes(universe, sArgs, sVariances, sEnv, tArgs, tEnv) {
      var i, t1, t2,
        $length = sArgs.length;
      for (i = 0; i < $length; ++i) {
        t1 = sArgs[i];
        t2 = tArgs[i];
        if (!A._isSubtype(universe, t1, sEnv, t2, tEnv))
          return false;
      }
      return true;
    },
    isNullable(t) {
      var t1,
        kind = t._kind;
      if (!(t === type$.Null || t === type$.JSNull))
        if (!A.isStrongTopType(t))
          if (kind !== 7)
            if (!(kind === 6 && A.isNullable(t._primary)))
              t1 = kind === 8 && A.isNullable(t._primary);
            else
              t1 = true;
          else
            t1 = true;
        else
          t1 = true;
      else
        t1 = true;
      return t1;
    },
    isTopType(t) {
      var t1;
      if (!A.isStrongTopType(t))
        if (!(t === type$.legacy_Object))
          t1 = false;
        else
          t1 = true;
      else
        t1 = true;
      return t1;
    },
    isStrongTopType(t) {
      var kind = t._kind;
      return kind === 2 || kind === 3 || kind === 4 || kind === 5 || t === type$.nullable_Object;
    },
    _Utils_objectAssign(o, other) {
      var i, key,
        keys = Object.keys(other),
        $length = keys.length;
      for (i = 0; i < $length; ++i) {
        key = keys[i];
        o[key] = other[key];
      }
    },
    _Utils_newArrayOrEmpty($length) {
      return $length > 0 ? new Array($length) : init.typeUniverse.sEA;
    },
    Rti: function Rti(t0, t1) {
      var _ = this;
      _._as = t0;
      _._is = t1;
      _._cachedRuntimeType = _._specializedTestResource = _._precomputed1 = null;
      _._kind = 0;
      _._canonicalRecipe = _._bindCache = _._evalCache = _._rest = _._primary = null;
    },
    _FunctionParameters: function _FunctionParameters() {
      this._named = this._optionalPositional = this._requiredPositional = null;
    },
    _Error: function _Error() {
    },
    _TypeError: function _TypeError(t0) {
      this.__rti$_message = t0;
    },
    StreamTransformerBase: function StreamTransformerBase() {
    },
    LinkedHashMap_LinkedHashMap$_empty($K, $V) {
      return new A.JsLinkedHashMap($K._eval$1("@<0>")._bind$1($V)._eval$1("JsLinkedHashMap<1,2>"));
    },
    IterableBase_iterableToShortString(iterable, leftDelimiter, rightDelimiter) {
      var parts, t1;
      if (A._isToStringVisiting(iterable)) {
        if (leftDelimiter === "(" && rightDelimiter === ")")
          return "(...)";
        return leftDelimiter + "..." + rightDelimiter;
      }
      parts = A._setArrayType([], type$.JSArray_String);
      B.JSArray_methods.add$1($._toStringVisiting, iterable);
      try {
        A._iterablePartsToStrings(iterable, parts);
      } finally {
        if (0 >= $._toStringVisiting.length)
          return A.ioore($._toStringVisiting, -1);
        $._toStringVisiting.pop();
      }
      t1 = A.StringBuffer__writeAll(leftDelimiter, type$.Iterable_dynamic._as(parts), ", ") + rightDelimiter;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    IterableBase_iterableToFullString(iterable, leftDelimiter, rightDelimiter) {
      var buffer, t1;
      if (A._isToStringVisiting(iterable))
        return leftDelimiter + "..." + rightDelimiter;
      buffer = new A.StringBuffer(leftDelimiter);
      B.JSArray_methods.add$1($._toStringVisiting, iterable);
      try {
        t1 = buffer;
        t1._contents = A.StringBuffer__writeAll(t1._contents, iterable, ", ");
      } finally {
        if (0 >= $._toStringVisiting.length)
          return A.ioore($._toStringVisiting, -1);
        $._toStringVisiting.pop();
      }
      buffer._contents += rightDelimiter;
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _isToStringVisiting(o) {
      var t1, i;
      for (t1 = $._toStringVisiting.length, i = 0; i < t1; ++i)
        if (o === $._toStringVisiting[i])
          return true;
      return false;
    },
    _iterablePartsToStrings(iterable, parts) {
      var next, ultimateString, penultimateString, penultimate, ultimate, ultimate0, elision,
        it = iterable.get$iterator(iterable),
        $length = 0, count = 0;
      while (true) {
        if (!($length < 80 || count < 3))
          break;
        if (!it.moveNext$0())
          return;
        next = A.S(it.get$current());
        B.JSArray_methods.add$1(parts, next);
        $length += next.length + 2;
        ++count;
      }
      if (!it.moveNext$0()) {
        if (count <= 5)
          return;
        if (0 >= parts.length)
          return A.ioore(parts, -1);
        ultimateString = parts.pop();
        if (0 >= parts.length)
          return A.ioore(parts, -1);
        penultimateString = parts.pop();
      } else {
        penultimate = it.get$current();
        ++count;
        if (!it.moveNext$0()) {
          if (count <= 4) {
            B.JSArray_methods.add$1(parts, A.S(penultimate));
            return;
          }
          ultimateString = A.S(penultimate);
          if (0 >= parts.length)
            return A.ioore(parts, -1);
          penultimateString = parts.pop();
          $length += ultimateString.length + 2;
        } else {
          ultimate = it.get$current();
          ++count;
          for (; it.moveNext$0(); penultimate = ultimate, ultimate = ultimate0) {
            ultimate0 = it.get$current();
            ++count;
            if (count > 100) {
              while (true) {
                if (!($length > 75 && count > 3))
                  break;
                if (0 >= parts.length)
                  return A.ioore(parts, -1);
                $length -= parts.pop().length + 2;
                --count;
              }
              B.JSArray_methods.add$1(parts, "...");
              return;
            }
          }
          penultimateString = A.S(penultimate);
          ultimateString = A.S(ultimate);
          $length += ultimateString.length + penultimateString.length + 4;
        }
      }
      if (count > parts.length + 2) {
        $length += 5;
        elision = "...";
      } else
        elision = null;
      while (true) {
        if (!($length > 80 && parts.length > 3))
          break;
        if (0 >= parts.length)
          return A.ioore(parts, -1);
        $length -= parts.pop().length + 2;
        if (elision == null) {
          $length += 5;
          elision = "...";
        }
      }
      if (elision != null)
        B.JSArray_methods.add$1(parts, elision);
      B.JSArray_methods.add$1(parts, penultimateString);
      B.JSArray_methods.add$1(parts, ultimateString);
    },
    MapBase_mapToString(m) {
      var result, t1 = {};
      if (A._isToStringVisiting(m))
        return "{...}";
      result = new A.StringBuffer("");
      try {
        B.JSArray_methods.add$1($._toStringVisiting, m);
        result._contents += "{";
        t1.first = true;
        m.forEach$1(0, new A.MapBase_mapToString_closure(t1, result));
        result._contents += "}";
      } finally {
        if (0 >= $._toStringVisiting.length)
          return A.ioore($._toStringVisiting, -1);
        $._toStringVisiting.pop();
      }
      t1 = result._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    IterableBase: function IterableBase() {
    },
    ListMixin: function ListMixin() {
    },
    MapBase: function MapBase() {
    },
    MapBase_mapToString_closure: function MapBase_mapToString_closure(t0, t1) {
      this._box_0 = t0;
      this.result = t1;
    },
    MapMixin: function MapMixin() {
    },
    _UnmodifiableMapMixin: function _UnmodifiableMapMixin() {
    },
    MapView: function MapView() {
    },
    UnmodifiableMapView: function UnmodifiableMapView() {
    },
    _UnmodifiableMapView_MapView__UnmodifiableMapMixin: function _UnmodifiableMapView_MapView__UnmodifiableMapMixin() {
    },
    Utf8Decoder__convertIntercepted(allowMalformed, codeUnits, start, end) {
      var casted, result;
      if (codeUnits instanceof Uint8Array) {
        casted = codeUnits;
        end = casted.length;
        if (end - start < 15)
          return null;
        result = A.Utf8Decoder__convertInterceptedUint8List(allowMalformed, casted, start, end);
        if (result != null && allowMalformed)
          if (result.indexOf("\ufffd") >= 0)
            return null;
        return result;
      }
      return null;
    },
    Utf8Decoder__convertInterceptedUint8List(allowMalformed, codeUnits, start, end) {
      var decoder = allowMalformed ? $.$get$Utf8Decoder__decoderNonfatal() : $.$get$Utf8Decoder__decoder();
      if (decoder == null)
        return null;
      if (0 === start && end === codeUnits.length)
        return A.Utf8Decoder__useTextDecoder(decoder, codeUnits);
      return A.Utf8Decoder__useTextDecoder(decoder, codeUnits.subarray(start, A.RangeError_checkValidRange(start, end, codeUnits.length)));
    },
    Utf8Decoder__useTextDecoder(decoder, codeUnits) {
      var t1, exception;
      try {
        t1 = decoder.decode(codeUnits);
        return t1;
      } catch (exception) {
      }
      return null;
    },
    _Utf8Decoder_errorDescription(state) {
      switch (state) {
        case 65:
          return "Missing extension byte";
        case 67:
          return "Unexpected extension byte";
        case 69:
          return "Invalid UTF-8 byte";
        case 71:
          return "Overlong encoding";
        case 73:
          return "Out of unicode range";
        case 75:
          return "Encoded surrogate";
        case 77:
          return "Unfinished UTF-8 octet sequence";
        default:
          return "";
      }
    },
    _Utf8Decoder__makeUint8List(codeUnits, start, end) {
      var t1, i, t2, b,
        $length = end - start,
        bytes = new Uint8Array($length);
      for (t1 = codeUnits.length, i = 0; i < $length; ++i) {
        t2 = start + i;
        if (!(t2 < t1))
          return A.ioore(codeUnits, t2);
        b = codeUnits[t2];
        if ((b & 4294967040) >>> 0 !== 0)
          b = 255;
        if (!(i < $length))
          return A.ioore(bytes, i);
        bytes[i] = b;
      }
      return bytes;
    },
    Utf8Decoder__decoder_closure: function Utf8Decoder__decoder_closure() {
    },
    Utf8Decoder__decoderNonfatal_closure: function Utf8Decoder__decoderNonfatal_closure() {
    },
    Converter: function Converter() {
    },
    Utf8Decoder: function Utf8Decoder(t0) {
      this._allowMalformed = t0;
    },
    _Utf8Decoder: function _Utf8Decoder(t0) {
      this.allowMalformed = t0;
      this._state = 16;
      this._charOrIndex = 0;
    },
    Error__objectToString(object) {
      if (object instanceof A.Closure)
        return object.toString$0(0);
      return "Instance of '" + A.Primitives_objectTypeName(object) + "'";
    },
    List_List$filled($length, fill, growable, $E) {
      var i,
        result = J.JSArray_JSArray$fixed($length, $E);
      if ($length !== 0 && fill != null)
        for (i = 0; i < $length; ++i)
          result[i] = fill;
      return result;
    },
    List_List$from(elements, $E) {
      var t1,
        list = A._setArrayType([], $E._eval$1("JSArray<0>"));
      for (t1 = J.get$iterator$ax(elements); t1.moveNext$0();)
        B.JSArray_methods.add$1(list, $E._as(t1.get$current()));
      return list;
    },
    List_List$of(elements, growable, $E) {
      var t1 = A.List_List$_of(elements, $E);
      return t1;
    },
    List_List$_of(elements, $E) {
      var list, t1;
      if (Array.isArray(elements))
        return A._setArrayType(elements.slice(0), $E._eval$1("JSArray<0>"));
      list = A._setArrayType([], $E._eval$1("JSArray<0>"));
      for (t1 = J.get$iterator$ax(elements); t1.moveNext$0();)
        B.JSArray_methods.add$1(list, t1.get$current());
      return list;
    },
    String_String$fromCharCodes(charCodes, start, end) {
      var array, len;
      if (Array.isArray(charCodes)) {
        array = charCodes;
        len = array.length;
        end = A.RangeError_checkValidRange(start, end, len);
        return A.Primitives_stringFromCharCodes(start > 0 || end < len ? array.slice(start, end) : array);
      }
      if (type$.NativeUint8List._is(charCodes))
        return A.Primitives_stringFromNativeUint8List(charCodes, start, A.RangeError_checkValidRange(start, end, charCodes.length));
      return A.String__stringFromIterable(charCodes, start, end);
    },
    String__stringFromIterable(charCodes, start, end) {
      var t1, it, i, list, _null = null;
      if (start < 0)
        throw A.wrapException(A.RangeError$range(start, 0, charCodes.length, _null, _null));
      t1 = end == null;
      if (!t1 && end < start)
        throw A.wrapException(A.RangeError$range(end, start, charCodes.length, _null, _null));
      it = J.get$iterator$ax(charCodes);
      for (i = 0; i < start; ++i)
        if (!it.moveNext$0())
          throw A.wrapException(A.RangeError$range(start, 0, i, _null, _null));
      list = [];
      if (t1)
        for (; it.moveNext$0();)
          list.push(it.get$current());
      else
        for (i = start; i < end; ++i) {
          if (!it.moveNext$0())
            throw A.wrapException(A.RangeError$range(end, start, i, _null, _null));
          list.push(it.get$current());
        }
      return A.Primitives_stringFromCharCodes(list);
    },
    StringBuffer__writeAll(string, objects, separator) {
      var iterator = J.get$iterator$ax(objects);
      if (!iterator.moveNext$0())
        return string;
      if (separator.length === 0) {
        do
          string += A.S(iterator.get$current());
        while (iterator.moveNext$0());
      } else {
        string += A.S(iterator.get$current());
        for (; iterator.moveNext$0();)
          string = string + separator + A.S(iterator.get$current());
      }
      return string;
    },
    NoSuchMethodError$(receiver, memberName, positionalArguments, namedArguments) {
      return new A.NoSuchMethodError(receiver, memberName, positionalArguments, namedArguments);
    },
    Error_safeToString(object) {
      if (typeof object == "number" || A._isBool(object) || object == null)
        return J.toString$0$(object);
      if (typeof object == "string")
        return JSON.stringify(object);
      return A.Error__objectToString(object);
    },
    AssertionError$(message) {
      return new A.AssertionError(message);
    },
    ArgumentError$(message) {
      return new A.ArgumentError(false, null, null, message);
    },
    RangeError$range(invalidValue, minValue, maxValue, $name, message) {
      return new A.RangeError(minValue, maxValue, true, invalidValue, $name, "Invalid value");
    },
    RangeError_checkValidRange(start, end, $length) {
      if (0 > start || start > $length)
        throw A.wrapException(A.RangeError$range(start, 0, $length, "start", null));
      if (end != null) {
        if (start > end || end > $length)
          throw A.wrapException(A.RangeError$range(end, start, $length, "end", null));
        return end;
      }
      return $length;
    },
    RangeError_checkNotNegative(value, $name) {
      if (value < 0)
        throw A.wrapException(A.RangeError$range(value, 0, null, $name, null));
      return value;
    },
    IndexError$(invalidValue, indexable, $name, message, $length) {
      var t1 = $length == null ? J.get$length$asx(indexable) : $length;
      return new A.IndexError(t1, true, invalidValue, $name, "Index out of range");
    },
    UnsupportedError$(message) {
      return new A.UnsupportedError(message);
    },
    UnimplementedError$(message) {
      return new A.UnimplementedError(message);
    },
    StateError$(message) {
      return new A.StateError(message);
    },
    ConcurrentModificationError$(modifiedObject) {
      return new A.ConcurrentModificationError(modifiedObject);
    },
    FormatException$(message, source, offset) {
      return new A.FormatException(message, source, offset);
    },
    NoSuchMethodError_toString_closure: function NoSuchMethodError_toString_closure(t0, t1) {
      this._box_0 = t0;
      this.sb = t1;
    },
    Error: function Error() {
    },
    AssertionError: function AssertionError(t0) {
      this.message = t0;
    },
    NullThrownError: function NullThrownError() {
    },
    ArgumentError: function ArgumentError(t0, t1, t2, t3) {
      var _ = this;
      _._hasValue = t0;
      _.invalidValue = t1;
      _.name = t2;
      _.message = t3;
    },
    RangeError: function RangeError(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.start = t0;
      _.end = t1;
      _._hasValue = t2;
      _.invalidValue = t3;
      _.name = t4;
      _.message = t5;
    },
    IndexError: function IndexError(t0, t1, t2, t3, t4) {
      var _ = this;
      _.length = t0;
      _._hasValue = t1;
      _.invalidValue = t2;
      _.name = t3;
      _.message = t4;
    },
    NoSuchMethodError: function NoSuchMethodError(t0, t1, t2, t3) {
      var _ = this;
      _._core$_receiver = t0;
      _._core$_memberName = t1;
      _._core$_arguments = t2;
      _._namedArguments = t3;
    },
    UnsupportedError: function UnsupportedError(t0) {
      this.message = t0;
    },
    UnimplementedError: function UnimplementedError(t0) {
      this.message = t0;
    },
    StateError: function StateError(t0) {
      this.message = t0;
    },
    ConcurrentModificationError: function ConcurrentModificationError(t0) {
      this.modifiedObject = t0;
    },
    OutOfMemoryError: function OutOfMemoryError() {
    },
    CyclicInitializationError: function CyclicInitializationError(t0) {
      this.variableName = t0;
    },
    FormatException: function FormatException(t0, t1, t2) {
      this.message = t0;
      this.source = t1;
      this.offset = t2;
    },
    Iterable: function Iterable() {
    },
    Null: function Null() {
    },
    Object: function Object() {
    },
    StringBuffer: function StringBuffer(t0) {
      this._contents = t0;
    },
    DomException: function DomException() {
    },
    Endian: function Endian() {
    },
    Archive: function Archive(t0, t1) {
      this.files = t0;
      this._fileMap = t1;
    },
    ArchiveFile: function ArchiveFile(t0, t1, t2, t3) {
      var _ = this;
      _.name = t0;
      _.size = t1;
      _.mode = 420;
      _.lastModTime = t2;
      _._compressionType = t3;
      _._content = _._rawContent = null;
    },
    FileContent: function FileContent() {
    },
    AesDecrypt: function AesDecrypt(t0, t1, t2, t3, t4) {
      var _ = this;
      _.mode = t0;
      _.key = t1;
      _._roundKey = t2;
      _._iv = t3;
      _._aes_decrypt$_buffer = t4;
    },
    ArchiveException$(message) {
      return new A.ArchiveException(message, null, null);
    },
    ArchiveException: function ArchiveException(t0, t1, t2) {
      this.message = t0;
      this.source = t1;
      this.offset = t2;
    },
    InputStream$(data, byteOrder, $length, start) {
      var t1, t2;
      if (type$.TypedData._is(data))
        t1 = A.NativeUint8List_NativeUint8List$view(data.buffer, data.byteOffset, data.byteLength);
      else
        t1 = type$.List_int._is(data) ? data : A.List_List$from(type$.Iterable_dynamic._as(data), type$.int);
      t2 = new A.InputStream(t1, start, start, byteOrder, $);
      t2.__InputStream__length_A = $length == null ? t1.length : $length;
      return t2;
    },
    InputStreamBase: function InputStreamBase() {
    },
    InputStream: function InputStream(t0, t1, t2, t3, t4) {
      var _ = this;
      _.buffer = t0;
      _.offset = t1;
      _.start = t2;
      _.byteOrder = t3;
      _.__InputStream__length_A = t4;
    },
    OutputStream$(size) {
      var t1 = size == null ? 32768 : size;
      return new A.OutputStream(new Uint8Array(t1));
    },
    OutputStreamBase: function OutputStreamBase() {
    },
    OutputStream: function OutputStream(t0) {
      this.length = 0;
      this._buffer = t0;
    },
    ZipDirectory: function ZipDirectory(t0) {
      var _ = this;
      _.filePosition = -1;
      _.__ZipDirectory_centralDirectoryOffset_A = _.__ZipDirectory_centralDirectorySize_A = $;
      _.fileHeaders = t0;
    },
    ZipFile__deriveKey(password, salt) {
      var passwordBytes, t1, t2, t3, keyDerivator, out;
      if (password.get$isEmpty(password))
        return new Uint8Array(0);
      passwordBytes = new Uint8Array(A._ensureNativeList(password.get$codeUnits(password)));
      t1 = A.Register64$(0);
      t2 = new Uint8Array(4);
      t3 = type$.int;
      t3 = new A.SHA256Digest(t1, t2, B.C_Endian, 8, A.List_List$filled(8, 0, false, t3), A.List_List$filled(64, 0, false, t3));
      t3.reset$0();
      t3 = new A.HMac(t3, 64);
      t3.__HMac__digestSize_A = 32;
      t3.__HMac__inputPad_A = new Uint8Array(64);
      t3.__HMac__outputBuf_A = new Uint8Array(96);
      keyDerivator = new A.PBKDF2KeyDerivator(t3);
      keyDerivator.__PBKDF2KeyDerivator__state_A = new Uint8Array(32);
      keyDerivator.__PBKDF2KeyDerivator__params_A = new A.Pbkdf2Parameters(salt, 1000, 32);
      out = new Uint8Array(32);
      return B.NativeUint8List_methods.sublist$2(out, 0, keyDerivator.deriveKey$4(passwordBytes, 0, out, 0));
    },
    AesHeader: function AesHeader(t0, t1) {
      this.encryptionStrength = t0;
      this.compressionMethod = t1;
    },
    ZipFile: function ZipFile(t0, t1, t2) {
      var _ = this;
      _.signature = 67324752;
      _.lastModFileDate = _.lastModFileTime = _.compressionMethod = _.flags = 0;
      _.uncompressedSize = _.crc32 = null;
      _.filename = "";
      _.extraField = t0;
      _.header = t1;
      _.__ZipFile__rawContent_A = $;
      _._zip_file$_content = null;
      _._encryptionType = 0;
      _._password = _._aesHeader = null;
      _._keys = t2;
    },
    ZipFileHeader: function ZipFileHeader(t0) {
      var _ = this;
      _.versionMadeBy = 0;
      _.localHeaderOffset = _.externalFileAttributes = _.diskNumberStart = _.uncompressedSize = _.compressedSize = null;
      _.filename = "";
      _.extraField = t0;
      _.file = null;
    },
    ZipDecoder: function ZipDecoder() {
      this.__ZipDecoder_directory_A = $;
    },
    HuffmanTable$(lengths) {
      var t1 = new A.HuffmanTable();
      t1.HuffmanTable$1(lengths);
      return t1;
    },
    HuffmanTable: function HuffmanTable() {
      this.__HuffmanTable_table_A = $;
      this.maxCodeLength = 0;
      this.minCodeLength = 2147483647;
    },
    Inflate: function Inflate(t0, t1, t2, t3) {
      var _ = this;
      _.__Inflate_input_A = t0;
      _.inputSet = false;
      _.output = t1;
      _._bitBufferLen = _._bitBuffer = 0;
      _._fixedLiteralLengthTable = t2;
      _._fixedDistanceTable = t3;
    },
    CipherParameters: function CipherParameters() {
    },
    SHA256Digest: function SHA256Digest(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._byteCount = t0;
      _._wordBuffer = t1;
      _.__MD4FamilyDigest__wordBufferOffset_A = $;
      _._endian = t2;
      _._packedStateSize = t3;
      _.state = t4;
      _.buffer = t5;
      _.__MD4FamilyDigest_bufferOffset_A = $;
    },
    Pbkdf2Parameters: function Pbkdf2Parameters(t0, t1, t2) {
      this.salt = t0;
      this.iterationCount = t1;
      this.desiredKeyLength = t2;
    },
    PBKDF2KeyDerivator: function PBKDF2KeyDerivator(t0) {
      this.__PBKDF2KeyDerivator__params_A = $;
      this._mac = t0;
      this.__PBKDF2KeyDerivator__state_A = $;
    },
    HMac: function HMac(t0, t1) {
      var _ = this;
      _._digest = t0;
      _.__HMac__digestSize_A = $;
      _.__HMac__blockLength_A = t1;
      _.__HMac__outputBuf_A = _.__HMac__inputPad_A = $;
    },
    BaseDigest: function BaseDigest() {
    },
    BaseKeyDerivator: function BaseKeyDerivator() {
    },
    BaseMac: function BaseMac() {
    },
    MD4FamilyDigest: function MD4FamilyDigest() {
    },
    shiftl32(x, n) {
      n &= 31;
      return (x & $._MASK32_HI_BITS[n]) << n >>> 0;
    },
    Register64$(hiOrLo32OrY) {
      var t1 = new A.Register64();
      t1.$set$2(hiOrLo32OrY, null);
      return t1;
    },
    Register64: function Register64() {
      this.__Register64__lo32_A = this.__Register64__hi32_A = $;
    },
    throwLateFieldNI(fieldName) {
      return A.throwExpression(A.LateError$fieldNI(fieldName));
    },
    throwLateFieldADI(fieldName) {
      return A.throwExpression(new A.LateError("Field '" + fieldName + "' has been assigned during initialization."));
    },
    _convertDartFunctionFast(f) {
      var ret,
        existing = f.$dart_jsFunction;
      if (existing != null)
        return existing;
      ret = function(_call, f) {
        return function() {
          return _call(f, Array.prototype.slice.apply(arguments));
        };
      }(A._callDartFunctionFast, f);
      ret[$.$get$DART_CLOSURE_PROPERTY_NAME()] = f;
      f.$dart_jsFunction = ret;
      return ret;
    },
    _callDartFunctionFast(callback, $arguments) {
      type$.List_dynamic._as($arguments);
      type$.Function._as(callback);
      return A.Primitives_applyFunction(callback, $arguments, null);
    },
    allowInterop(f, $F) {
      if (typeof f == "function")
        return f;
      else
        return $F._as(A._convertDartFunctionFast(f));
    },
    CRC32(crc, b) {
      return (B.List_B8J[(crc ^ b) & 255] ^ crc >>> 8) >>> 0;
    },
    main() {
      A.allowInterop(A.web_dictant_file_decoder_worker__decodeZip$closure(), type$.Map_dynamic_dynamic_Function_nullable_Uint8List);
    },
    decodeZip(bytes) {
      var t1, t2, filesInZip, t3, t4, t5, t6;
      type$.nullable_Uint8List._as(bytes);
      t1 = bytes == null ? type$.List_int._as(bytes) : bytes;
      t2 = type$.Uint8List;
      filesInZip = {};
      let unzipped = new A.ZipDecoder().decodeBuffer$3$password$verify(A.InputStream$(type$.List_int._as(t1), 0, null, 0), null, false).files;
      console.log(unzipped.length);
      for (let file of unzipped) {
          let x = file.decompress$0();
          filesInZip[file.name] = new Uint8Array(file._rawContent);
      }
      return JSON.stringify(filesInZip);
    }
  },
  J = {
    makeDispatchRecord(interceptor, proto, extension, indexability) {
      return {i: interceptor, p: proto, e: extension, x: indexability};
    },
    getNativeInterceptor(object) {
      var proto, objectProto, $constructor, interceptor, t1,
        record = object[init.dispatchPropertyName];
      if (record == null)
        if ($.initNativeDispatchFlag == null) {
          A.initNativeDispatch();
          record = object[init.dispatchPropertyName];
        }
      if (record != null) {
        proto = record.p;
        if (false === proto)
          return record.i;
        if (true === proto)
          return object;
        objectProto = Object.getPrototypeOf(object);
        if (proto === objectProto)
          return record.i;
        if (record.e === objectProto)
          throw A.wrapException(A.UnimplementedError$("Return interceptor for " + A.S(proto(object, record))));
      }
      $constructor = object.constructor;
      if ($constructor == null)
        interceptor = null;
      else {
        t1 = $._JS_INTEROP_INTERCEPTOR_TAG;
        if (t1 == null)
          t1 = $._JS_INTEROP_INTERCEPTOR_TAG = init.getIsolateTag("_$dart_js");
        interceptor = $constructor[t1];
      }
      if (interceptor != null)
        return interceptor;
      interceptor = A.lookupAndCacheInterceptor(object);
      if (interceptor != null)
        return interceptor;
      if (typeof object == "function")
        return B.JavaScriptFunction_methods;
      proto = Object.getPrototypeOf(object);
      if (proto == null)
        return B.PlainJavaScriptObject_methods;
      if (proto === Object.prototype)
        return B.PlainJavaScriptObject_methods;
      if (typeof $constructor == "function") {
        t1 = $._JS_INTEROP_INTERCEPTOR_TAG;
        if (t1 == null)
          t1 = $._JS_INTEROP_INTERCEPTOR_TAG = init.getIsolateTag("_$dart_js");
        Object.defineProperty($constructor, t1, {value: B.UnknownJavaScriptObject_methods, enumerable: false, writable: true, configurable: true});
        return B.UnknownJavaScriptObject_methods;
      }
      return B.UnknownJavaScriptObject_methods;
    },
    JSArray_JSArray$fixed($length, $E) {
      if ($length < 0 || $length > 4294967295)
        throw A.wrapException(A.RangeError$range($length, 0, 4294967295, "length", null));
      return J.JSArray_JSArray$markFixed(new Array($length), $E);
    },
    JSArray_JSArray$markFixed(allocation, $E) {
      return J.JSArray_markFixedList(A._setArrayType(allocation, $E._eval$1("JSArray<0>")), $E);
    },
    JSArray_markFixedList(list, $T) {
      list.fixed$length = Array;
      return list;
    },
    getInterceptor$(receiver) {
      if (typeof receiver == "number") {
        if (Math.floor(receiver) == receiver)
          return J.JSInt.prototype;
        return J.JSNumNotInt.prototype;
      }
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return J.JSNull.prototype;
      if (typeof receiver == "boolean")
        return J.JSBool.prototype;
      if (receiver.constructor == Array)
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof A.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$asx(receiver) {
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (receiver.constructor == Array)
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof A.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$ax(receiver) {
      if (receiver == null)
        return receiver;
      if (receiver.constructor == Array)
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof A.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$x(receiver) {
      if (receiver == null)
        return receiver;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof A.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    get$hashCode$(receiver) {
      return J.getInterceptor$(receiver).get$hashCode(receiver);
    },
    get$iterator$ax(receiver) {
      return J.getInterceptor$ax(receiver).get$iterator(receiver);
    },
    get$length$asx(receiver) {
      return J.getInterceptor$asx(receiver).get$length(receiver);
    },
    $eq$(receiver, a0) {
      if (receiver == null)
        return a0 == null;
      if (typeof receiver != "object")
        return a0 != null && receiver === a0;
      return J.getInterceptor$(receiver).$eq(receiver, a0);
    },
    _getUint32$2$x(receiver, a0, a1) {
      return J.getInterceptor$x(receiver)._getUint32$2(receiver, a0, a1);
    },
    elementAt$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).elementAt$1(receiver, a0);
    },
    noSuchMethod$1$(receiver, a0) {
      return J.getInterceptor$(receiver).noSuchMethod$1(receiver, a0);
    },
    skip$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).skip$1(receiver, a0);
    },
    sublist$2$ax(receiver, a0, a1) {
      return J.getInterceptor$ax(receiver).sublist$2(receiver, a0, a1);
    },
    toString$0$(receiver) {
      return J.getInterceptor$(receiver).toString$0(receiver);
    },
    Interceptor: function Interceptor() {
    },
    JSBool: function JSBool() {
    },
    JSNull: function JSNull() {
    },
    JavaScriptObject: function JavaScriptObject() {
    },
    LegacyJavaScriptObject: function LegacyJavaScriptObject() {
    },
    PlainJavaScriptObject: function PlainJavaScriptObject() {
    },
    UnknownJavaScriptObject: function UnknownJavaScriptObject() {
    },
    JavaScriptFunction: function JavaScriptFunction() {
    },
    JSArray: function JSArray(t0) {
      this.$ti = t0;
    },
    JSUnmodifiableArray: function JSUnmodifiableArray(t0) {
      this.$ti = t0;
    },
    ArrayIterator: function ArrayIterator(t0, t1, t2) {
      var _ = this;
      _._iterable = t0;
      _._length = t1;
      _._index = 0;
      _._current = null;
      _.$ti = t2;
    },
    JSNumber: function JSNumber() {
    },
    JSInt: function JSInt() {
    },
    JSNumNotInt: function JSNumNotInt() {
    },
    JSString: function JSString() {
    }
  },
  B = {};
  var holders = [A, J, B];
  var $ = {};
  A.JS_CONST.prototype = {};
  J.Interceptor.prototype = {
    $eq(receiver, other) {
      return receiver === other;
    },
    get$hashCode(receiver) {
      return A.Primitives_objectHashCode(receiver);
    },
    toString$0(receiver) {
      return "Instance of '" + A.Primitives_objectTypeName(receiver) + "'";
    },
    noSuchMethod$1(receiver, invocation) {
      type$.Invocation._as(invocation);
      throw A.wrapException(A.NoSuchMethodError$(receiver, invocation.get$memberName(), invocation.get$positionalArguments(), invocation.get$namedArguments()));
    }
  };
  J.JSBool.prototype = {
    toString$0(receiver) {
      return String(receiver);
    },
    get$hashCode(receiver) {
      return receiver ? 519018 : 218159;
    },
    $isbool: 1
  };
  J.JSNull.prototype = {
    $eq(receiver, other) {
      return null == other;
    },
    toString$0(receiver) {
      return "null";
    },
    get$hashCode(receiver) {
      return 0;
    }
  };
  J.JavaScriptObject.prototype = {};
  J.LegacyJavaScriptObject.prototype = {
    get$hashCode(receiver) {
      return 0;
    },
    toString$0(receiver) {
      return String(receiver);
    }
  };
  J.PlainJavaScriptObject.prototype = {};
  J.UnknownJavaScriptObject.prototype = {};
  J.JavaScriptFunction.prototype = {
    toString$0(receiver) {
      var dartClosure = receiver[$.$get$DART_CLOSURE_PROPERTY_NAME()];
      if (dartClosure == null)
        return this.super$LegacyJavaScriptObject$toString(receiver);
      return "JavaScript function for " + A.S(J.toString$0$(dartClosure));
    },
    $isFunction: 1
  };
  J.JSArray.prototype = {
    add$1(receiver, value) {
      A._arrayInstanceType(receiver)._precomputed1._as(value);
      if (!!receiver.fixed$length)
        A.throwExpression(A.UnsupportedError$("add"));
      receiver.push(value);
    },
    addAll$1(receiver, collection) {
      A._arrayInstanceType(receiver)._eval$1("Iterable<1>")._as(collection);
      if (!!receiver.fixed$length)
        A.throwExpression(A.UnsupportedError$("addAll"));
      this._addAllFromArray$1(receiver, collection);
      return;
    },
    _addAllFromArray$1(receiver, array) {
      var len, i;
      type$.JSArray_dynamic._as(array);
      len = array.length;
      if (len === 0)
        return;
      if (receiver === array)
        throw A.wrapException(A.ConcurrentModificationError$(receiver));
      for (i = 0; i < len; ++i)
        receiver.push(array[i]);
    },
    skip$1(receiver, n) {
      return A.SubListIterable$(receiver, n, null, A._arrayInstanceType(receiver)._precomputed1);
    },
    elementAt$1(receiver, index) {
      if (!(index >= 0 && index < receiver.length))
        return A.ioore(receiver, index);
      return receiver[index];
    },
    sublist$2(receiver, start, end) {
      if (start < 0 || start > receiver.length)
        throw A.wrapException(A.RangeError$range(start, 0, receiver.length, "start", null));
      if (end < start || end > receiver.length)
        throw A.wrapException(A.RangeError$range(end, start, receiver.length, "end", null));
      if (start === end)
        return A._setArrayType([], A._arrayInstanceType(receiver));
      return A._setArrayType(receiver.slice(start, end), A._arrayInstanceType(receiver));
    },
    fillRange$3(receiver, start, end, fillValue) {
      var i;
      A._arrayInstanceType(receiver)._eval$1("1?")._as(fillValue);
      if (!!receiver.immutable$list)
        A.throwExpression(A.UnsupportedError$("fill range"));
      A.RangeError_checkValidRange(start, end, receiver.length);
      for (i = start; i < end; ++i)
        receiver[i] = fillValue;
    },
    toString$0(receiver) {
      return A.IterableBase_iterableToFullString(receiver, "[", "]");
    },
    get$iterator(receiver) {
      return new J.ArrayIterator(receiver, receiver.length, A._arrayInstanceType(receiver)._eval$1("ArrayIterator<1>"));
    },
    get$hashCode(receiver) {
      return A.Primitives_objectHashCode(receiver);
    },
    get$length(receiver) {
      return receiver.length;
    },
    $indexSet(receiver, index, value) {
      A._arrayInstanceType(receiver)._precomputed1._as(value);
      if (!!receiver.immutable$list)
        A.throwExpression(A.UnsupportedError$("indexed set"));
      if (!(index >= 0 && index < receiver.length))
        throw A.wrapException(A.diagnoseIndexError(receiver, index));
      receiver[index] = value;
    },
    $isIterable: 1,
    $isList: 1
  };
  J.JSUnmodifiableArray.prototype = {};
  J.ArrayIterator.prototype = {
    get$current() {
      var t1 = this._current;
      return t1 == null ? this.$ti._precomputed1._as(t1) : t1;
    },
    moveNext$0() {
      var t2, _this = this,
        t1 = _this._iterable,
        $length = t1.length;
      if (_this._length !== $length)
        throw A.wrapException(A.throwConcurrentModificationError(t1));
      t2 = _this._index;
      if (t2 >= $length) {
        _this.set$_current(null);
        return false;
      }
      _this.set$_current(t1[t2]);
      ++_this._index;
      return true;
    },
    set$_current(_current) {
      this._current = this.$ti._eval$1("1?")._as(_current);
    }
  };
  J.JSNumber.prototype = {
    toRadixString$1(receiver, radix) {
      var result, match, t1, exponent;
      if (radix < 2 || radix > 36)
        throw A.wrapException(A.RangeError$range(radix, 2, 36, "radix", null));
      result = receiver.toString(radix);
      if (B.JSString_methods.codeUnitAt$1(result, result.length - 1) !== 41)
        return result;
      match = /^([\da-z]+)(?:\.([\da-z]+))?\(e\+(\d+)\)$/.exec(result);
      if (match == null)
        A.throwExpression(A.UnsupportedError$("Unexpected toString result: " + result));
      t1 = match.length;
      if (1 >= t1)
        return A.ioore(match, 1);
      result = match[1];
      if (3 >= t1)
        return A.ioore(match, 3);
      exponent = +match[3];
      t1 = match[2];
      if (t1 != null) {
        result += t1;
        exponent -= t1.length;
      }
      return result + B.JSString_methods.$mul("0", exponent);
    },
    toString$0(receiver) {
      if (receiver === 0 && 1 / receiver < 0)
        return "-0.0";
      else
        return "" + receiver;
    },
    get$hashCode(receiver) {
      var absolute, floorLog2, factor, scaled,
        intValue = receiver | 0;
      if (receiver === intValue)
        return intValue & 536870911;
      absolute = Math.abs(receiver);
      floorLog2 = Math.log(absolute) / 0.6931471805599453 | 0;
      factor = Math.pow(2, floorLog2);
      scaled = absolute < 1 ? absolute / factor : factor / absolute;
      return ((scaled * 9007199254740992 | 0) + (scaled * 3542243181176521 | 0)) * 599197 + floorLog2 * 1259 & 536870911;
    },
    $mod(receiver, other) {
      var result = receiver % other;
      if (result === 0)
        return 0;
      if (result > 0)
        return result;
      return result + other;
    },
    $tdiv(receiver, other) {
      if ((receiver | 0) === receiver)
        if (other >= 1 || false)
          return receiver / other | 0;
      return this._tdivSlow$1(receiver, other);
    },
    _tdivFast$1(receiver, other) {
      return (receiver | 0) === receiver ? receiver / other | 0 : this._tdivSlow$1(receiver, other);
    },
    _tdivSlow$1(receiver, other) {
      var quotient = receiver / other;
      if (quotient >= -2147483648 && quotient <= 2147483647)
        return quotient | 0;
      if (quotient > 0) {
        if (quotient !== 1 / 0)
          return Math.floor(quotient);
      } else if (quotient > -1 / 0)
        return Math.ceil(quotient);
      throw A.wrapException(A.UnsupportedError$("Result of truncating division is " + A.S(quotient) + ": " + A.S(receiver) + " ~/ " + other));
    },
    $shl(receiver, other) {
      if (other < 0)
        throw A.wrapException(A.argumentErrorValue(other));
      return other > 31 ? 0 : receiver << other >>> 0;
    },
    _shlPositive$1(receiver, other) {
      return other > 31 ? 0 : receiver << other >>> 0;
    },
    _shrOtherPositive$1(receiver, other) {
      var t1;
      if (receiver > 0)
        t1 = this._shrBothPositive$1(receiver, other);
      else {
        t1 = other > 31 ? 31 : other;
        t1 = receiver >> t1 >>> 0;
      }
      return t1;
    },
    _shrBothPositive$1(receiver, other) {
      return other > 31 ? 0 : receiver >>> other;
    },
    $isnum: 1
  };
  J.JSInt.prototype = {$isint: 1};
  J.JSNumNotInt.prototype = {};
  J.JSString.prototype = {
    codeUnitAt$1(receiver, index) {
      if (index < 0)
        throw A.wrapException(A.diagnoseIndexError(receiver, index));
      if (index >= receiver.length)
        A.throwExpression(A.diagnoseIndexError(receiver, index));
      return receiver.charCodeAt(index);
    },
    _codeUnitAt$1(receiver, index) {
      if (index >= receiver.length)
        throw A.wrapException(A.diagnoseIndexError(receiver, index));
      return receiver.charCodeAt(index);
    },
    $add(receiver, other) {
      return receiver + other;
    },
    endsWith$1(receiver, other) {
      var otherLength = other.length,
        t1 = receiver.length;
      if (otherLength > t1)
        return false;
      return other === this.substring$1(receiver, t1 - otherLength);
    },
    substring$2(receiver, start, end) {
      return receiver.substring(start, A.RangeError_checkValidRange(start, end, receiver.length));
    },
    substring$1($receiver, start) {
      return this.substring$2($receiver, start, null);
    },
    $mul(receiver, times) {
      var s, result;
      if (0 >= times)
        return "";
      if (times === 1 || receiver.length === 0)
        return receiver;
      if (times !== times >>> 0)
        throw A.wrapException(B.C_OutOfMemoryError);
      for (s = receiver, result = ""; true;) {
        if ((times & 1) === 1)
          result = s + result;
        times = times >>> 1;
        if (times === 0)
          break;
        s += s;
      }
      return result;
    },
    toString$0(receiver) {
      return receiver;
    },
    get$hashCode(receiver) {
      var t1, hash, i;
      for (t1 = receiver.length, hash = 0, i = 0; i < t1; ++i) {
        hash = hash + receiver.charCodeAt(i) & 536870911;
        hash = hash + ((hash & 524287) << 10) & 536870911;
        hash ^= hash >> 6;
      }
      hash = hash + ((hash & 67108863) << 3) & 536870911;
      hash ^= hash >> 11;
      return hash + ((hash & 16383) << 15) & 536870911;
    },
    get$length(receiver) {
      return receiver.length;
    },
    $isPattern: 1,
    $isString: 1
  };
  A.LateError.prototype = {
    toString$0(_) {
      return "LateInitializationError: " + this._message;
    }
  };
  A.EfficientLengthIterable.prototype = {};
  A.ListIterable.prototype = {
    get$iterator(_) {
      var _this = this;
      return new A.ListIterator(_this, _this.get$length(_this), _this.$ti._eval$1("ListIterator<1>"));
    }
  };
  A.SubListIterable.prototype = {
    get$_endIndex() {
      var $length = J.get$length$asx(this.__internal$_iterable),
        endOrLength = this._endOrLength;
      if (endOrLength == null || endOrLength > $length)
        return $length;
      return endOrLength;
    },
    get$_startIndex() {
      var $length = J.get$length$asx(this.__internal$_iterable),
        t1 = this._start;
      if (t1 > $length)
        return $length;
      return t1;
    },
    get$length(_) {
      var endOrLength,
        $length = J.get$length$asx(this.__internal$_iterable),
        t1 = this._start;
      if (t1 >= $length)
        return 0;
      endOrLength = this._endOrLength;
      if (endOrLength == null || endOrLength >= $length)
        return $length - t1;
      if (typeof endOrLength !== "number")
        return endOrLength.$sub();
      return endOrLength - t1;
    },
    elementAt$1(_, index) {
      var _this = this,
        realIndex = _this.get$_startIndex() + index;
      if (index < 0 || realIndex >= _this.get$_endIndex())
        throw A.wrapException(A.IndexError$(index, _this, "index", null, null));
      return J.elementAt$1$ax(_this.__internal$_iterable, realIndex);
    },
    toList$1$growable(_, growable) {
      var $length, result, i, _this = this,
        start = _this._start,
        t1 = _this.__internal$_iterable,
        t2 = J.getInterceptor$asx(t1),
        end = t2.get$length(t1),
        endOrLength = _this._endOrLength;
      if (endOrLength != null && endOrLength < end)
        end = endOrLength;
      $length = end - start;
      if ($length <= 0) {
        t1 = J.JSArray_JSArray$fixed(0, _this.$ti._precomputed1);
        return t1;
      }
      result = A.List_List$filled($length, t2.elementAt$1(t1, start), false, _this.$ti._precomputed1);
      for (i = 1; i < $length; ++i) {
        B.JSArray_methods.$indexSet(result, i, t2.elementAt$1(t1, start + i));
        if (t2.get$length(t1) < end)
          throw A.wrapException(A.ConcurrentModificationError$(_this));
      }
      return result;
    }
  };
  A.ListIterator.prototype = {
    get$current() {
      var t1 = this.__internal$_current;
      return t1 == null ? this.$ti._precomputed1._as(t1) : t1;
    },
    moveNext$0() {
      var t3, _this = this,
        t1 = _this.__internal$_iterable,
        t2 = J.getInterceptor$asx(t1),
        $length = t2.get$length(t1);
      if (_this.__internal$_length !== $length)
        throw A.wrapException(A.ConcurrentModificationError$(t1));
      t3 = _this.__internal$_index;
      if (t3 >= $length) {
        _this.set$__internal$_current(null);
        return false;
      }
      _this.set$__internal$_current(t2.elementAt$1(t1, t3));
      ++_this.__internal$_index;
      return true;
    },
    set$__internal$_current(_current) {
      this.__internal$_current = this.$ti._eval$1("1?")._as(_current);
    }
  };
  A.FixedLengthListMixin.prototype = {};
  A.Symbol.prototype = {
    get$hashCode(_) {
      var hash = this._hashCode;
      if (hash != null)
        return hash;
      hash = 664597 * J.get$hashCode$(this._name) & 536870911;
      this._hashCode = hash;
      return hash;
    },
    toString$0(_) {
      return 'Symbol("' + A.S(this._name) + '")';
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.Symbol && this._name == other._name;
    },
    $isSymbol0: 1
  };
  A.ConstantMapView.prototype = {};
  A.ConstantMap.prototype = {
    toString$0(_) {
      return A.MapBase_mapToString(this);
    },
    $isMap: 1
  };
  A.ConstantStringMap.prototype = {
    get$length(_) {
      return this.__js_helper$_length;
    },
    forEach$1(_, f) {
      var keys, t2, t3, i, t4,
        t1 = this.$ti;
      t1._eval$1("~(1,2)")._as(f);
      keys = this.__js_helper$_keys;
      for (t2 = keys.length, t3 = this._jsObject, t1 = t1._rest[1], i = 0; i < t2; ++i) {
        t4 = A._asString(keys[i]);
        f.call$2(t4, t1._as(t3[t4]));
      }
    }
  };
  A.JSInvocationMirror.prototype = {
    get$memberName() {
      var t1 = this._memberName;
      return t1;
    },
    get$positionalArguments() {
      var t1, argumentCount, list, index, _this = this;
      if (_this.__js_helper$_kind === 1)
        return B.List_empty;
      t1 = _this._arguments;
      argumentCount = t1.length - _this._namedArgumentNames.length - _this._typeArgumentCount;
      if (argumentCount === 0)
        return B.List_empty;
      list = [];
      for (index = 0; index < argumentCount; ++index) {
        if (!(index < t1.length))
          return A.ioore(t1, index);
        list.push(t1[index]);
      }
      list.fixed$length = Array;
      list.immutable$list = Array;
      return list;
    },
    get$namedArguments() {
      var t1, namedArgumentCount, t2, namedArgumentsStartIndex, map, i, t3, t4, _this = this;
      if (_this.__js_helper$_kind !== 0)
        return B.Map_empty;
      t1 = _this._namedArgumentNames;
      namedArgumentCount = t1.length;
      t2 = _this._arguments;
      namedArgumentsStartIndex = t2.length - namedArgumentCount - _this._typeArgumentCount;
      if (namedArgumentCount === 0)
        return B.Map_empty;
      map = new A.JsLinkedHashMap(type$.JsLinkedHashMap_Symbol_dynamic);
      for (i = 0; i < namedArgumentCount; ++i) {
        if (!(i < t1.length))
          return A.ioore(t1, i);
        t3 = t1[i];
        t4 = namedArgumentsStartIndex + i;
        if (!(t4 >= 0 && t4 < t2.length))
          return A.ioore(t2, t4);
        map.$indexSet(0, new A.Symbol(t3), t2[t4]);
      }
      return new A.ConstantMapView(map, type$.ConstantMapView_Symbol_dynamic);
    },
    $isInvocation: 1
  };
  A.Primitives_functionNoSuchMethod_closure.prototype = {
    call$2($name, argument) {
      var t1;
      A._asString($name);
      t1 = this._box_0;
      t1.names = t1.names + "$" + $name;
      B.JSArray_methods.add$1(this.namedArgumentList, $name);
      B.JSArray_methods.add$1(this.$arguments, argument);
      ++t1.argumentCount;
    },
    $signature: 1
  };
  A.Closure.prototype = {
    toString$0(_) {
      var $constructor = this.constructor,
        $name = $constructor == null ? null : $constructor.name;
      return "Closure '" + A.unminifyOrTag($name == null ? "unknown" : $name) + "'";
    },
    $isFunction: 1,
    get$$call() {
      return this;
    },
    "call*": "call$1",
    $requiredArgCount: 1,
    $defaultValues: null
  };
  A.Closure0Args.prototype = {"call*": "call$0", $requiredArgCount: 0};
  A.Closure2Args.prototype = {"call*": "call$2", $requiredArgCount: 2};
  A.TearOffClosure.prototype = {};
  A.StaticClosure.prototype = {
    toString$0(_) {
      var $name = this.$static_name;
      if ($name == null)
        return "Closure of unknown static method";
      return "Closure '" + A.unminifyOrTag($name) + "'";
    }
  };
  A.BoundClosure.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (!(other instanceof A.BoundClosure))
        return false;
      return this.$_target === other.$_target && this._receiver === other._receiver;
    },
    get$hashCode(_) {
      return (A.objectHashCode(this._receiver) ^ A.Primitives_objectHashCode(this.$_target)) >>> 0;
    },
    toString$0(_) {
      return "Closure '" + this.$_name + "' of " + ("Instance of '" + A.Primitives_objectTypeName(this._receiver) + "'");
    }
  };
  A.RuntimeError.prototype = {
    toString$0(_) {
      return "RuntimeError: " + this.message;
    }
  };
  A._Required.prototype = {};
  A.JsLinkedHashMap.prototype = {
    get$length(_) {
      return this.__js_helper$_length;
    },
    containsKey$1(key) {
      var strings = this._strings;
      if (strings == null)
        return false;
      return strings[key] != null;
    },
    $index(_, key) {
      var strings, cell, t1, nums, _null = null;
      if (typeof key == "string") {
        strings = this._strings;
        if (strings == null)
          return _null;
        cell = strings[key];
        t1 = cell == null ? _null : cell.hashMapCellValue;
        return t1;
      } else if (typeof key == "number" && (key & 0x3fffffff) === key) {
        nums = this._nums;
        if (nums == null)
          return _null;
        cell = nums[key];
        t1 = cell == null ? _null : cell.hashMapCellValue;
        return t1;
      } else
        return this.internalGet$1(key);
    },
    internalGet$1(key) {
      var bucket, index,
        rest = this.__js_helper$_rest;
      if (rest == null)
        return null;
      bucket = rest[this.internalComputeHashCode$1(key)];
      index = this.internalFindBucketIndex$2(bucket, key);
      if (index < 0)
        return null;
      return bucket[index].hashMapCellValue;
    },
    $indexSet(_, key, value) {
      var strings, nums, _this = this,
        t1 = A._instanceType(_this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      if (typeof key == "string") {
        strings = _this._strings;
        _this._addHashTableEntry$3(strings == null ? _this._strings = _this._newHashTable$0() : strings, key, value);
      } else if (typeof key == "number" && (key & 0x3fffffff) === key) {
        nums = _this._nums;
        _this._addHashTableEntry$3(nums == null ? _this._nums = _this._newHashTable$0() : nums, key, value);
      } else
        _this.internalSet$2(key, value);
    },
    internalSet$2(key, value) {
      var rest, hash, bucket, index, _this = this,
        t1 = A._instanceType(_this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      rest = _this.__js_helper$_rest;
      if (rest == null)
        rest = _this.__js_helper$_rest = _this._newHashTable$0();
      hash = _this.internalComputeHashCode$1(key);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [_this._newLinkedCell$2(key, value)];
      else {
        index = _this.internalFindBucketIndex$2(bucket, key);
        if (index >= 0)
          bucket[index].hashMapCellValue = value;
        else
          bucket.push(_this._newLinkedCell$2(key, value));
      }
    },
    forEach$1(_, action) {
      var cell, modifications, _this = this;
      A._instanceType(_this)._eval$1("~(1,2)")._as(action);
      cell = _this._first;
      modifications = _this._modifications;
      for (; cell != null;) {
        action.call$2(cell.hashMapCellKey, cell.hashMapCellValue);
        if (modifications !== _this._modifications)
          throw A.wrapException(A.ConcurrentModificationError$(_this));
        cell = cell._next;
      }
    },
    _addHashTableEntry$3(table, key, value) {
      var cell,
        t1 = A._instanceType(this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      cell = table[key];
      if (cell == null)
        table[key] = this._newLinkedCell$2(key, value);
      else
        cell.hashMapCellValue = value;
    },
    _newLinkedCell$2(key, value) {
      var _this = this,
        t1 = A._instanceType(_this),
        cell = new A.LinkedHashMapCell(t1._precomputed1._as(key), t1._rest[1]._as(value));
      if (_this._first == null)
        _this._first = _this._last = cell;
      else
        _this._last = _this._last._next = cell;
      ++_this.__js_helper$_length;
      _this._modifications = _this._modifications + 1 & 1073741823;
      return cell;
    },
    internalComputeHashCode$1(key) {
      return J.get$hashCode$(key) & 0x3fffffff;
    },
    internalFindBucketIndex$2(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq$(bucket[i].hashMapCellKey, key))
          return i;
      return -1;
    },
    toString$0(_) {
      return A.MapBase_mapToString(this);
    },
    _newHashTable$0() {
      var table = Object.create(null);
      table["<non-identifier-key>"] = table;
      delete table["<non-identifier-key>"];
      return table;
    }
  };
  A.LinkedHashMapCell.prototype = {};
  A.initHooks_closure.prototype = {
    call$1(o) {
      return this.getTag(o);
    },
    $signature: 2
  };
  A.initHooks_closure0.prototype = {
    call$2(o, tag) {
      return this.getUnknownTag(o, tag);
    },
    $signature: 3
  };
  A.initHooks_closure1.prototype = {
    call$1(tag) {
      return this.prototypeForTag(A._asString(tag));
    },
    $signature: 4
  };
  A.NativeTypedData.prototype = {
    _invalidPosition$3(receiver, position, $length, $name) {
      var t1 = A.RangeError$range(position, 0, $length, $name, null);
      throw A.wrapException(t1);
    },
    _checkPosition$3(receiver, position, $length, $name) {
      if (position >>> 0 !== position || position > $length)
        this._invalidPosition$3(receiver, position, $length, $name);
    },
    $isTypedData: 1
  };
  A.NativeByteData.prototype = {
    _getUint32$2(receiver, byteOffset, littleEndian) {
      return receiver.getUint32(byteOffset, littleEndian);
    },
    _setUint32$3(receiver, byteOffset, value, littleEndian) {
      return receiver.setUint32(byteOffset, value, littleEndian);
    }
  };
  A.NativeTypedArray.prototype = {
    get$length(receiver) {
      return receiver.length;
    },
    $isJavaScriptIndexingBehavior: 1
  };
  A.NativeTypedArrayOfInt.prototype = {
    $indexSet(receiver, index, value) {
      A._asInt(value);
      A._checkValidIndex(index, receiver, receiver.length);
      receiver[index] = value;
    },
    setRange$4(receiver, start, end, iterable, skipCount) {
      var targetLength, count, sourceLength, source;
      type$.Iterable_int._as(iterable);
      if (type$.NativeTypedArrayOfInt._is(iterable)) {
        targetLength = receiver.length;
        this._checkPosition$3(receiver, start, targetLength, "start");
        this._checkPosition$3(receiver, end, targetLength, "end");
        if (start > end)
          A.throwExpression(A.RangeError$range(start, 0, end, null, null));
        count = end - start;
        if (skipCount < 0)
          A.throwExpression(A.ArgumentError$(skipCount));
        sourceLength = iterable.length;
        if (sourceLength - skipCount < count)
          A.throwExpression(A.StateError$("Not enough elements"));
        source = skipCount !== 0 || sourceLength !== count ? iterable.subarray(skipCount, skipCount + count) : iterable;
        receiver.set(source, start);
        return;
      }
      this.super$ListMixin$setRange(receiver, start, end, iterable, skipCount);
    },
    setRange$3($receiver, start, end, iterable) {
      return this.setRange$4($receiver, start, end, iterable, 0);
    },
    $isIterable: 1,
    $isList: 1
  };
  A.NativeUint32List.prototype = {
    $index(receiver, index) {
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    $isUint32List: 1
  };
  A.NativeUint8List.prototype = {
    get$length(receiver) {
      return receiver.length;
    },
    $index(receiver, index) {
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2(receiver, start, end) {
      return new Uint8Array(receiver.subarray(start, A._checkValidRange(start, end, receiver.length)));
    },
    sublist$1($receiver, start) {
      return this.sublist$2($receiver, start, null);
    },
    $isNativeUint8List: 1,
    $isUint8List: 1
  };
  A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin.prototype = {};
  A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin.prototype = {};
  A.Rti.prototype = {
    _eval$1(recipe) {
      return A._Universe_evalInEnvironment(init.typeUniverse, this, recipe);
    },
    _bind$1(typeOrTuple) {
      return A._Universe_bind(init.typeUniverse, this, typeOrTuple);
    }
  };
  A._FunctionParameters.prototype = {};
  A._Error.prototype = {
    toString$0(_) {
      return this.__rti$_message;
    }
  };
  A._TypeError.prototype = {};
  A.StreamTransformerBase.prototype = {};
  A.IterableBase.prototype = {};
  A.ListMixin.prototype = {
    get$iterator(receiver) {
      return new A.ListIterator(receiver, this.get$length(receiver), A.instanceType(receiver)._eval$1("ListIterator<ListMixin.E>"));
    },
    elementAt$1(receiver, index) {
      return this.$index(receiver, index);
    },
    skip$1(receiver, count) {
      return A.SubListIterable$(receiver, count, null, A.instanceType(receiver)._eval$1("ListMixin.E"));
    },
    fillRange$3(receiver, start, end, fill) {
      var i;
      A.instanceType(receiver)._eval$1("ListMixin.E?")._as(fill);
      A.RangeError_checkValidRange(start, end, this.get$length(receiver));
      for (i = start; i < end; ++i)
        this.$indexSet(receiver, i, fill);
    },
    setRange$4(receiver, start, end, iterable, skipCount) {
      var $length, otherStart, otherList, i,
        t1 = A.instanceType(receiver);
      t1._eval$1("Iterable<ListMixin.E>")._as(iterable);
      A.RangeError_checkValidRange(start, end, this.get$length(receiver));
      $length = end - start;
      if ($length === 0)
        return;
      A.RangeError_checkNotNegative(skipCount, "skipCount");
      if (t1._eval$1("List<ListMixin.E>")._is(iterable)) {
        otherStart = skipCount;
        otherList = iterable;
      } else {
        otherList = J.skip$1$ax(iterable, skipCount).toList$1$growable(0, false);
        otherStart = 0;
      }
      if (otherStart + $length > otherList.length)
        throw A.wrapException(A.StateError$("Too few elements"));
      if (otherStart < start)
        for (i = $length - 1; i >= 0; --i) {
          t1 = otherStart + i;
          if (!(t1 >= 0 && t1 < otherList.length))
            return A.ioore(otherList, t1);
          this.$indexSet(receiver, start + i, otherList[t1]);
        }
      else
        for (i = 0; i < $length; ++i) {
          t1 = otherStart + i;
          if (!(t1 >= 0 && t1 < otherList.length))
            return A.ioore(otherList, t1);
          this.$indexSet(receiver, start + i, otherList[t1]);
        }
    },
    setRange$3($receiver, start, end, iterable) {
      return this.setRange$4($receiver, start, end, iterable, 0);
    },
    setAll$2(receiver, index, iterable) {
      this.setRange$3(receiver, index, index + 16, A.instanceType(receiver)._eval$1("Iterable<ListMixin.E>")._as(iterable));
    },
    toString$0(receiver) {
      return A.IterableBase_iterableToFullString(receiver, "[", "]");
    }
  };
  A.MapBase.prototype = {};
  A.MapBase_mapToString_closure.prototype = {
    call$2(k, v) {
      var t2,
        t1 = this._box_0;
      if (!t1.first)
        this.result._contents += ", ";
      t1.first = false;
      t1 = this.result;
      t2 = t1._contents += A.S(k);
      t1._contents = t2 + ": ";
      t1._contents += A.S(v);
    },
    $signature: 5
  };
  A.MapMixin.prototype = {
    get$length(_) {
      return this.__js_helper$_length;
    },
    toString$0(_) {
      return A.MapBase_mapToString(this);
    },
    $isMap: 1
  };
  A._UnmodifiableMapMixin.prototype = {};
  A.MapView.prototype = {
    forEach$1(_, action) {
      this._collection$_map.forEach$1(0, this.$ti._eval$1("~(1,2)")._as(action));
    },
    get$length(_) {
      return this._collection$_map.__js_helper$_length;
    },
    toString$0(_) {
      return A.MapBase_mapToString(this._collection$_map);
    },
    $isMap: 1
  };
  A.UnmodifiableMapView.prototype = {};
  A._UnmodifiableMapView_MapView__UnmodifiableMapMixin.prototype = {};
  A.Utf8Decoder__decoder_closure.prototype = {
    call$0() {
      var t1, exception;
      try {
        t1 = new TextDecoder("utf-8", {fatal: true});
        return t1;
      } catch (exception) {
      }
      return null;
    },
    $signature: 0
  };
  A.Utf8Decoder__decoderNonfatal_closure.prototype = {
    call$0() {
      var t1, exception;
      try {
        t1 = new TextDecoder("utf-8", {fatal: false});
        return t1;
      } catch (exception) {
      }
      return null;
    },
    $signature: 0
  };
  A.Converter.prototype = {};
  A.Utf8Decoder.prototype = {
    convert$1(codeUnits) {
      var t1, result;
      type$.List_int._as(codeUnits);
      t1 = this._allowMalformed;
      result = A.Utf8Decoder__convertIntercepted(t1, codeUnits, 0, null);
      if (result != null)
        return result;
      return new A._Utf8Decoder(t1).convertGeneral$4(codeUnits, 0, null, true);
    }
  };
  A._Utf8Decoder.prototype = {
    convertGeneral$4(codeUnits, start, maybeEnd, single) {
      var end, bytes, errorOffset, result, t1, message, _this = this;
      type$.List_int._as(codeUnits);
      end = A.RangeError_checkValidRange(start, maybeEnd, codeUnits.length);
      if (start === end)
        return "";
      if (type$.Uint8List._is(codeUnits)) {
        bytes = codeUnits;
        errorOffset = 0;
      } else {
        bytes = A._Utf8Decoder__makeUint8List(codeUnits, start, end);
        end -= start;
        errorOffset = start;
        start = 0;
      }
      result = _this._convertRecursive$4(bytes, start, end, true);
      t1 = _this._state;
      if ((t1 & 1) !== 0) {
        message = A._Utf8Decoder_errorDescription(t1);
        _this._state = 0;
        throw A.wrapException(A.FormatException$(message, codeUnits, errorOffset + _this._charOrIndex));
      }
      return result;
    },
    _convertRecursive$4(bytes, start, end, single) {
      var mid, s1, _this = this;
      if (end - start > 1000) {
        mid = B.JSInt_methods._tdivFast$1(start + end, 2);
        s1 = _this._convertRecursive$4(bytes, start, mid, false);
        if ((_this._state & 1) !== 0)
          return s1;
        return s1 + _this._convertRecursive$4(bytes, mid, end, single);
      }
      return _this.decodeGeneral$4(bytes, start, end, single);
    },
    decodeGeneral$4(bytes, start, end, single) {
      var byte, t2, type, t3, i0, markEnd, i1, m, _this = this, _65533 = 65533,
        state = _this._state,
        char = _this._charOrIndex,
        buffer = new A.StringBuffer(""),
        i = start + 1,
        t1 = bytes.length;
      if (!(start >= 0 && start < t1))
        return A.ioore(bytes, start);
      byte = bytes[start];
      $label0$0:
        for (t2 = _this.allowMalformed; true;) {
          for (; true; i = i0) {
            type = B.JSString_methods._codeUnitAt$1("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFFFFFFFFFFFFFFFFGGGGGGGGGGGGGGGGHHHHHHHHHHHHHHHHHHHHHHHHHHHIHHHJEEBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBKCCCCCCCCCCCCDCLONNNMEEEEEEEEEEE", byte) & 31;
            char = state <= 32 ? byte & 61694 >>> type : (byte & 63 | char << 6) >>> 0;
            state = B.JSString_methods._codeUnitAt$1(" \x000:XECCCCCN:lDb \x000:XECCCCCNvlDb \x000:XECCCCCN:lDb AAAAA\x00\x00\x00\x00\x00AAAAA00000AAAAA:::::AAAAAGG000AAAAA00KKKAAAAAG::::AAAAA:IIIIAAAAA000\x800AAAAA\x00\x00\x00\x00 AAAAA", state + type);
            if (state === 0) {
              buffer._contents += A.Primitives_stringFromCharCode(char);
              if (i === end)
                break $label0$0;
              break;
            } else if ((state & 1) !== 0) {
              if (t2)
                switch (state) {
                  case 69:
                  case 67:
                    buffer._contents += A.Primitives_stringFromCharCode(_65533);
                    break;
                  case 65:
                    buffer._contents += A.Primitives_stringFromCharCode(_65533);
                    --i;
                    break;
                  default:
                    t3 = buffer._contents += A.Primitives_stringFromCharCode(_65533);
                    buffer._contents = t3 + A.Primitives_stringFromCharCode(_65533);
                    break;
                }
              else {
                _this._state = state;
                _this._charOrIndex = i - 1;
                return "";
              }
              state = 0;
            }
            if (i === end)
              break $label0$0;
            i0 = i + 1;
            if (!(i >= 0 && i < t1))
              return A.ioore(bytes, i);
            byte = bytes[i];
          }
          i0 = i + 1;
          if (!(i >= 0 && i < t1))
            return A.ioore(bytes, i);
          byte = bytes[i];
          if (byte < 128) {
            while (true) {
              if (!(i0 < end)) {
                markEnd = end;
                break;
              }
              i1 = i0 + 1;
              if (!(i0 >= 0 && i0 < t1))
                return A.ioore(bytes, i0);
              byte = bytes[i0];
              if (byte >= 128) {
                markEnd = i1 - 1;
                i0 = i1;
                break;
              }
              i0 = i1;
            }
            if (markEnd - i < 20)
              for (m = i; m < markEnd; ++m) {
                if (!(m < t1))
                  return A.ioore(bytes, m);
                buffer._contents += A.Primitives_stringFromCharCode(bytes[m]);
              }
            else
              buffer._contents += A.String_String$fromCharCodes(bytes, i, markEnd);
            if (markEnd === end)
              break $label0$0;
            i = i0;
          } else
            i = i0;
        }
      if (single && state > 32)
        if (t2)
          buffer._contents += A.Primitives_stringFromCharCode(_65533);
        else {
          _this._state = 77;
          _this._charOrIndex = end;
          return "";
        }
      _this._state = state;
      _this._charOrIndex = char;
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    }
  };
  A.NoSuchMethodError_toString_closure.prototype = {
    call$2(key, value) {
      var t1, t2, t3;
      type$.Symbol._as(key);
      t1 = this.sb;
      t2 = this._box_0;
      t3 = t1._contents += t2.comma;
      t3 += key._name;
      t1._contents = t3;
      t1._contents = t3 + ": ";
      t1._contents += A.Error_safeToString(value);
      t2.comma = ", ";
    },
    $signature: 6
  };
  A.Error.prototype = {};
  A.AssertionError.prototype = {
    toString$0(_) {
      var t1 = this.message;
      if (t1 != null)
        return "Assertion failed: " + A.Error_safeToString(t1);
      return "Assertion failed";
    }
  };
  A.NullThrownError.prototype = {
    toString$0(_) {
      return "Throw of null.";
    }
  };
  A.ArgumentError.prototype = {
    get$_errorName() {
      return "Invalid argument" + (!this._hasValue ? "(s)" : "");
    },
    get$_errorExplanation() {
      return "";
    },
    toString$0(_) {
      var _this = this,
        $name = _this.name,
        nameString = $name == null ? "" : " (" + $name + ")",
        message = _this.message,
        messageString = message == null ? "" : ": " + A.S(message),
        prefix = _this.get$_errorName() + nameString + messageString;
      if (!_this._hasValue)
        return prefix;
      return prefix + _this.get$_errorExplanation() + ": " + A.Error_safeToString(_this.invalidValue);
    }
  };
  A.RangeError.prototype = {
    get$_errorName() {
      return "RangeError";
    },
    get$_errorExplanation() {
      var explanation,
        start = this.start,
        end = this.end;
      if (start == null)
        explanation = end != null ? ": Not less than or equal to " + A.S(end) : "";
      else if (end == null)
        explanation = ": Not greater than or equal to " + A.S(start);
      else if (end > start)
        explanation = ": Not in inclusive range " + A.S(start) + ".." + A.S(end);
      else
        explanation = end < start ? ": Valid value range is empty" : ": Only valid value is " + A.S(start);
      return explanation;
    }
  };
  A.IndexError.prototype = {
    get$_errorName() {
      return "RangeError";
    },
    get$_errorExplanation() {
      if (A._asInt(this.invalidValue) < 0)
        return ": index must not be negative";
      var t1 = this.length;
      if (t1 === 0)
        return ": no indices are valid";
      return ": index should be less than " + t1;
    },
    get$length(receiver) {
      return this.length;
    }
  };
  A.NoSuchMethodError.prototype = {
    toString$0(_) {
      var $arguments, t1, _i, t2, t3, argument, receiverText, actualParameters, _this = this, _box_0 = {},
        sb = new A.StringBuffer("");
      _box_0.comma = "";
      $arguments = _this._core$_arguments;
      for (t1 = $arguments.length, _i = 0, t2 = "", t3 = ""; _i < t1; ++_i, t3 = ", ") {
        argument = $arguments[_i];
        sb._contents = t2 + t3;
        t2 = sb._contents += A.Error_safeToString(argument);
        _box_0.comma = ", ";
      }
      _this._namedArguments.forEach$1(0, new A.NoSuchMethodError_toString_closure(_box_0, sb));
      receiverText = A.Error_safeToString(_this._core$_receiver);
      actualParameters = sb.toString$0(0);
      return "NoSuchMethodError: method not found: '" + _this._core$_memberName._name + "'\nReceiver: " + receiverText + "\nArguments: [" + actualParameters + "]";
    }
  };
  A.UnsupportedError.prototype = {
    toString$0(_) {
      return "Unsupported operation: " + this.message;
    }
  };
  A.UnimplementedError.prototype = {
    toString$0(_) {
      return "UnimplementedError: " + this.message;
    }
  };
  A.StateError.prototype = {
    toString$0(_) {
      return "Bad state: " + this.message;
    }
  };
  A.ConcurrentModificationError.prototype = {
    toString$0(_) {
      var t1 = this.modifiedObject;
      if (t1 == null)
        return "Concurrent modification during iteration.";
      return "Concurrent modification during iteration: " + A.Error_safeToString(t1) + ".";
    }
  };
  A.OutOfMemoryError.prototype = {
    toString$0(_) {
      return "Out of Memory";
    }
  };
  A.CyclicInitializationError.prototype = {
    toString$0(_) {
      return "Reading static variable '" + this.variableName + "' during its initialization";
    }
  };
  A.FormatException.prototype = {
    toString$0(_) {
      var message = this.message,
        report = "" !== message ? "FormatException: " + message : "FormatException",
        offset = this.offset;
      return offset != null ? report + (" (at offset " + A.S(offset) + ")") : report;
    }
  };
  A.Iterable.prototype = {
    get$length(_) {
      var count,
        it = this.get$iterator(this);
      for (count = 0; it.moveNext$0();)
        ++count;
      return count;
    },
    toString$0(_) {
      return A.IterableBase_iterableToShortString(this, "(", ")");
    }
  };
  A.Null.prototype = {
    get$hashCode(_) {
      return A.Object.prototype.get$hashCode.call(this, this);
    },
    toString$0(_) {
      return "null";
    }
  };
  A.Object.prototype = {$isObject: 1,
    $eq(_, other) {
      return this === other;
    },
    get$hashCode(_) {
      return A.Primitives_objectHashCode(this);
    },
    toString$0(_) {
      return "Instance of '" + A.Primitives_objectTypeName(this) + "'";
    },
    noSuchMethod$1(_, invocation) {
      type$.Invocation._as(invocation);
      throw A.wrapException(A.NoSuchMethodError$(this, invocation.get$memberName(), invocation.get$positionalArguments(), invocation.get$namedArguments()));
    },
    toString() {
      return this.toString$0(this);
    }
  };
  A.StringBuffer.prototype = {
    get$length(_) {
      return this._contents.length;
    },
    toString$0(_) {
      var t1 = this._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    }
  };
  A.DomException.prototype = {
    toString$0(receiver) {
      return String(receiver);
    }
  };
  A.Endian.prototype = {};
  A.Archive.prototype = {
    addFile$1(file) {
      var t2,
        t1 = this._fileMap,
        index = t1.$index(0, file.name);
      if (index != null) {
        B.JSArray_methods.$indexSet(this.files, index, file);
        return;
      }
      t2 = this.files;
      B.JSArray_methods.add$1(t2, file);
      t1.$indexSet(0, file.name, t2.length - 1);
    },
    get$length(_) {
      return this.files.length;
    },
    get$iterator(_) {
      var t1 = this.files;
      return new J.ArrayIterator(t1, t1.length, A._arrayInstanceType(t1)._eval$1("ArrayIterator<1>"));
    }
  };
  A.ArchiveFile.prototype = {
    decompress$0() {
      var t1, t2, t3, t4, _this = this;
      if (_this._rawContent == null) {
        let start = _this._content.__ZipFile__rawContent_A.start;
        let offset = start + _this._content.__ZipFile__rawContent_A.__InputStream__length_A;
        _this._rawContent = _this._content.__ZipFile__rawContent_A.buffer.slice(start, offset);
      }
      if (_this._content == null && _this._rawContent != null) {
        if (_this._compressionType === 8) {
          //t1 = _this._rawContent.toUint8List$0();
          t2 = A.HuffmanTable$(B.List_2Bc);
          t3 = A.HuffmanTable$(B.List_X3d);
          t1 = A.InputStream$(t1, 0, null, 0);
          t4 = A.OutputStream$(null);
          t3 = new A.Inflate(t1, t4, t2, t3);
          t3.inputSet = true;
          t3._inflate$0();
          _this._content = type$.List_int._as(A.NativeUint8List_NativeUint8List$view(t4._buffer.buffer, 0, t4.length));
        } else
          _this._content = _this._rawContent.toUint8List$0();
        _this._compressionType = 0;
      }
    },
    toString$0(_) {
      return this.name;
    }
  };
  A.FileContent.prototype = {};
  A.AesDecrypt.prototype = {
    decryptCrt$1(buffer) {
      var t2, t3, i, bi, t4, _this = this,
        $length = buffer.length,
        t1 = _this._iv;
      B.NativeUint8List_methods.fillRange$3(t1, 0, 16, 0);
      for (t2 = _this._aes_decrypt$_buffer, t3 = _this._roundKey, i = 0, bi = 16; i < $length; ++i, ++bi) {
        if (bi === 16) {
          B.NativeUint8List_methods.setAll$2(t2, 0, t1);
          _this._cipher$2(t2, t3);
          for (bi = 15; bi >= 0; --bi) {
            t4 = t1[bi];
            if (t4 === 255) {
              t1[bi] = 0;
              continue;
            }
            t1[bi] = t4 + 1;
            break;
          }
          bi = 0;
        }
        t4 = buffer[i];
        if (!(bi < 16))
          return A.ioore(t2, bi);
        buffer[i] = t4 ^ t2[bi];
      }
    },
    _cipher$2(state, roundKey) {
      var t1, round, temp, _this = this;
      _this._addRoundKey$3(0, state, roundKey);
      for (t1 = _this.mode, round = 1; true; ++round) {
        _this._subBytes$1(state);
        temp = state[1];
        state[1] = state[5];
        state[5] = state[9];
        state[9] = state[13];
        state[13] = temp;
        temp = state[2];
        state[2] = state[10];
        state[10] = temp;
        temp = state[6];
        state[6] = state[14];
        state[14] = temp;
        temp = state[3];
        state[3] = state[15];
        state[15] = state[11];
        state[11] = state[7];
        state[7] = temp;
        if (!(t1 < 3))
          return A.ioore(B.List_10_12_14, t1);
        if (round === B.List_10_12_14[t1])
          break;
        _this._mixColumns$1(state);
        _this._addRoundKey$3(round, state, roundKey);
      }
      if (!(t1 < 3))
        return A.ioore(B.List_10_12_14, t1);
      _this._addRoundKey$3(B.List_10_12_14[t1], state, roundKey);
    },
    _mixColumns$1(state) {
      var i, k, t, t1, t2, t3, t4, t5, tmp, tm;
      for (i = 0, k = 0; i < 4; ++i, k += 4) {
        if (!(k < 16))
          return A.ioore(state, k);
        t = state[k];
        t1 = k + 1;
        if (!(t1 < 16))
          return A.ioore(state, t1);
        t2 = t ^ state[t1];
        t3 = k + 2;
        if (!(t3 < 16))
          return A.ioore(state, t3);
        t4 = state[t3];
        t5 = k + 3;
        if (!(t5 < 16))
          return A.ioore(state, t5);
        tmp = t2 ^ t4 ^ state[t5];
        if (!(k < 16))
          return A.ioore(state, k);
        state[k] = (t ^ t2 << 1 ^ (t2 >>> 7 & 1) * 27 ^ tmp) >>> 0;
        t2 = state[t1];
        tm = t2 ^ state[t3];
        if (!(t1 < 16))
          return A.ioore(state, t1);
        state[t1] = (t2 ^ tm << 1 ^ (tm >>> 7 & 1) * 27 ^ tmp) >>> 0;
        t2 = state[t3];
        tm = t2 ^ state[t5];
        if (!(t3 < 16))
          return A.ioore(state, t3);
        state[t3] = (t2 ^ tm << 1 ^ (tm >>> 7 & 1) * 27 ^ tmp) >>> 0;
        t2 = state[t5];
        tm = t2 ^ t;
        if (!(t5 < 16))
          return A.ioore(state, t5);
        state[t5] = (t2 ^ tm << 1 ^ (tm >>> 7 & 1) * 27 ^ tmp) >>> 0;
      }
    },
    _subBytes$1(state) {
      var i, t1;
      for (i = 0; i < 16; ++i) {
        t1 = state[i];
        if (!(t1 < 256))
          return A.ioore(B.List_1zK, t1);
        t1 = B.List_1zK[t1];
        if (!(i < 16))
          return A.ioore(state, i);
        state[i] = t1;
      }
    },
    _addRoundKey$3(round, state, roundKey) {
      var t1, t2, i, k, t3, j, t4, t5;
      for (t1 = round * 4 * 4, t2 = roundKey.length, i = 0, k = 0; i < 4; ++i)
        for (t3 = t1 + i * 4, j = 0; j < 4; ++j, ++k) {
          if (!(k >= 0 && k < 16))
            return A.ioore(state, k);
          t4 = state[k];
          t5 = t3 + j;
          if (!(t5 < t2))
            return A.ioore(roundKey, t5);
          t5 = roundKey[t5];
          if (!(k < 16))
            return A.ioore(state, k);
          state[k] = t4 ^ t5;
        }
    },
    _keyExpansion$2(roundKey, key) {
      var t2, t3, i, i0, t4, t5, t6, k, u8tmp, j,
        tempA = A._setArrayType([0, 0, 0, 0], type$.JSArray_int),
        t1 = this.mode;
      if (!(t1 < 3))
        return A.ioore(B.List_4_6_8, t1);
      t2 = key.length;
      t3 = roundKey.length;
      i = 0;
      for (; i0 = B.List_4_6_8[t1], i < i0; ++i) {
        t4 = i * 4;
        if (!(t4 < t2))
          return A.ioore(key, t4);
        t5 = key[t4];
        if (!(t4 < t3))
          return A.ioore(roundKey, t4);
        roundKey[t4] = t5;
        t5 = t4 + 1;
        if (!(t5 < t2))
          return A.ioore(key, t5);
        t6 = key[t5];
        if (!(t5 < t3))
          return A.ioore(roundKey, t5);
        roundKey[t5] = t6;
        t6 = t4 + 2;
        if (!(t6 < t2))
          return A.ioore(key, t6);
        t5 = key[t6];
        if (!(t6 < t3))
          return A.ioore(roundKey, t6);
        roundKey[t6] = t5;
        t4 += 3;
        if (!(t4 < t2))
          return A.ioore(key, t4);
        t5 = key[t4];
        if (!(t4 < t3))
          return A.ioore(roundKey, t4);
        roundKey[t4] = t5;
      }
      for (t2 = t1 === 2, i = i0; i < 4 * (B.List_10_12_14[t1] + 1); ++i) {
        k = (i - 1) * 4;
        if (!(k >= 0 && k < t3))
          return A.ioore(roundKey, k);
        B.JSArray_methods.$indexSet(tempA, 0, roundKey[k]);
        t4 = k + 1;
        if (!(t4 < t3))
          return A.ioore(roundKey, t4);
        B.JSArray_methods.$indexSet(tempA, 1, roundKey[t4]);
        t4 = k + 2;
        if (!(t4 < t3))
          return A.ioore(roundKey, t4);
        B.JSArray_methods.$indexSet(tempA, 2, roundKey[t4]);
        t4 = k + 3;
        if (!(t4 < t3))
          return A.ioore(roundKey, t4);
        B.JSArray_methods.$indexSet(tempA, 3, roundKey[t4]);
        if (B.JSInt_methods.$mod(i, B.List_4_6_8[t1]) === 0) {
          u8tmp = tempA[0];
          t4 = tempA[1];
          tempA[0] = t4;
          tempA[1] = tempA[2];
          tempA[2] = tempA[3];
          tempA[3] = u8tmp;
          if (!(t4 < 256))
            return A.ioore(B.List_1zK, t4);
          B.JSArray_methods.$indexSet(tempA, 0, B.List_1zK[t4]);
          t4 = tempA[1];
          if (!(t4 < 256))
            return A.ioore(B.List_1zK, t4);
          B.JSArray_methods.$indexSet(tempA, 1, B.List_1zK[t4]);
          t4 = tempA[2];
          if (!(t4 < 256))
            return A.ioore(B.List_1zK, t4);
          B.JSArray_methods.$indexSet(tempA, 2, B.List_1zK[t4]);
          t4 = tempA[3];
          if (!(t4 < 256))
            return A.ioore(B.List_1zK, t4);
          B.JSArray_methods.$indexSet(tempA, 3, B.List_1zK[t4]);
          t4 = tempA[0];
          t5 = B.JSInt_methods.$tdiv(i, B.List_4_6_8[t1]);
          if (!(t5 < 11))
            return A.ioore(B.List_2Vk, t5);
          B.JSArray_methods.$indexSet(tempA, 0, t4 ^ B.List_2Vk[t5]);
        }
        if (t2)
          if (B.JSInt_methods.$mod(i, B.List_4_6_8[t1]) === 4) {
            t4 = tempA[0];
            if (!(t4 < 256))
              return A.ioore(B.List_1zK, t4);
            B.JSArray_methods.$indexSet(tempA, 0, B.List_1zK[t4]);
            t4 = tempA[1];
            if (!(t4 < 256))
              return A.ioore(B.List_1zK, t4);
            B.JSArray_methods.$indexSet(tempA, 1, B.List_1zK[t4]);
            t4 = tempA[2];
            if (!(t4 < 256))
              return A.ioore(B.List_1zK, t4);
            B.JSArray_methods.$indexSet(tempA, 2, B.List_1zK[t4]);
            t4 = tempA[3];
            if (!(t4 < 256))
              return A.ioore(B.List_1zK, t4);
            B.JSArray_methods.$indexSet(tempA, 3, B.List_1zK[t4]);
          }
        j = i * 4;
        k = (i - B.List_4_6_8[t1]) * 4;
        if (!(k >= 0 && k < t3))
          return A.ioore(roundKey, k);
        t4 = roundKey[k];
        t5 = tempA[0];
        if (!(j < t3))
          return A.ioore(roundKey, j);
        roundKey[j] = t4 ^ t5;
        t5 = j + 1;
        t4 = k + 1;
        if (!(t4 < t3))
          return A.ioore(roundKey, t4);
        t4 = roundKey[t4];
        t6 = tempA[1];
        if (!(t5 < t3))
          return A.ioore(roundKey, t5);
        roundKey[t5] = t4 ^ t6;
        t6 = j + 2;
        t4 = k + 2;
        if (!(t4 < t3))
          return A.ioore(roundKey, t4);
        t4 = roundKey[t4];
        t5 = tempA[2];
        if (!(t6 < t3))
          return A.ioore(roundKey, t6);
        roundKey[t6] = t4 ^ t5;
        t5 = j + 3;
        t4 = k + 3;
        if (!(t4 < t3))
          return A.ioore(roundKey, t4);
        t4 = roundKey[t4];
        t6 = tempA[3];
        if (!(t5 < t3))
          return A.ioore(roundKey, t5);
        roundKey[t5] = t4 ^ t6;
      }
    }
  };
  A.ArchiveException.prototype = {};
  A.InputStreamBase.prototype = {};
  A.InputStream.prototype = {
    get$length(_) {
      var t1 = this.__InputStream__length_A;
      t1 === $ && A.throwLateFieldNI("_length");
      return t1 - (this.offset - this.start);
    },
    get$isEOS() {
      var t1 = this.offset,
        t2 = this.__InputStream__length_A;
      t2 === $ && A.throwLateFieldNI("_length");
      return t1 >= this.start + t2;
    },
    subset$2(position, $length) {
      var t2, _this = this,
        t1 = _this.start;
      position += t1;
      if ($length < 0) {
        t2 = _this.__InputStream__length_A;
        t2 === $ && A.throwLateFieldNI("_length");
        $length = t2 - (position - t1);
      }
      return A.InputStream$(_this.buffer, _this.byteOrder, $length, position);
    },
    readBytes$1(count) {
      var _this = this,
        bytes = _this.subset$2(_this.offset - _this.start, count);
      _this.offset = _this.offset + bytes.get$length(bytes);
      return bytes;
    },
    readString$2$size$utf8(size, utf8) {
      var str, exception, t1,
        bytes = this.readBytes$1(size).toUint8List$0();
      try {
        str = utf8 ? new A.Utf8Decoder(false).convert$1(bytes) : A.String_String$fromCharCodes(bytes, 0, null);
        return str;
      } catch (exception) {
        t1 = A.String_String$fromCharCodes(bytes, 0, null);
        return t1;
      }
    },
    readString$1$size(size) {
      return this.readString$2$size$utf8(size, true);
    },
    readUint16$0() {
      var b1, b2, _this = this,
        t1 = _this.buffer,
        t2 = _this.offset,
        t3 = _this.offset = t2 + 1,
        t4 = t1.length;
      if (!(t2 >= 0 && t2 < t4))
        return A.ioore(t1, t2);
      t2 = t1[t2];
      if (typeof t2 !== "number")
        return t2.$and();
      b1 = t2 & 255;
      _this.offset = t3 + 1;
      if (!(t3 >= 0 && t3 < t4))
        return A.ioore(t1, t3);
      t3 = t1[t3];
      if (typeof t3 !== "number")
        return t3.$and();
      b2 = t3 & 255;
      if (_this.byteOrder === 1)
        return b1 << 8 | b2;
      return b2 << 8 | b1;
    },
    readUint32$0() {
      var b1, b2, b3, b4, _this = this,
        t1 = _this.buffer,
        t2 = _this.offset,
        t3 = _this.offset = t2 + 1,
        t4 = t1.length;
      if (!(t2 >= 0 && t2 < t4))
        return A.ioore(t1, t2);
      t2 = t1[t2];
      if (typeof t2 !== "number")
        return t2.$and();
      b1 = t2 & 255;
      t2 = _this.offset = t3 + 1;
      if (!(t3 >= 0 && t3 < t4))
        return A.ioore(t1, t3);
      t3 = t1[t3];
      if (typeof t3 !== "number")
        return t3.$and();
      b2 = t3 & 255;
      t3 = _this.offset = t2 + 1;
      if (!(t2 >= 0 && t2 < t4))
        return A.ioore(t1, t2);
      t2 = t1[t2];
      if (typeof t2 !== "number")
        return t2.$and();
      b3 = t2 & 255;
      _this.offset = t3 + 1;
      if (!(t3 >= 0 && t3 < t4))
        return A.ioore(t1, t3);
      t3 = t1[t3];
      if (typeof t3 !== "number")
        return t3.$and();
      b4 = t3 & 255;
      if (_this.byteOrder === 1)
        return (b1 << 24 | b2 << 16 | b3 << 8 | b4) >>> 0;
      return (b4 << 24 | b3 << 16 | b2 << 8 | b1) >>> 0;
    },
    readUint64$0() {
      var b1, b2, b3, b4, b5, b6, b7, b8, _this = this,
        t1 = _this.buffer,
        t2 = _this.offset,
        t3 = _this.offset = t2 + 1,
        t4 = t1.length;
      if (!(t2 >= 0 && t2 < t4))
        return A.ioore(t1, t2);
      t2 = t1[t2];
      if (typeof t2 !== "number")
        return t2.$and();
      b1 = t2 & 255;
      t2 = _this.offset = t3 + 1;
      if (!(t3 >= 0 && t3 < t4))
        return A.ioore(t1, t3);
      t3 = t1[t3];
      if (typeof t3 !== "number")
        return t3.$and();
      b2 = t3 & 255;
      t3 = _this.offset = t2 + 1;
      if (!(t2 >= 0 && t2 < t4))
        return A.ioore(t1, t2);
      t2 = t1[t2];
      if (typeof t2 !== "number")
        return t2.$and();
      b3 = t2 & 255;
      t2 = _this.offset = t3 + 1;
      if (!(t3 >= 0 && t3 < t4))
        return A.ioore(t1, t3);
      t3 = t1[t3];
      if (typeof t3 !== "number")
        return t3.$and();
      b4 = t3 & 255;
      t3 = _this.offset = t2 + 1;
      if (!(t2 >= 0 && t2 < t4))
        return A.ioore(t1, t2);
      t2 = t1[t2];
      if (typeof t2 !== "number")
        return t2.$and();
      b5 = t2 & 255;
      t2 = _this.offset = t3 + 1;
      if (!(t3 >= 0 && t3 < t4))
        return A.ioore(t1, t3);
      t3 = t1[t3];
      if (typeof t3 !== "number")
        return t3.$and();
      b6 = t3 & 255;
      t3 = _this.offset = t2 + 1;
      if (!(t2 >= 0 && t2 < t4))
        return A.ioore(t1, t2);
      t2 = t1[t2];
      if (typeof t2 !== "number")
        return t2.$and();
      b7 = t2 & 255;
      _this.offset = t3 + 1;
      if (!(t3 >= 0 && t3 < t4))
        return A.ioore(t1, t3);
      t3 = t1[t3];
      if (typeof t3 !== "number")
        return t3.$and();
      b8 = t3 & 255;
      if (_this.byteOrder === 1)
        return (B.JSInt_methods._shlPositive$1(b1, 56) | B.JSInt_methods._shlPositive$1(b2, 48) | B.JSInt_methods._shlPositive$1(b3, 40) | B.JSInt_methods._shlPositive$1(b4, 32) | b5 << 24 | b6 << 16 | b7 << 8 | b8) >>> 0;
      return (B.JSInt_methods._shlPositive$1(b8, 56) | B.JSInt_methods._shlPositive$1(b7, 48) | B.JSInt_methods._shlPositive$1(b6, 40) | B.JSInt_methods._shlPositive$1(b5, 32) | b4 << 24 | b3 << 16 | b2 << 8 | b1) >>> 0;
    },
    toUint8List$0() {
      var t2, t3, end, end0, _this = this,
        len = _this.get$length(_this),
        t1 = _this.buffer;
      if (type$.Uint8List._is(t1)) {
        t2 = _this.offset;
        t3 = t1.length;
        if (t2 + len > t3)
          len = t3 - t2;
        return A.NativeUint8List_NativeUint8List$view(t1.buffer, t1.byteOffset + t2, len);
      }
      t2 = _this.offset;
      end = t2 + len;
      end0 = t1.length;
      return new Uint8Array(A._ensureNativeList(J.sublist$2$ax(t1, t2, end > end0 ? end0 : end)));
    }
  };
  A.OutputStreamBase.prototype = {};
  A.OutputStream.prototype = {
    writeBytes$1(bytes) {
      var len, t1, t2, t3, t4, _this = this;
      type$.List_int._as(bytes);
      len = bytes.length;
      for (; t1 = _this.length, t2 = t1 + len, t3 = _this._buffer, t4 = t3.length, t2 > t4;)
        _this._expandBuffer$1(t2 - t4);
      B.NativeUint8List_methods.setRange$3(t3, t1, t2, bytes);
      _this.length += len;
    },
    writeInputStream$1(stream) {
      var t2, t3, t4, t5, _this = this,
        t1 = stream.start;
      while (true) {
        t2 = _this.length;
        t3 = stream.__InputStream__length_A;
        t3 === $ && A.throwLateFieldNI("_length");
        t3 = t2 + (t3 - (stream.offset - t1));
        t4 = _this._buffer;
        t5 = t4.length;
        if (!(t3 > t5))
          break;
        _this._expandBuffer$1(t3 - t5);
      }
      B.NativeUint8List_methods.setRange$4(t4, t2, t2 + stream.get$length(stream), stream.buffer, stream.offset);
      _this.length = _this.length + stream.get$length(stream);
    },
    subset$2(start, end) {
      var _this = this;
      if (start < 0)
        start = _this.length + start;
      if (end == null)
        end = _this.length;
      else if (end < 0)
        end = _this.length + end;
      return A.NativeUint8List_NativeUint8List$view(_this._buffer.buffer, start, end - start);
    },
    subset$1(start) {
      return this.subset$2(start, null);
    },
    _expandBuffer$1(required) {
      var blockSize = required != null ? required > 32768 ? required : 32768 : 32768,
        t1 = this._buffer,
        t2 = t1.length,
        newBuffer = new Uint8Array((t2 + blockSize) * 2);
      B.NativeUint8List_methods.setRange$3(newBuffer, 0, t2, t1);
      this._buffer = newBuffer;
    },
    _expandBuffer$0() {
      return this._expandBuffer$1(null);
    },
    get$length(receiver) {
      return this.length;
    }
  };
  A.ZipDirectory.prototype = {
    ZipDirectory$read$2$password(input, password) {
      var t2, len, dirContent, t3, t4, t5, t6, fnameLen, extraLen, commentLen, bytes, t7, id, size, fnLen, exLen, t8, extra, compressionMethod, sigOrCrc, _this = this,
        _s7_ = "_length",
        t1 = _this._findSignature$1(input);
      _this.filePosition = t1;
      t2 = input.start;
      input.offset = t2 + t1;
      input.readUint32$0();
      input.readUint16$0();
      input.readUint16$0();
      input.readUint16$0();
      input.readUint16$0();
      _this.__ZipDirectory_centralDirectorySize_A = input.readUint32$0();
      _this.__ZipDirectory_centralDirectoryOffset_A = input.readUint32$0();
      len = input.readUint16$0();
      if (len > 0)
        _this.set$zipFileComment(input.readString$2$size$utf8(len, false));
      _this._readZip64Data$1(input);
      dirContent = input.subset$2(_this.__ZipDirectory_centralDirectoryOffset_A, _this.__ZipDirectory_centralDirectorySize_A);
      t1 = dirContent.start;
      t3 = _this.fileHeaders;
      t4 = type$.JSArray_int;
      while (true) {
        t5 = dirContent.offset;
        t6 = dirContent.__InputStream__length_A;
        t6 === $ && A.throwLateFieldNI(_s7_);
        if (!(t5 < t1 + t6))
          break;
        if (dirContent.readUint32$0() !== 33639248)
          break;
        t5 = new A.ZipFileHeader(A._setArrayType([], t4));
        t5.versionMadeBy = dirContent.readUint16$0();
        dirContent.readUint16$0();
        dirContent.readUint16$0();
        dirContent.readUint16$0();
        dirContent.readUint16$0();
        dirContent.readUint16$0();
        dirContent.readUint32$0();
        t5.compressedSize = dirContent.readUint32$0();
        t5.uncompressedSize = dirContent.readUint32$0();
        fnameLen = dirContent.readUint16$0();
        extraLen = dirContent.readUint16$0();
        commentLen = dirContent.readUint16$0();
        t5.diskNumberStart = dirContent.readUint16$0();
        dirContent.readUint16$0();
        t5.externalFileAttributes = dirContent.readUint32$0();
        t5.localHeaderOffset = dirContent.readUint32$0();
        if (fnameLen > 0)
          t5.set$filename(0, dirContent.readString$1$size(fnameLen));
        if (extraLen > 0) {
          bytes = dirContent.subset$2(dirContent.offset - t1, extraLen);
          t6 = dirContent.offset;
          t7 = bytes.__InputStream__length_A;
          t7 === $ && A.throwLateFieldNI(_s7_);
          dirContent.offset = t6 + (t7 - (bytes.offset - bytes.start));
          t5.set$extraField(bytes.toUint8List$0());
          t7 = bytes.offset -= extraLen;
          if (t7 < 0)
            bytes.offset = 0;
          id = bytes.readUint16$0();
          size = bytes.readUint16$0();
          if (id === 1) {
            if (size >= 8 && t5.uncompressedSize === 4294967295) {
              t5.uncompressedSize = bytes.readUint64$0();
              size -= 8;
            }
            if (size >= 8 && t5.compressedSize === 4294967295) {
              t5.compressedSize = bytes.readUint64$0();
              size -= 8;
            }
            if (size >= 8 && t5.localHeaderOffset === 4294967295) {
              t5.localHeaderOffset = bytes.readUint64$0();
              size -= 8;
            }
            if (size >= 4 && t5.diskNumberStart === 65535)
              t5.diskNumberStart = bytes.readUint32$0();
          }
        }
        if (commentLen > 0)
          t5.set$fileComment(dirContent.readString$1$size(commentLen));
        t6 = t5.localHeaderOffset;
        t6.toString;
        input.offset = t2 + t6;
        t6 = new A.ZipFile(A._setArrayType([], t4), t5, A._setArrayType([0, 0, 0], t4));
        t7 = input.readUint32$0();
        t6.signature = t7;
        if (t7 !== 67324752)
          A.throwExpression(A.ArchiveException$("Invalid Zip Signature"));
        input.readUint16$0();
        t6.flags = input.readUint16$0();
        t6.compressionMethod = input.readUint16$0();
        t6.lastModFileTime = input.readUint16$0();
        t6.lastModFileDate = input.readUint16$0();
        t6.crc32 = input.readUint32$0();
        input.readUint32$0();
        t6.uncompressedSize = input.readUint32$0();
        fnLen = input.readUint16$0();
        exLen = input.readUint16$0();
        t6.set$filename(0, input.readString$1$size(fnLen));
        bytes = input.subset$2(input.offset - t2, exLen);
        t7 = input.offset;
        t8 = bytes.__InputStream__length_A;
        t8 === $ && A.throwLateFieldNI(_s7_);
        input.offset = t7 + (t8 - (bytes.offset - bytes.start));
        t6.set$extraField(bytes.toUint8List$0());
        t6._encryptionType = (t6.flags & 1) !== 0 ? 1 : 0;
        t6._password = password;
        t7 = t5.compressedSize;
        t7.toString;
        bytes = input.subset$2(input.offset - t2, t7);
        t7 = input.offset;
        t8 = bytes.__InputStream__length_A;
        t8 === $ && A.throwLateFieldNI(_s7_);
        input.offset = t7 + (t8 - (bytes.offset - bytes.start));
        t6.__ZipFile__rawContent_A = bytes;
        if (t6._encryptionType !== 0 && exLen > 2) {
          extra = A.InputStream$(t6.extraField, 0, null, 0);
          if (extra.readUint16$0() === 39169) {
            extra.readUint16$0();
            extra.readUint16$0();
            extra.readString$1$size(2);
            t7 = extra.buffer;
            t8 = extra.offset++;
            if (!(t8 >= 0 && t8 < t7.length))
              return A.ioore(t7, t8);
            t8 = t7[t8];
            compressionMethod = extra.readUint16$0();
            t6._encryptionType = 2;
            t6._aesHeader = new A.AesHeader(t8, compressionMethod);
            t6.compressionMethod = compressionMethod;
          }
        }
        if ((t6.flags & 8) !== 0) {
          sigOrCrc = input.readUint32$0();
          if (sigOrCrc === 134695760)
            t6.crc32 = input.readUint32$0();
          else
            t6.crc32 = sigOrCrc;
          input.readUint32$0();
          t6.uncompressedSize = input.readUint32$0();
        }
        t5.file = t6;
        B.JSArray_methods.add$1(t3, t5);
      }
    },
    _readZip64Data$1(input) {
      var zip64, zip64DirOffset, dirSize, dirOffset,
        t1 = input.start,
        ip = input.offset - t1,
        locPos = this.filePosition - 20;
      if (locPos < 0)
        return;
      zip64 = input.subset$2(locPos, 20);
      if (zip64.readUint32$0() !== 117853008) {
        input.offset = t1 + ip;
        return;
      }
      zip64.readUint32$0();
      zip64DirOffset = zip64.readUint64$0();
      zip64.readUint32$0();
      input.offset = t1 + zip64DirOffset;
      if (input.readUint32$0() !== 101075792) {
        input.offset = t1 + ip;
        return;
      }
      input.readUint64$0();
      input.readUint16$0();
      input.readUint16$0();
      input.readUint32$0();
      input.readUint32$0();
      input.readUint64$0();
      input.readUint64$0();
      dirSize = input.readUint64$0();
      dirOffset = input.readUint64$0();
      this.__ZipDirectory_centralDirectorySize_A = dirSize;
      this.__ZipDirectory_centralDirectoryOffset_A = dirOffset;
      input.offset = t1 + ip;
    },
    _findSignature$1(input) {
      var ip,
        t1 = input.offset,
        t2 = input.start;
      for (ip = input.get$length(input) - 5; ip >= 0; --ip) {
        input.offset = t2 + ip;
        if (input.readUint32$0() === 101010256) {
          input.offset = t2 + (t1 - t2);
          return ip;
        }
      }
      throw A.wrapException(A.ArchiveException$("Could not find End of Central Directory Record"));
    },
    set$zipFileComment(zipFileComment) {
      A._asString(zipFileComment);
    }
  };
  A.AesHeader.prototype = {};
  A.ZipFile.prototype = {
    get$content() {
      var t1, salt, bytes, key, t2, t3, decrypt, t4, _this = this,
        _s11_ = "_rawContent";
      if (_this._zip_file$_content == null) {
        if (_this._encryptionType !== 0) {
          t1 = _this.__ZipFile__rawContent_A;
          t1 === $ && A.throwLateFieldNI(_s11_);
          if (t1.get$length(t1) <= 0) {
            _this.set$_zip_file$_content(_this.__ZipFile__rawContent_A.toUint8List$0());
            _this._encryptionType = 0;
          } else {
            t1 = _this._encryptionType;
            if (t1 === 1)
              _this.__ZipFile__rawContent_A = _this._decodeZipCrypto$1(_this.__ZipFile__rawContent_A);
            else if (t1 === 2) {
              t1 = _this.__ZipFile__rawContent_A;
              if (_this._aesHeader.encryptionStrength === 1)
                salt = t1.readBytes$1(8).toUint8List$0();
              else
                salt = t1.readBytes$1(16).toUint8List$0();
              bytes = t1.readBytes$1(t1.get$length(t1) - 10).toUint8List$0();
              t1 = _this._password;
              t1.toString;
              key = A.ZipFile__deriveKey(t1, salt);
              t1 = new Uint8Array(16);
              t2 = new Uint8Array(16);
              t3 = new Uint8Array(240);
              decrypt = new A.AesDecrypt(2, key, t3, t1, t2);
              decrypt._keyExpansion$2(t3, key);
              decrypt.decryptCrt$1(bytes);
              _this.__ZipFile__rawContent_A = A.InputStream$(bytes, 0, null, 0);
            }
            _this._encryptionType = 0;
          }
        }
        t1 = _this.compressionMethod;
        t2 = _this.__ZipFile__rawContent_A;
        if (t1 === 8) {
          t2 === $ && A.throwLateFieldNI(_s11_);
          t1 = _this.uncompressedSize;
          t3 = A.HuffmanTable$(B.List_2Bc);
          t4 = A.HuffmanTable$(B.List_X3d);
          t1 = A.OutputStream$(t1);
          t4 = new A.Inflate(t2, t1, t3, t4);
          t4.inputSet = true;
          t4._inflate$0();
          _this.set$_zip_file$_content(type$.List_int._as(A.NativeUint8List_NativeUint8List$view(t1._buffer.buffer, 0, t1.length)));
          _this.compressionMethod = 0;
        } else {
          t2 === $ && A.throwLateFieldNI(_s11_);
          _this.set$_zip_file$_content(t2.toUint8List$0());
        }
      }
      t1 = _this._zip_file$_content;
      t1.toString;
      return t1;
    },
    toString$0(_) {
      return this.filename;
    },
    _updateKeys$1(c) {
      var t1 = this._keys;
      B.JSArray_methods.$indexSet(t1, 0, A.CRC32(t1[0], c));
      B.JSArray_methods.$indexSet(t1, 1, t1[1] + (t1[0] & 255));
      B.JSArray_methods.$indexSet(t1, 1, t1[1] * 134775813 + 1);
      B.JSArray_methods.$indexSet(t1, 2, A.CRC32(t1[2], t1[1] >>> 24));
    },
    _decryptByte$0() {
      var temp = this._keys[2] & 65535 | 2;
      return temp * (temp ^ 1) >>> 8 & 255;
    },
    _decodeZipCrypto$1(input) {
      var i, t1, t2, bytes, temp, _this = this,
        _s11_ = "_rawContent";
      for (i = 0; i < 12; ++i) {
        t1 = _this.__ZipFile__rawContent_A;
        t1 === $ && A.throwLateFieldNI(_s11_);
        t2 = t1.buffer;
        t1 = t1.offset++;
        if (!(t1 >= 0 && t1 < t2.length))
          return A.ioore(t2, t1);
        _this._updateKeys$1((t2[t1] ^ _this._decryptByte$0()) >>> 0);
      }
      t1 = _this.__ZipFile__rawContent_A;
      t1 === $ && A.throwLateFieldNI(_s11_);
      bytes = t1.toUint8List$0();
      for (t1 = bytes.length, i = 0; i < t1; ++i) {
        temp = bytes[i] ^ _this._decryptByte$0();
        _this._updateKeys$1(temp);
        bytes[i] = temp;
      }
      return A.InputStream$(bytes, 0, null, 0);
    },
    set$filename(_, filename) {
      this.filename = A._asString(filename);
    },
    set$extraField(extraField) {
      this.extraField = type$.List_int._as(extraField);
    },
    set$_zip_file$_content(_content) {
      this._zip_file$_content = type$.nullable_List_int._as(_content);
    }
  };
  A.ZipFileHeader.prototype = {
    toString$0(_) {
      return this.filename;
    },
    set$filename(_, filename) {
      this.filename = A._asString(filename);
    },
    set$extraField(extraField) {
      this.extraField = type$.List_int._as(extraField);
    },
    set$fileComment(fileComment) {
      A._asString(fileComment);
    }
  };
  A.ZipDecoder.prototype = {
    decodeBuffer$3$password$verify(input, password, verify) {
      var archive, t2, t3, _i, zfh, t4, t5, t6, t7, t8, file, _null = null,
        t1 = new A.ZipDirectory(A._setArrayType([], type$.JSArray_ZipFileHeader));
      t1.ZipDirectory$read$2$password(input, password);
      this.__ZipDecoder_directory_A = t1;
      archive = new A.Archive(A._setArrayType([], type$.JSArray_ArchiveFile), A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.int));
      for (t1 = this.__ZipDecoder_directory_A.fileHeaders, t2 = t1.length, t3 = type$.List_int, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i) {
        zfh = t1[_i];
        t4 = zfh.file;
        t4.toString;
        t5 = zfh.externalFileAttributes;
        t5.toString;
        t6 = t4.filename;
        t7 = t4.uncompressedSize;
        t7.toString;
        t8 = t4.compressionMethod;
        file = new A.ArchiveFile(t6, t7, B.JSInt_methods._tdivFast$1(Date.now(), 1000), t8);
        t6 = A.stringReplaceAllUnchecked(t6, "\\", "/");
        file.name = t6;
        file._content = t4;
        t7 = t4;
        t5 = t5 >>> 16;
        file.mode = t5;
        if (zfh.versionMadeBy >>> 8 === 3)
          switch (t5 & 61440) {
            case 32768:
            case 0:
              break;
            case 40960:
              if ((t7 instanceof A.FileContent ? file._content = t7.get$content() : t7) == null)
                file.decompress$0();
              t5 = t3._as(t3._as(file._content));
              B.Utf8Decoder_false.convert$1(t5);
              break;
          }
        else
          B.JSString_methods.endsWith$1(t6, "/");
        file.lastModTime = (t4.lastModFileDate << 16 | t4.lastModFileTime) >>> 0;
        archive.addFile$1(file);
      }
      return archive;
    }
  };
  A.HuffmanTable.prototype = {
    HuffmanTable$1(lengths) {
      var i, t1, t2, size, bitLength, code, skip, rtemp, reversed, j, t3, _this = this,
        listSize = lengths.length;
      for (i = 0; i < listSize; ++i) {
        if (!(i < lengths.length))
          return A.ioore(lengths, i);
        t1 = lengths[i];
        t2 = _this.maxCodeLength;
        if (typeof t1 !== "number")
          return t1.$gt();
        if (t1 > t2)
          _this.set$maxCodeLength(t1);
        if (!(i < lengths.length))
          return A.ioore(lengths, i);
        t1 = lengths[i];
        t2 = _this.minCodeLength;
        if (typeof t1 !== "number")
          return t1.$lt();
        if (t1 < t2)
          _this.set$minCodeLength(t1);
      }
      size = B.JSInt_methods.$shl(1, _this.maxCodeLength);
      _this.__HuffmanTable_table_A = new Uint32Array(size);
      for (bitLength = 1, code = 0, skip = 2; bitLength <= _this.maxCodeLength;) {
        for (t1 = bitLength << 16, i = 0; i < listSize; ++i) {
          if (!(i < lengths.length))
            return A.ioore(lengths, i);
          if (J.$eq$(lengths[i], bitLength)) {
            for (rtemp = code, reversed = 0, j = 0; j < bitLength; ++j) {
              reversed = (reversed << 1 | rtemp & 1) >>> 0;
              rtemp = rtemp >>> 1;
            }
            for (t2 = _this.__HuffmanTable_table_A, t3 = (t1 | i) >>> 0, j = reversed; j < size; j += skip) {
              if (!(j >= 0 && j < t2.length))
                return A.ioore(t2, j);
              t2[j] = t3;
            }
            ++code;
          }
        }
        ++bitLength;
        code = code << 1 >>> 0;
        skip = skip << 1 >>> 0;
      }
    },
    set$maxCodeLength(maxCodeLength) {
      this.maxCodeLength = A._asInt(maxCodeLength);
    },
    set$minCodeLength(minCodeLength) {
      this.minCodeLength = A._asInt(minCodeLength);
    }
  };
  A.Inflate.prototype = {
    _inflate$0() {
      var t1, t2, t3, _this = this;
      _this._bitBufferLen = _this._bitBuffer = 0;
      if (!_this.inputSet)
        return;
      while (true) {
        t1 = _this.__Inflate_input_A;
        t1 === $ && A.throwLateFieldNI("input");
        t2 = t1.offset;
        t3 = t1.__InputStream__length_A;
        t3 === $ && A.throwLateFieldNI("_length");
        if (!(t2 < t1.start + t3))
          break;
        if (!_this._parseBlock$0())
          break;
      }
    },
    _parseBlock$0() {
      var blockHeader, _this = this,
        t1 = _this.__Inflate_input_A;
      t1 === $ && A.throwLateFieldNI("input");
      if (t1.get$isEOS())
        return false;
      blockHeader = _this._readBits$1(3);
      switch (B.JSInt_methods._shrOtherPositive$1(blockHeader, 1)) {
        case 0:
          if (_this._parseUncompressedBlock$0() === -1)
            return false;
          break;
        case 1:
          if (_this._decodeHuffman$2(_this._fixedLiteralLengthTable, _this._fixedDistanceTable) === -1)
            return false;
          break;
        case 2:
          if (_this._parseDynamicHuffmanBlock$0() === -1)
            return false;
          break;
        default:
          return false;
      }
      return (blockHeader & 1) === 0;
    },
    _readBits$1($length) {
      var t1, t2, t3, t4, _this = this;
      if ($length === 0)
        return 0;
      for (; t1 = _this._bitBufferLen, t1 < $length;) {
        t2 = _this.__Inflate_input_A;
        t2 === $ && A.throwLateFieldNI("input");
        t3 = t2.offset;
        t4 = t2.__InputStream__length_A;
        t4 === $ && A.throwLateFieldNI("_length");
        if (t3 >= t2.start + t4)
          return -1;
        t4 = t2.buffer;
        t2.offset = t3 + 1;
        if (!(t3 >= 0 && t3 < t4.length))
          return A.ioore(t4, t3);
        t3 = t4[t3];
        _this._bitBuffer = (_this._bitBuffer | B.JSInt_methods.$shl(t3, t1)) >>> 0;
        _this._bitBufferLen = t1 + 8;
      }
      t2 = _this._bitBuffer;
      t3 = B.JSInt_methods._shlPositive$1(1, $length);
      _this._bitBuffer = B.JSInt_methods._shrBothPositive$1(t2, $length);
      _this._bitBufferLen = t1 - $length;
      return (t2 & t3 - 1) >>> 0;
    },
    _readCodeByTable$1(table) {
      var maxCodeLength, t2, t3, t4, t5, codeWithLength, codeLength, _this = this,
        t1 = table.__HuffmanTable_table_A;
      t1 === $ && A.throwLateFieldNI("table");
      maxCodeLength = table.maxCodeLength;
      for (; t2 = _this._bitBufferLen, t2 < maxCodeLength;) {
        t3 = _this.__Inflate_input_A;
        t3 === $ && A.throwLateFieldNI("input");
        t4 = t3.offset;
        t5 = t3.__InputStream__length_A;
        t5 === $ && A.throwLateFieldNI("_length");
        if (t4 >= t3.start + t5)
          return -1;
        t5 = t3.buffer;
        t3.offset = t4 + 1;
        if (!(t4 >= 0 && t4 < t5.length))
          return A.ioore(t5, t4);
        t4 = t5[t4];
        _this._bitBuffer = (_this._bitBuffer | B.JSInt_methods.$shl(t4, t2)) >>> 0;
        _this._bitBufferLen = t2 + 8;
      }
      t3 = _this._bitBuffer;
      t4 = (t3 & B.JSInt_methods.$shl(1, maxCodeLength) - 1) >>> 0;
      if (!(t4 < t1.length))
        return A.ioore(t1, t4);
      codeWithLength = t1[t4];
      codeLength = codeWithLength >>> 16;
      _this._bitBuffer = B.JSInt_methods._shrBothPositive$1(t3, codeLength);
      _this._bitBufferLen = t2 - codeLength;
      return codeWithLength & 65535;
    },
    _parseUncompressedBlock$0() {
      var len, t1, _this = this;
      _this._bitBufferLen = _this._bitBuffer = 0;
      len = _this._readBits$1(16);
      t1 = _this._readBits$1(16);
      if (len !== 0 && len !== (t1 ^ 65535) >>> 0)
        return -1;
      t1 = _this.__Inflate_input_A;
      t1 === $ && A.throwLateFieldNI("input");
      if (len > t1.get$length(t1))
        return -1;
      _this.output.writeInputStream$1(_this.__Inflate_input_A.readBytes$1(len));
      return 0;
    },
    _parseDynamicHuffmanBlock$0() {
      var numDistanceCodes, numCodeLengths, codeLengths, i, len, t1, codeLengthsTable, litLenDistLengths, litlenLengths, distLengths, _this = this,
        numLitLengthCodes = _this._readBits$1(5);
      if (numLitLengthCodes === -1)
        return -1;
      numLitLengthCodes += 257;
      if (numLitLengthCodes > 288)
        return -1;
      numDistanceCodes = _this._readBits$1(5);
      if (numDistanceCodes === -1)
        return -1;
      ++numDistanceCodes;
      if (numDistanceCodes > 32)
        return -1;
      numCodeLengths = _this._readBits$1(4);
      if (numCodeLengths === -1)
        return -1;
      numCodeLengths += 4;
      if (numCodeLengths > 19)
        return -1;
      codeLengths = new Uint8Array(19);
      for (i = 0; i < numCodeLengths; ++i) {
        len = _this._readBits$1(3);
        if (len === -1)
          return -1;
        t1 = B.List_uSC[i];
        if (!(t1 < 19))
          return A.ioore(codeLengths, t1);
        codeLengths[t1] = len;
      }
      codeLengthsTable = A.HuffmanTable$(codeLengths);
      t1 = numLitLengthCodes + numDistanceCodes;
      litLenDistLengths = new Uint8Array(t1);
      litlenLengths = A.NativeUint8List_NativeUint8List$view(litLenDistLengths.buffer, 0, numLitLengthCodes);
      distLengths = A.NativeUint8List_NativeUint8List$view(litLenDistLengths.buffer, numLitLengthCodes, numDistanceCodes);
      if (_this._decode$3(t1, codeLengthsTable, litLenDistLengths) === -1)
        return -1;
      return _this._decodeHuffman$2(A.HuffmanTable$(litlenLengths), A.HuffmanTable$(distLengths));
    },
    _decodeHuffman$2(litlen, dist) {
      var t1, code, t2, t3, ti, codeLength, distCode, distance, _this = this;
      for (t1 = _this.output; true;) {
        code = _this._readCodeByTable$1(litlen);
        if (code < 0 || code > 285)
          return -1;
        if (code === 256)
          break;
        if (code < 256) {
          if (t1.length === t1._buffer.length)
            t1._expandBuffer$0();
          t2 = t1._buffer;
          t3 = t1.length++;
          if (!(t3 >= 0 && t3 < t2.length))
            return A.ioore(t2, t3);
          t2[t3] = code & 255;
          continue;
        }
        ti = code - 257;
        if (!(ti >= 0 && ti < 29))
          return A.ioore(B.List_qQn, ti);
        codeLength = B.List_qQn[ti] + _this._readBits$1(B.List_eea[ti]);
        distCode = _this._readCodeByTable$1(dist);
        if (distCode < 0 || distCode > 29)
          return -1;
        if (!(distCode >= 0 && distCode < 30))
          return A.ioore(B.List_i3t, distCode);
        distance = B.List_i3t[distCode] + _this._readBits$1(B.List_X3d0[distCode]);
        for (t2 = -distance; codeLength > distance;) {
          t1.writeBytes$1(t1.subset$1(t2));
          codeLength -= distance;
        }
        if (codeLength === distance)
          t1.writeBytes$1(t1.subset$1(t2));
        else
          t1.writeBytes$1(t1.subset$2(t2, codeLength - distance));
      }
      for (; t1 = _this._bitBufferLen, t1 >= 8;) {
        _this._bitBufferLen = t1 - 8;
        t1 = _this.__Inflate_input_A;
        t1 === $ && A.throwLateFieldNI("input");
        if (--t1.offset < 0)
          t1.offset = 0;
      }
      return 0;
    },
    _decode$3(num, table, codeLengths) {
      var t1, prev, i, code, repeat, repeat0, i0, _this = this;
      type$.List_int._as(codeLengths);
      for (t1 = codeLengths.length, prev = 0, i = 0; i < num;) {
        code = _this._readCodeByTable$1(table);
        if (code === -1)
          return -1;
        switch (code) {
          case 16:
            repeat = _this._readBits$1(2);
            if (repeat === -1)
              return -1;
            repeat += 3;
            for (; repeat0 = repeat - 1, repeat > 0; repeat = repeat0, i = i0) {
              i0 = i + 1;
              if (!(i >= 0 && i < t1))
                return A.ioore(codeLengths, i);
              codeLengths[i] = prev;
            }
            break;
          case 17:
            repeat = _this._readBits$1(3);
            if (repeat === -1)
              return -1;
            repeat += 3;
            for (; repeat0 = repeat - 1, repeat > 0; repeat = repeat0, i = i0) {
              i0 = i + 1;
              if (!(i >= 0 && i < t1))
                return A.ioore(codeLengths, i);
              codeLengths[i] = 0;
            }
            prev = 0;
            break;
          case 18:
            repeat = _this._readBits$1(7);
            if (repeat === -1)
              return -1;
            repeat += 11;
            for (; repeat0 = repeat - 1, repeat > 0; repeat = repeat0, i = i0) {
              i0 = i + 1;
              if (!(i >= 0 && i < t1))
                return A.ioore(codeLengths, i);
              codeLengths[i] = 0;
            }
            prev = 0;
            break;
          default:
            if (code < 0 || code > 15)
              return -1;
            i0 = i + 1;
            if (!(i >= 0 && i < t1))
              return A.ioore(codeLengths, i);
            codeLengths[i] = code;
            i = i0;
            prev = code;
            break;
        }
      }
      return 0;
    }
  };
  A.CipherParameters.prototype = {};
  A.SHA256Digest.prototype = {
    processBlock$0() {
      var t1, t2, t, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, a, b, c, d, e, f, g, h, a0, i;
      for (t1 = this.buffer, t2 = t1.length, t = 16; t < 64; ++t) {
        t3 = t - 2;
        if (!(t3 < t2))
          return A.ioore(t1, t3);
        t3 = A._asInt(t1[t3]);
        t4 = B.JSInt_methods._shrOtherPositive$1(t3, 17);
        t5 = $._MASK32_HI_BITS[15];
        t6 = B.JSInt_methods._shrOtherPositive$1(t3, 19);
        t7 = $._MASK32_HI_BITS[13];
        t8 = B.JSInt_methods._shrOtherPositive$1(t3, 10);
        t9 = t - 7;
        if (!(t9 < t2))
          return A.ioore(t1, t9);
        t9 = t1[t9];
        if (typeof t9 !== "number")
          return A.iae(t9);
        t10 = t - 15;
        if (!(t10 < t2))
          return A.ioore(t1, t10);
        t10 = A._asInt(t1[t10]);
        t11 = B.JSInt_methods._shrOtherPositive$1(t10, 7);
        t12 = $._MASK32_HI_BITS[25];
        t13 = B.JSInt_methods._shrOtherPositive$1(t10, 18);
        t14 = $._MASK32_HI_BITS[14];
        t15 = B.JSInt_methods._shrOtherPositive$1(t10, 3);
        t16 = t - 16;
        if (!(t16 < t2))
          return A.ioore(t1, t16);
        t16 = t1[t16];
        if (typeof t16 !== "number")
          return A.iae(t16);
        B.JSArray_methods.$indexSet(t1, t, (((t4 | (t3 & t5) << 15) ^ (t6 | (t3 & t7) << 13) ^ t8) >>> 0) + t9 + (((t11 | (t10 & t12) << 25) ^ (t13 | (t10 & t14) << 14) ^ t15) >>> 0) + t16 >>> 0);
      }
      t3 = this.state;
      t4 = t3.length;
      if (0 >= t4)
        return A.ioore(t3, 0);
      a = t3[0];
      if (1 >= t4)
        return A.ioore(t3, 1);
      b = t3[1];
      if (2 >= t4)
        return A.ioore(t3, 2);
      c = t3[2];
      if (3 >= t4)
        return A.ioore(t3, 3);
      d = t3[3];
      if (4 >= t4)
        return A.ioore(t3, 4);
      e = t3[4];
      if (5 >= t4)
        return A.ioore(t3, 5);
      f = t3[5];
      if (6 >= t4)
        return A.ioore(t3, 6);
      g = t3[6];
      if (7 >= t4)
        return A.ioore(t3, 7);
      h = t3[7];
      for (a0 = a, t = 0, i = 0; i < 8; ++i) {
        t4 = B.JSInt_methods._shrOtherPositive$1(e, 6);
        t5 = $._MASK32_HI_BITS[26];
        t6 = B.JSInt_methods._shrOtherPositive$1(e, 11);
        t7 = $._MASK32_HI_BITS[21];
        t8 = B.JSInt_methods._shrOtherPositive$1(e, 25);
        t9 = $._MASK32_HI_BITS[7];
        if (!(t < 64))
          return A.ioore($.SHA256Digest__k, t);
        t10 = $.SHA256Digest__k[t];
        if (!(t < t2))
          return A.ioore(t1, t);
        t11 = t1[t];
        if (typeof t11 !== "number")
          return A.iae(t11);
        h = h + (((t4 | (e & t5) << 26) ^ (t6 | (e & t7) << 21) ^ (t8 | (e & t9) << 7)) >>> 0) + ((e & f ^ ~e & g) >>> 0) + t10 + t11 >>> 0;
        d = d + h >>> 0;
        t11 = B.JSInt_methods._shrOtherPositive$1(a0, 2);
        t10 = $._MASK32_HI_BITS[30];
        t8 = B.JSInt_methods._shrOtherPositive$1(a0, 13);
        t6 = $._MASK32_HI_BITS[19];
        t4 = B.JSInt_methods._shrOtherPositive$1(a0, 22);
        t12 = $._MASK32_HI_BITS[10];
        t13 = a0 & b;
        h = h + (((t11 | (a0 & t10) << 30) ^ (t8 | (a0 & t6) << 19) ^ (t4 | (a0 & t12) << 10)) >>> 0) + ((t13 ^ a0 & c ^ b & c) >>> 0) >>> 0;
        ++t;
        if (!(t < 64))
          return A.ioore($.SHA256Digest__k, t);
        t4 = $.SHA256Digest__k[t];
        if (!(t < t2))
          return A.ioore(t1, t);
        t8 = t1[t];
        if (typeof t8 !== "number")
          return A.iae(t8);
        g = g + (((d >>> 6 | (d & t5) << 26) ^ (d >>> 11 | (d & t7) << 21) ^ (d >>> 25 | (d & t9) << 7)) >>> 0) + ((d & e ^ ~d & f) >>> 0) + t4 + t8 >>> 0;
        c = c + g >>> 0;
        t8 = h & a0;
        g = g + (((h >>> 2 | (h & t10) << 30) ^ (h >>> 13 | (h & t6) << 19) ^ (h >>> 22 | (h & t12) << 10)) >>> 0) + ((t8 ^ h & b ^ t13) >>> 0) >>> 0;
        ++t;
        if (!(t < 64))
          return A.ioore($.SHA256Digest__k, t);
        t13 = $.SHA256Digest__k[t];
        if (!(t < t2))
          return A.ioore(t1, t);
        t4 = t1[t];
        if (typeof t4 !== "number")
          return A.iae(t4);
        f = f + (((c >>> 6 | (c & t5) << 26) ^ (c >>> 11 | (c & t7) << 21) ^ (c >>> 25 | (c & t9) << 7)) >>> 0) + ((c & d ^ ~c & e) >>> 0) + t13 + t4 >>> 0;
        b = b + f >>> 0;
        t4 = g & h;
        f = f + (((g >>> 2 | (g & t10) << 30) ^ (g >>> 13 | (g & t6) << 19) ^ (g >>> 22 | (g & t12) << 10)) >>> 0) + ((t4 ^ g & a0 ^ t8) >>> 0) >>> 0;
        ++t;
        if (!(t < 64))
          return A.ioore($.SHA256Digest__k, t);
        t8 = $.SHA256Digest__k[t];
        if (!(t < t2))
          return A.ioore(t1, t);
        t13 = t1[t];
        if (typeof t13 !== "number")
          return A.iae(t13);
        e = e + (((b >>> 6 | (b & t5) << 26) ^ (b >>> 11 | (b & t7) << 21) ^ (b >>> 25 | (b & t9) << 7)) >>> 0) + ((b & c ^ ~b & d) >>> 0) + t8 + t13 >>> 0;
        a0 = a0 + e >>> 0;
        t13 = f & g;
        e = e + (((f >>> 2 | (f & t10) << 30) ^ (f >>> 13 | (f & t6) << 19) ^ (f >>> 22 | (f & t12) << 10)) >>> 0) + ((t13 ^ f & h ^ t4) >>> 0) >>> 0;
        ++t;
        if (!(t < 64))
          return A.ioore($.SHA256Digest__k, t);
        t4 = $.SHA256Digest__k[t];
        if (!(t < t2))
          return A.ioore(t1, t);
        t8 = t1[t];
        if (typeof t8 !== "number")
          return A.iae(t8);
        d = d + (((a0 >>> 6 | (a0 & t5) << 26) ^ (a0 >>> 11 | (a0 & t7) << 21) ^ (a0 >>> 25 | (a0 & t9) << 7)) >>> 0) + ((a0 & b ^ ~a0 & c) >>> 0) + t4 + t8 >>> 0;
        h = h + d >>> 0;
        t8 = e & f;
        d = d + (((e >>> 2 | (e & t10) << 30) ^ (e >>> 13 | (e & t6) << 19) ^ (e >>> 22 | (e & t12) << 10)) >>> 0) + ((t8 ^ e & g ^ t13) >>> 0) >>> 0;
        ++t;
        if (!(t < 64))
          return A.ioore($.SHA256Digest__k, t);
        t13 = $.SHA256Digest__k[t];
        if (!(t < t2))
          return A.ioore(t1, t);
        t4 = t1[t];
        if (typeof t4 !== "number")
          return A.iae(t4);
        c = c + (((h >>> 6 | (h & t5) << 26) ^ (h >>> 11 | (h & t7) << 21) ^ (h >>> 25 | (h & t9) << 7)) >>> 0) + ((h & a0 ^ ~h & b) >>> 0) + t13 + t4 >>> 0;
        g = g + c >>> 0;
        t4 = d & e;
        c = c + (((d >>> 2 | (d & t10) << 30) ^ (d >>> 13 | (d & t6) << 19) ^ (d >>> 22 | (d & t12) << 10)) >>> 0) + ((t4 ^ d & f ^ t8) >>> 0) >>> 0;
        ++t;
        if (!(t < 64))
          return A.ioore($.SHA256Digest__k, t);
        t8 = $.SHA256Digest__k[t];
        if (!(t < t2))
          return A.ioore(t1, t);
        t13 = t1[t];
        if (typeof t13 !== "number")
          return A.iae(t13);
        b = b + (((g >>> 6 | (g & t5) << 26) ^ (g >>> 11 | (g & t7) << 21) ^ (g >>> 25 | (g & t9) << 7)) >>> 0) + ((g & h ^ ~g & a0) >>> 0) + t8 + t13 >>> 0;
        f = f + b >>> 0;
        t13 = c & d;
        b = b + (((c >>> 2 | (c & t10) << 30) ^ (c >>> 13 | (c & t6) << 19) ^ (c >>> 22 | (c & t12) << 10)) >>> 0) + ((t13 ^ c & e ^ t4) >>> 0) >>> 0;
        ++t;
        if (!(t < 64))
          return A.ioore($.SHA256Digest__k, t);
        t4 = $.SHA256Digest__k[t];
        if (!(t < t2))
          return A.ioore(t1, t);
        t8 = t1[t];
        if (typeof t8 !== "number")
          return A.iae(t8);
        a0 = a0 + (((f >>> 6 | (f & t5) << 26) ^ (f >>> 11 | (f & t7) << 21) ^ (f >>> 25 | (f & t9) << 7)) >>> 0) + ((f & g ^ ~f & h) >>> 0) + t4 + t8 >>> 0;
        e = e + a0 >>> 0;
        a0 = a0 + (((b >>> 2 | (b & t10) << 30) ^ (b >>> 13 | (b & t6) << 19) ^ (b >>> 22 | (b & t12) << 10)) >>> 0) + ((b & c ^ b & d ^ t13) >>> 0) >>> 0;
        ++t;
      }
      B.JSArray_methods.$indexSet(t3, 0, a + a0 >>> 0);
      t1 = t3[1];
      if (typeof t1 !== "number")
        return t1.$add();
      B.JSArray_methods.$indexSet(t3, 1, t1 + b >>> 0);
      t1 = t3[2];
      if (typeof t1 !== "number")
        return t1.$add();
      B.JSArray_methods.$indexSet(t3, 2, t1 + c >>> 0);
      t1 = t3[3];
      if (typeof t1 !== "number")
        return t1.$add();
      B.JSArray_methods.$indexSet(t3, 3, t1 + d >>> 0);
      t1 = t3[4];
      if (typeof t1 !== "number")
        return t1.$add();
      B.JSArray_methods.$indexSet(t3, 4, t1 + e >>> 0);
      t1 = t3[5];
      if (typeof t1 !== "number")
        return t1.$add();
      B.JSArray_methods.$indexSet(t3, 5, t1 + f >>> 0);
      t1 = t3[6];
      if (typeof t1 !== "number")
        return t1.$add();
      B.JSArray_methods.$indexSet(t3, 6, t1 + g >>> 0);
      t1 = t3[7];
      if (typeof t1 !== "number")
        return t1.$add();
      B.JSArray_methods.$indexSet(t3, 7, t1 + h >>> 0);
    }
  };
  A.Pbkdf2Parameters.prototype = {};
  A.PBKDF2KeyDerivator.prototype = {
    deriveKey$4(inp, inpOff, out, outOff) {
      var dkLen, t2, l, iBuf, outBytes, t3, t4, keyLength, t5, t6, outPos, i, pos, _this = this,
        _s9_ = "_inputPad",
        t1 = _this.__PBKDF2KeyDerivator__params_A;
      t1 === $ && A.throwLateFieldNI("_params");
      dkLen = t1.desiredKeyLength;
      t1 = _this._mac;
      t2 = t1.__HMac__digestSize_A;
      t2 === $ && A.throwLateFieldNI("_digestSize");
      l = B.JSInt_methods.$tdiv(dkLen + t2 - 1, t2);
      iBuf = new Uint8Array(4);
      outBytes = new Uint8Array(l * t2);
      t3 = B.NativeUint8List_methods.sublist$1(inp, inpOff);
      t4 = t1._digest;
      t4.reset$0();
      keyLength = t3.length;
      t5 = t1.__HMac__blockLength_A;
      t5 === $ && A.throwLateFieldNI("_blockLength");
      if (keyLength > t5) {
        t4.update$3(t3, 0, keyLength);
        t3 = t1.__HMac__inputPad_A;
        t3 === $ && A.throwLateFieldNI(_s9_);
        t4.doFinal$2(t3, 0);
        keyLength = t1.__HMac__digestSize_A;
      } else {
        t6 = t1.__HMac__inputPad_A;
        t6 === $ && A.throwLateFieldNI(_s9_);
        B.NativeUint8List_methods.setRange$3(t6, 0, keyLength, t3);
      }
      t3 = t1.__HMac__inputPad_A;
      t3 === $ && A.throwLateFieldNI(_s9_);
      B.NativeUint8List_methods.fillRange$3(t3, keyLength, t3.length, 0);
      t3 = t1.__HMac__outputBuf_A;
      t3 === $ && A.throwLateFieldNI("_outputBuf");
      B.NativeUint8List_methods.setRange$3(t3, 0, t5, t1.__HMac__inputPad_A);
      t1._xorPad$3(t1.__HMac__inputPad_A, t5, 54);
      t1._xorPad$3(t1.__HMac__outputBuf_A, t5, 92);
      t1 = t1.__HMac__inputPad_A;
      t4.update$3(t1, 0, t1.length);
      for (outPos = 0, i = 1; i <= l; ++i) {
        for (pos = 3; true; --pos) {
          if (!(pos >= 0))
            return A.ioore(iBuf, pos);
          t1 = iBuf[pos];
          if (!(pos < 4))
            return A.ioore(iBuf, pos);
          iBuf[pos] = t1 + 1;
          if (iBuf[pos] !== 0)
            break;
        }
        t1 = _this.__PBKDF2KeyDerivator__params_A;
        _this._f$5(t1.salt, t1.iterationCount, iBuf, outBytes, outPos);
        outPos += t2;
      }
      B.NativeUint8List_methods.setRange$3(out, outOff, outOff + dkLen, outBytes);
      return _this.__PBKDF2KeyDerivator__params_A.desiredKeyLength;
    },
    _f$5($S, c, iBuf, out, outOff) {
      var t1, t2, t3, count, t4, t5, j, t6, t7, _this = this;
      if (c <= 0)
        throw A.wrapException(A.ArgumentError$("Iteration count must be at least 1."));
      t1 = _this._mac;
      t2 = t1._digest;
      t2.update$3($S, 0, $S.length);
      t2.update$3(iBuf, 0, 4);
      t3 = _this.__PBKDF2KeyDerivator__state_A;
      t3 === $ && A.throwLateFieldNI("_state");
      t1.doFinal$2(t3, 0);
      t3 = _this.__PBKDF2KeyDerivator__state_A;
      B.NativeUint8List_methods.setRange$3(out, outOff, outOff + t3.length, t3);
      for (t3 = out.length, count = 1; count < c; ++count) {
        t4 = _this.__PBKDF2KeyDerivator__state_A;
        t2.update$3(t4, 0, t4.length);
        t1.doFinal$2(_this.__PBKDF2KeyDerivator__state_A, 0);
        for (t4 = _this.__PBKDF2KeyDerivator__state_A, t5 = t4.length, j = 0; j !== t5; ++j) {
          t6 = outOff + j;
          if (!(t6 < t3))
            return A.ioore(out, t6);
          t7 = out[t6];
          if (!(j < t5))
            return A.ioore(t4, j);
          out[t6] = t7 ^ t4[j];
        }
      }
    }
  };
  A.HMac.prototype = {
    doFinal$2(out, outOff) {
      var t3, len, _this = this,
        t1 = _this._digest,
        t2 = _this.__HMac__outputBuf_A;
      t2 === $ && A.throwLateFieldNI("_outputBuf");
      t3 = _this.__HMac__blockLength_A;
      t3 === $ && A.throwLateFieldNI("_blockLength");
      t1.doFinal$2(t2, t3);
      t2 = _this.__HMac__outputBuf_A;
      t1.update$3(t2, 0, t2.length);
      len = t1.doFinal$2(out, outOff);
      t2 = _this.__HMac__outputBuf_A;
      B.NativeUint8List_methods.fillRange$3(t2, t3, t2.length, 0);
      t2 = _this.__HMac__inputPad_A;
      t2 === $ && A.throwLateFieldNI("_inputPad");
      t1.update$3(t2, 0, t2.length);
      return len;
    },
    _xorPad$3(pad, len, n) {
      var t1, i;
      for (t1 = pad.length, i = 0; i < len; ++i) {
        if (!(i < t1))
          return A.ioore(pad, i);
        pad[i] = pad[i] ^ n;
      }
    }
  };
  A.BaseDigest.prototype = {$isDigest: 1};
  A.BaseKeyDerivator.prototype = {};
  A.BaseMac.prototype = {$isMac: 1};
  A.MD4FamilyDigest.prototype = {
    reset$0() {
      var t1, _this = this;
      _this._byteCount.$set$1(0);
      _this.__MD4FamilyDigest__wordBufferOffset_A = 0;
      B.NativeUint8List_methods.fillRange$3(_this._wordBuffer, 0, 4, 0);
      _this.__MD4FamilyDigest_bufferOffset_A = 0;
      t1 = _this.buffer;
      B.JSArray_methods.fillRange$3(t1, 0, t1.length, 0);
      t1 = _this.state;
      B.JSArray_methods.$indexSet(t1, 0, 1779033703);
      B.JSArray_methods.$indexSet(t1, 1, 3144134277);
      B.JSArray_methods.$indexSet(t1, 2, 1013904242);
      B.JSArray_methods.$indexSet(t1, 3, 2773480762);
      B.JSArray_methods.$indexSet(t1, 4, 1359893119);
      B.JSArray_methods.$indexSet(t1, 5, 2600822924);
      B.JSArray_methods.$indexSet(t1, 6, 528734635);
      B.JSArray_methods.$indexSet(t1, 7, 1541459225);
    },
    updateByte$1(inp) {
      var t3, _this = this,
        t1 = _this._wordBuffer,
        t2 = _this.__MD4FamilyDigest__wordBufferOffset_A;
      t2 === $ && A.throwLateFieldNI("_wordBufferOffset");
      t3 = t2 + 1;
      _this.__MD4FamilyDigest__wordBufferOffset_A = t3;
      if (!(t2 < 4))
        return A.ioore(t1, t2);
      t1[t2] = inp & 255;
      if (t3 === 4) {
        _this._processWord$2(t1, 0);
        _this.__MD4FamilyDigest__wordBufferOffset_A = 0;
      }
      _this._byteCount.sum$1(1);
    },
    update$3(inp, inpOff, len) {
      var nbytes = this._processUntilNextWord$3(inp, inpOff, len);
      inpOff += nbytes;
      len -= nbytes;
      nbytes = this._processWholeWords$3(inp, inpOff, len);
      this._processBytes$3(inp, inpOff + nbytes, len - nbytes);
    },
    doFinal$2(out, outOff) {
      var t2, _this = this, _s5_ = "_lo32", _s5_0 = "_hi32",
        bitLength = A.Register64$(_this._byteCount),
        t1 = bitLength.__Register64__hi32_A;
      t1 === $ && A.throwLateFieldNI(_s5_0);
      t1 = A.shiftl32(t1, 3);
      bitLength.__Register64__hi32_A = t1;
      t2 = bitLength.__Register64__lo32_A;
      t2 === $ && A.throwLateFieldNI(_s5_);
      bitLength.__Register64__hi32_A = (t1 | t2 >>> 29) >>> 0;
      bitLength.__Register64__lo32_A = A.shiftl32(t2, 3);
      _this._processPadding$0();
      t1 = _this.__MD4FamilyDigest_bufferOffset_A;
      t1 === $ && A.throwLateFieldNI("bufferOffset");
      if (t1 > 14)
        _this._doProcessBlock$0();
      t1 = _this._endian;
      switch (t1) {
        case B.C_Endian0:
          t1 = _this.buffer;
          t2 = bitLength.__Register64__lo32_A;
          t2 === $ && A.throwLateFieldNI(_s5_);
          B.JSArray_methods.$indexSet(t1, 14, t2);
          t2 = bitLength.__Register64__hi32_A;
          t2 === $ && A.throwLateFieldNI(_s5_0);
          B.JSArray_methods.$indexSet(t1, 15, t2);
          break;
        case B.C_Endian:
          t1 = _this.buffer;
          t2 = bitLength.__Register64__hi32_A;
          t2 === $ && A.throwLateFieldNI(_s5_0);
          B.JSArray_methods.$indexSet(t1, 14, t2);
          t2 = bitLength.__Register64__lo32_A;
          t2 === $ && A.throwLateFieldNI(_s5_);
          B.JSArray_methods.$indexSet(t1, 15, t2);
          break;
        default:
          A.throwExpression(A.StateError$("Invalid endianness: " + t1.toString$0(0)));
      }
      _this._doProcessBlock$0();
      _this._packState$2(out, outOff);
      _this.reset$0();
      return 32;
    },
    _processWord$2(inp, inpOff) {
      var _this = this,
        t1 = _this.__MD4FamilyDigest_bufferOffset_A;
      t1 === $ && A.throwLateFieldNI("bufferOffset");
      _this.__MD4FamilyDigest_bufferOffset_A = t1 + 1;
      inp = A.NativeByteData_NativeByteData$view(inp.buffer, inp.byteOffset, inp.length);
      B.JSArray_methods.$indexSet(_this.buffer, t1, J._getUint32$2$x(inp, inpOff, B.C_Endian0 === _this._endian));
      if (_this.__MD4FamilyDigest_bufferOffset_A === 16)
        _this._doProcessBlock$0();
    },
    _doProcessBlock$0() {
      this.processBlock$0();
      this.__MD4FamilyDigest_bufferOffset_A = 0;
      B.JSArray_methods.fillRange$3(this.buffer, 0, 16, 0);
    },
    _processBytes$3(inp, inpOff, len) {
      var t1;
      for (t1 = inp.length; len > 0;) {
        if (!(inpOff < t1))
          return A.ioore(inp, inpOff);
        this.updateByte$1(inp[inpOff]);
        ++inpOff;
        --len;
      }
    },
    _processWholeWords$3(inp, inpOff, len) {
      var t1, processed;
      for (t1 = this._byteCount, processed = 0; len > 4;) {
        this._processWord$2(inp, inpOff);
        inpOff += 4;
        len -= 4;
        t1.sum$1(4);
        processed += 4;
      }
      return processed;
    },
    _processUntilNextWord$3(inp, inpOff, len) {
      var t2,
        t1 = inp.length,
        processed = 0;
      while (true) {
        t2 = this.__MD4FamilyDigest__wordBufferOffset_A;
        t2 === $ && A.throwLateFieldNI("_wordBufferOffset");
        if (!(t2 !== 0 && len > 0))
          break;
        if (!(inpOff < t1))
          return A.ioore(inp, inpOff);
        this.updateByte$1(inp[inpOff]);
        ++inpOff;
        --len;
        ++processed;
      }
      return processed;
    },
    _processPadding$0() {
      this.updateByte$1(128);
      while (true) {
        var t1 = this.__MD4FamilyDigest__wordBufferOffset_A;
        t1 === $ && A.throwLateFieldNI("_wordBufferOffset");
        if (!(t1 !== 0))
          break;
        this.updateByte$1(0);
      }
    },
    _packState$2(out, outOff) {
      var t1, t2, t3, t4, t5, i, t6, t7, t8, out0;
      for (t1 = this._packedStateSize, t2 = out.length, t3 = this.state, t4 = t3.length, t5 = this._endian, i = 0; i < t1; ++i) {
        if (!(i < t4))
          return A.ioore(t3, i);
        t6 = t3[i];
        t7 = out.buffer;
        t8 = out.byteOffset;
        out0 = new DataView(t7, t8, t2);
        B.NativeByteData_methods._setUint32$3(out0, outOff + i * 4, t6, B.C_Endian0 === t5);
      }
    }
  };
  A.Register64.prototype = {
    $eq(_, y) {
      var t1, t2;
      if (y == null)
        return false;
      if (y instanceof A.Register64) {
        t1 = this.__Register64__hi32_A;
        t1 === $ && A.throwLateFieldNI("_hi32");
        t2 = y.__Register64__hi32_A;
        t2 === $ && A.throwLateFieldNI("_hi32");
        if (t1 === t2) {
          t1 = this.__Register64__lo32_A;
          t1 === $ && A.throwLateFieldNI("_lo32");
          t2 = y.__Register64__lo32_A;
          t2 === $ && A.throwLateFieldNI("_lo32");
          t2 = t1 === t2;
          t1 = t2;
        } else
          t1 = false;
      } else
        t1 = false;
      return t1;
    },
    $set$2(hiOrLo32OrY, lo32) {
      var t1, _this = this;
      if (hiOrLo32OrY instanceof A.Register64) {
        t1 = hiOrLo32OrY.__Register64__hi32_A;
        t1 === $ && A.throwLateFieldNI("_hi32");
        _this.__Register64__hi32_A = t1;
        t1 = hiOrLo32OrY.__Register64__lo32_A;
        t1 === $ && A.throwLateFieldNI("_lo32");
        _this.__Register64__lo32_A = t1;
      } else {
        _this.__Register64__hi32_A = 0;
        _this.__Register64__lo32_A = A._asInt(hiOrLo32OrY);
      }
    },
    $set$1(hiOrLo32OrY) {
      return this.$set$2(hiOrLo32OrY, null);
    },
    sum$1(y) {
      var slo32, _this = this,
        t1 = _this.__Register64__lo32_A;
      t1 === $ && A.throwLateFieldNI("_lo32");
      slo32 = t1 + y;
      t1 = slo32 >>> 0;
      _this.__Register64__lo32_A = t1;
      if (slo32 !== t1) {
        t1 = _this.__Register64__hi32_A;
        t1 === $ && A.throwLateFieldNI("_hi32");
        ++t1;
        _this.__Register64__hi32_A = t1;
        _this.__Register64__hi32_A = t1 >>> 0;
      }
    },
    toString$0(_) {
      var _this = this,
        sb = new A.StringBuffer(""),
        t1 = _this.__Register64__hi32_A;
      t1 === $ && A.throwLateFieldNI("_hi32");
      _this._padWrite$2(sb, t1);
      t1 = _this.__Register64__lo32_A;
      t1 === $ && A.throwLateFieldNI("_lo32");
      _this._padWrite$2(sb, t1);
      t1 = sb._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _padWrite$2(sb, value) {
      var i,
        str = B.JSInt_methods.toRadixString$1(value, 16);
      for (i = 8 - str.length; i > 0; --i)
        sb._contents += "0";
      sb._contents += str;
    },
    get$hashCode(_) {
      return A.Object.prototype.get$hashCode.call(this, this);
    }
  };
  (function aliases() {
    var _ = J.LegacyJavaScriptObject.prototype;
    _.super$LegacyJavaScriptObject$toString = _.toString$0;
    _ = A.ListMixin.prototype;
    _.super$ListMixin$setRange = _.setRange$4;
  })();
  (function installTearOffs() {
    var _static_1 = hunkHelpers._static_1;
    _static_1(A, "web_dictant_file_decoder_worker__decodeZip$closure", "decodeZip", 7);
  })();
  (function inheritance() {
    var _mixin = hunkHelpers.mixin,
      _inherit = hunkHelpers.inherit,
      _inheritMany = hunkHelpers.inheritMany;
    _inherit(A.Object, null);
    _inheritMany(A.Object, [A.JS_CONST, J.Interceptor, J.ArrayIterator, A.Error, A.Iterable, A.ListIterator, A.FixedLengthListMixin, A.Symbol, A.MapView, A.ConstantMap, A.JSInvocationMirror, A.Closure, A._Required, A.MapMixin, A.LinkedHashMapCell, A.Rti, A._FunctionParameters, A.StreamTransformerBase, A.ListMixin, A._UnmodifiableMapMixin, A._Utf8Decoder, A.OutOfMemoryError, A.FormatException, A.Null, A.StringBuffer, A.Endian, A.ArchiveFile, A.FileContent, A.AesDecrypt, A.InputStreamBase, A.OutputStreamBase, A.ZipDirectory, A.AesHeader, A.ZipFileHeader, A.ZipDecoder, A.HuffmanTable, A.Inflate, A.CipherParameters, A.BaseDigest, A.BaseKeyDerivator, A.BaseMac, A.Register64]);
    _inheritMany(J.Interceptor, [J.JSBool, J.JSNull, J.JavaScriptObject, J.JSArray, J.JSNumber, J.JSString, A.NativeTypedData]);
    _inheritMany(J.JavaScriptObject, [J.LegacyJavaScriptObject, A.DomException]);
    _inheritMany(J.LegacyJavaScriptObject, [J.PlainJavaScriptObject, J.UnknownJavaScriptObject, J.JavaScriptFunction]);
    _inherit(J.JSUnmodifiableArray, J.JSArray);
    _inheritMany(J.JSNumber, [J.JSInt, J.JSNumNotInt]);
    _inheritMany(A.Error, [A.LateError, A.RuntimeError, A._Error, A.AssertionError, A.NullThrownError, A.ArgumentError, A.NoSuchMethodError, A.UnsupportedError, A.UnimplementedError, A.StateError, A.ConcurrentModificationError, A.CyclicInitializationError]);
    _inheritMany(A.Iterable, [A.EfficientLengthIterable, A.IterableBase]);
    _inherit(A.ListIterable, A.EfficientLengthIterable);
    _inherit(A.SubListIterable, A.ListIterable);
    _inherit(A._UnmodifiableMapView_MapView__UnmodifiableMapMixin, A.MapView);
    _inherit(A.UnmodifiableMapView, A._UnmodifiableMapView_MapView__UnmodifiableMapMixin);
    _inherit(A.ConstantMapView, A.UnmodifiableMapView);
    _inherit(A.ConstantStringMap, A.ConstantMap);
    _inheritMany(A.Closure, [A.Closure2Args, A.Closure0Args, A.TearOffClosure, A.initHooks_closure, A.initHooks_closure1]);
    _inheritMany(A.Closure2Args, [A.Primitives_functionNoSuchMethod_closure, A.initHooks_closure0, A.MapBase_mapToString_closure, A.NoSuchMethodError_toString_closure]);
    _inheritMany(A.TearOffClosure, [A.StaticClosure, A.BoundClosure]);
    _inherit(A.MapBase, A.MapMixin);
    _inherit(A.JsLinkedHashMap, A.MapBase);
    _inheritMany(A.NativeTypedData, [A.NativeByteData, A.NativeTypedArray]);
    _inherit(A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin, A.NativeTypedArray);
    _inherit(A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin, A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin);
    _inherit(A.NativeTypedArrayOfInt, A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin);
    _inheritMany(A.NativeTypedArrayOfInt, [A.NativeUint32List, A.NativeUint8List]);
    _inherit(A._TypeError, A._Error);
    _inheritMany(A.Closure0Args, [A.Utf8Decoder__decoder_closure, A.Utf8Decoder__decoderNonfatal_closure]);
    _inherit(A.Converter, A.StreamTransformerBase);
    _inherit(A.Utf8Decoder, A.Converter);
    _inheritMany(A.ArgumentError, [A.RangeError, A.IndexError]);
    _inherit(A.Archive, A.IterableBase);
    _inherit(A.ArchiveException, A.FormatException);
    _inherit(A.InputStream, A.InputStreamBase);
    _inherit(A.OutputStream, A.OutputStreamBase);
    _inherit(A.ZipFile, A.FileContent);
    _inherit(A.MD4FamilyDigest, A.BaseDigest);
    _inherit(A.SHA256Digest, A.MD4FamilyDigest);
    _inherit(A.Pbkdf2Parameters, A.CipherParameters);
    _inherit(A.PBKDF2KeyDerivator, A.BaseKeyDerivator);
    _inherit(A.HMac, A.BaseMac);
    _mixin(A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin, A.ListMixin);
    _mixin(A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin, A.FixedLengthListMixin);
    _mixin(A._UnmodifiableMapView_MapView__UnmodifiableMapMixin, A._UnmodifiableMapMixin);
  })();
  var init = {
    typeUniverse: {eC: new Map(), tR: {}, eT: {}, tPV: {}, sEA: []},
    mangledGlobalNames: {int: "int", double: "double", num: "num", String: "String", bool: "bool", Null: "Null", List: "List"},
    mangledNames: {},
    types: ["@()", "~(String,@)", "@(@)", "@(@,String)", "@(String)", "~(Object?,Object?)", "~(Symbol0,@)", "Map<@,@>(Uint8List?)"],
    interceptorsByTag: null,
    leafTags: null,
    arrayRti: Symbol("$ti")
  };
  A._Universe_addRules(init.typeUniverse, JSON.parse('{"PlainJavaScriptObject":"LegacyJavaScriptObject","UnknownJavaScriptObject":"LegacyJavaScriptObject","JavaScriptFunction":"LegacyJavaScriptObject","JSBool":{"bool":[]},"JSArray":{"List":["1"],"Iterable":["1"]},"JSUnmodifiableArray":{"JSArray":["1"],"List":["1"],"Iterable":["1"]},"JSNumber":{"num":[]},"JSInt":{"int":[],"num":[]},"JSNumNotInt":{"num":[]},"JSString":{"String":[],"Pattern":[]},"EfficientLengthIterable":{"Iterable":["1"]},"ListIterable":{"Iterable":["1"]},"SubListIterable":{"ListIterable":["1"],"Iterable":["1"]},"Symbol":{"Symbol0":[]},"ConstantMapView":{"UnmodifiableMapView":["1","2"],"_UnmodifiableMapView_MapView__UnmodifiableMapMixin":["1","2"],"MapView":["1","2"],"_UnmodifiableMapMixin":["1","2"],"Map":["1","2"]},"ConstantMap":{"Map":["1","2"]},"ConstantStringMap":{"ConstantMap":["1","2"],"Map":["1","2"]},"JSInvocationMirror":{"Invocation":[]},"Closure":{"Function":[]},"Closure0Args":{"Function":[]},"Closure2Args":{"Function":[]},"TearOffClosure":{"Function":[]},"StaticClosure":{"Function":[]},"BoundClosure":{"Function":[]},"JsLinkedHashMap":{"MapMixin":["1","2"],"Map":["1","2"]},"NativeTypedData":{"TypedData":[]},"NativeByteData":{"TypedData":[]},"NativeTypedArray":{"JavaScriptIndexingBehavior":["1"],"TypedData":[]},"NativeTypedArrayOfInt":{"NativeTypedArray":["int"],"ListMixin":["int"],"JavaScriptIndexingBehavior":["int"],"List":["int"],"TypedData":[],"Iterable":["int"],"FixedLengthListMixin":["int"]},"NativeUint32List":{"NativeTypedArrayOfInt":[],"NativeTypedArray":["int"],"ListMixin":["int"],"Uint32List":[],"JavaScriptIndexingBehavior":["int"],"List":["int"],"TypedData":[],"Iterable":["int"],"FixedLengthListMixin":["int"],"ListMixin.E":"int"},"NativeUint8List":{"NativeTypedArrayOfInt":[],"NativeTypedArray":["int"],"ListMixin":["int"],"Uint8List":[],"JavaScriptIndexingBehavior":["int"],"List":["int"],"TypedData":[],"Iterable":["int"],"FixedLengthListMixin":["int"],"ListMixin.E":"int"},"IterableBase":{"Iterable":["1"]},"MapBase":{"MapMixin":["1","2"],"Map":["1","2"]},"MapMixin":{"Map":["1","2"]},"MapView":{"Map":["1","2"]},"UnmodifiableMapView":{"_UnmodifiableMapView_MapView__UnmodifiableMapMixin":["1","2"],"MapView":["1","2"],"_UnmodifiableMapMixin":["1","2"],"Map":["1","2"]},"Utf8Decoder":{"Converter":["List<int>","String"]},"int":{"num":[]},"List":{"Iterable":["1"]},"String":{"Pattern":[]},"Uint8List":{"List":["int"],"Iterable":["int"],"TypedData":[]},"Archive":{"Iterable":["ArchiveFile"]},"InputStream":{"InputStreamBase":[]},"SHA256Digest":{"Digest":[]},"HMac":{"Mac":[]},"BaseDigest":{"Digest":[]},"BaseMac":{"Mac":[]},"MD4FamilyDigest":{"Digest":[]}}'));
  A._Universe_addErasedTypes(init.typeUniverse, JSON.parse('{"EfficientLengthIterable":1,"NativeTypedArray":1,"StreamTransformerBase":2,"IterableBase":1,"MapBase":2}'));
  var type$ = (function rtii() {
    var findType = A.findType;
    return {
      ConstantMapView_Symbol_dynamic: findType("ConstantMapView<Symbol0,@>"),
      Function: findType("Function"),
      Invocation: findType("Invocation"),
      Iterable_dynamic: findType("Iterable<@>"),
      Iterable_int: findType("Iterable<int>"),
      JSArray_ArchiveFile: findType("JSArray<ArchiveFile>"),
      JSArray_String: findType("JSArray<String>"),
      JSArray_ZipFileHeader: findType("JSArray<ZipFileHeader>"),
      JSArray_dynamic: findType("JSArray<@>"),
      JSArray_int: findType("JSArray<int>"),
      JSNull: findType("JSNull"),
      JavaScriptFunction: findType("JavaScriptFunction"),
      JavaScriptIndexingBehavior_dynamic: findType("JavaScriptIndexingBehavior<@>"),
      JsLinkedHashMap_Symbol_dynamic: findType("JsLinkedHashMap<Symbol0,@>"),
      List_dynamic: findType("List<@>"),
      List_int: findType("List<int>"),
      Map_dynamic_dynamic_Function_nullable_Uint8List: findType("Map<@,@>(Uint8List?)"),
      NativeTypedArrayOfInt: findType("NativeTypedArrayOfInt"),
      NativeUint8List: findType("NativeUint8List"),
      Null: findType("Null"),
      Object: findType("Object"),
      String: findType("String"),
      Symbol: findType("Symbol0"),
      TypedData: findType("TypedData"),
      Uint8List: findType("Uint8List"),
      UnknownJavaScriptObject: findType("UnknownJavaScriptObject"),
      bool: findType("bool"),
      double: findType("double"),
      dynamic: findType("@"),
      int: findType("int"),
      legacy_Never: findType("0&*"),
      legacy_Object: findType("Object*"),
      nullable_Future_Null: findType("Future<Null>?"),
      nullable_List_int: findType("List<int>?"),
      nullable_Object: findType("Object?"),
      nullable_Uint8List: findType("Uint8List?"),
      num: findType("num")
    };
  })();
  (function constants() {
    var makeConstList = hunkHelpers.makeConstList;
    B.Interceptor_methods = J.Interceptor.prototype;
    B.JSArray_methods = J.JSArray.prototype;
    B.JSInt_methods = J.JSInt.prototype;
    B.JSString_methods = J.JSString.prototype;
    B.JavaScriptFunction_methods = J.JavaScriptFunction.prototype;
    B.JavaScriptObject_methods = J.JavaScriptObject.prototype;
    B.NativeByteData_methods = A.NativeByteData.prototype;
    B.NativeUint8List_methods = A.NativeUint8List.prototype;
    B.PlainJavaScriptObject_methods = J.PlainJavaScriptObject.prototype;
    B.UnknownJavaScriptObject_methods = J.UnknownJavaScriptObject.prototype;
    B.C_Endian = new A.Endian();
    B.C_Endian0 = new A.Endian();
    B.C_JS_CONST = function getTagFallback(o) {
  var s = Object.prototype.toString.call(o);
  return s.substring(8, s.length - 1);
};
    B.C_JS_CONST0 = function() {
  var toStringFunction = Object.prototype.toString;
  function getTag(o) {
    var s = toStringFunction.call(o);
    return s.substring(8, s.length - 1);
  }
  function getUnknownTag(object, tag) {
    if (/^HTML[A-Z].*Element$/.test(tag)) {
      var name = toStringFunction.call(object);
      if (name == "[object Object]") return null;
      return "HTMLElement";
    }
  }
  function getUnknownTagGenericBrowser(object, tag) {
    if (self.HTMLElement && object instanceof HTMLElement) return "HTMLElement";
    return getUnknownTag(object, tag);
  }
  function prototypeForTag(tag) {
    if (typeof window == "undefined") return null;
    if (typeof window[tag] == "undefined") return null;
    var constructor = window[tag];
    if (typeof constructor != "function") return null;
    return constructor.prototype;
  }
  function discriminator(tag) { return null; }
  var isBrowser = typeof navigator == "object";
  return {
    getTag: getTag,
    getUnknownTag: isBrowser ? getUnknownTagGenericBrowser : getUnknownTag,
    prototypeForTag: prototypeForTag,
    discriminator: discriminator };
};
    B.C_JS_CONST6 = function(getTagFallback) {
  return function(hooks) {
    if (typeof navigator != "object") return hooks;
    var ua = navigator.userAgent;
    if (ua.indexOf("DumpRenderTree") >= 0) return hooks;
    if (ua.indexOf("Chrome") >= 0) {
      function confirm(p) {
        return typeof window == "object" && window[p] && window[p].name == p;
      }
      if (confirm("Window") && confirm("HTMLElement")) return hooks;
    }
    hooks.getTag = getTagFallback;
  };
};
    B.C_JS_CONST1 = function(hooks) {
  if (typeof dartExperimentalFixupGetTag != "function") return hooks;
  hooks.getTag = dartExperimentalFixupGetTag(hooks.getTag);
};
    B.C_JS_CONST2 = function(hooks) {
  var getTag = hooks.getTag;
  var prototypeForTag = hooks.prototypeForTag;
  function getTagFixed(o) {
    var tag = getTag(o);
    if (tag == "Document") {
      if (!!o.xmlVersion) return "!Document";
      return "!HTMLDocument";
    }
    return tag;
  }
  function prototypeForTagFixed(tag) {
    if (tag == "Document") return null;
    return prototypeForTag(tag);
  }
  hooks.getTag = getTagFixed;
  hooks.prototypeForTag = prototypeForTagFixed;
};
    B.C_JS_CONST5 = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Firefox") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "GeoGeolocation": "Geolocation",
    "Location": "!Location",
    "WorkerMessageEvent": "MessageEvent",
    "XMLDocument": "!Document"};
  function getTagFirefox(o) {
    var tag = getTag(o);
    return quickMap[tag] || tag;
  }
  hooks.getTag = getTagFirefox;
};
    B.C_JS_CONST4 = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Trident/") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "HTMLDDElement": "HTMLElement",
    "HTMLDTElement": "HTMLElement",
    "HTMLPhraseElement": "HTMLElement",
    "Position": "Geoposition"
  };
  function getTagIE(o) {
    var tag = getTag(o);
    var newTag = quickMap[tag];
    if (newTag) return newTag;
    if (tag == "Object") {
      if (window.DataView && (o instanceof window.DataView)) return "DataView";
    }
    return tag;
  }
  function prototypeForTagIE(tag) {
    var constructor = window[tag];
    if (constructor == null) return null;
    return constructor.prototype;
  }
  hooks.getTag = getTagIE;
  hooks.prototypeForTag = prototypeForTagIE;
};
    B.C_JS_CONST3 = function(hooks) { return hooks; }
;
    B.C_OutOfMemoryError = new A.OutOfMemoryError();
    B.C__Required = new A._Required();
    B.List_10_12_14 = A._setArrayType(makeConstList([10, 12, 14]), type$.JSArray_int);
    B.List_1zK = A._setArrayType(makeConstList([99, 124, 119, 123, 242, 107, 111, 197, 48, 1, 103, 43, 254, 215, 171, 118, 202, 130, 201, 125, 250, 89, 71, 240, 173, 212, 162, 175, 156, 164, 114, 192, 183, 253, 147, 38, 54, 63, 247, 204, 52, 165, 229, 241, 113, 216, 49, 21, 4, 199, 35, 195, 24, 150, 5, 154, 7, 18, 128, 226, 235, 39, 178, 117, 9, 131, 44, 26, 27, 110, 90, 160, 82, 59, 214, 179, 41, 227, 47, 132, 83, 209, 0, 237, 32, 252, 177, 91, 106, 203, 190, 57, 74, 76, 88, 207, 208, 239, 170, 251, 67, 77, 51, 133, 69, 249, 2, 127, 80, 60, 159, 168, 81, 163, 64, 143, 146, 157, 56, 245, 188, 182, 218, 33, 16, 255, 243, 210, 205, 12, 19, 236, 95, 151, 68, 23, 196, 167, 126, 61, 100, 93, 25, 115, 96, 129, 79, 220, 34, 42, 144, 136, 70, 238, 184, 20, 222, 94, 11, 219, 224, 50, 58, 10, 73, 6, 36, 92, 194, 211, 172, 98, 145, 149, 228, 121, 231, 200, 55, 109, 141, 213, 78, 169, 108, 86, 244, 234, 101, 122, 174, 8, 186, 120, 37, 46, 28, 166, 180, 198, 232, 221, 116, 31, 75, 189, 139, 138, 112, 62, 181, 102, 72, 3, 246, 14, 97, 53, 87, 185, 134, 193, 29, 158, 225, 248, 152, 17, 105, 217, 142, 148, 155, 30, 135, 233, 206, 85, 40, 223, 140, 161, 137, 13, 191, 230, 66, 104, 65, 153, 45, 15, 176, 84, 187, 22]), type$.JSArray_int);
    B.List_2Bc = A._setArrayType(makeConstList([8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8]), type$.JSArray_int);
    B.List_2Vk = A._setArrayType(makeConstList([141, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54]), type$.JSArray_int);
    B.List_4_6_8 = A._setArrayType(makeConstList([4, 6, 8]), type$.JSArray_int);
    B.List_B8J = A._setArrayType(makeConstList([0, 1996959894, 3993919788, 2567524794, 124634137, 1886057615, 3915621685, 2657392035, 249268274, 2044508324, 3772115230, 2547177864, 162941995, 2125561021, 3887607047, 2428444049, 498536548, 1789927666, 4089016648, 2227061214, 450548861, 1843258603, 4107580753, 2211677639, 325883990, 1684777152, 4251122042, 2321926636, 335633487, 1661365465, 4195302755, 2366115317, 997073096, 1281953886, 3579855332, 2724688242, 1006888145, 1258607687, 3524101629, 2768942443, 901097722, 1119000684, 3686517206, 2898065728, 853044451, 1172266101, 3705015759, 2882616665, 651767980, 1373503546, 3369554304, 3218104598, 565507253, 1454621731, 3485111705, 3099436303, 671266974, 1594198024, 3322730930, 2970347812, 795835527, 1483230225, 3244367275, 3060149565, 1994146192, 31158534, 2563907772, 4023717930, 1907459465, 112637215, 2680153253, 3904427059, 2013776290, 251722036, 2517215374, 3775830040, 2137656763, 141376813, 2439277719, 3865271297, 1802195444, 476864866, 2238001368, 4066508878, 1812370925, 453092731, 2181625025, 4111451223, 1706088902, 314042704, 2344532202, 4240017532, 1658658271, 366619977, 2362670323, 4224994405, 1303535960, 984961486, 2747007092, 3569037538, 1256170817, 1037604311, 2765210733, 3554079995, 1131014506, 879679996, 2909243462, 3663771856, 1141124467, 855842277, 2852801631, 3708648649, 1342533948, 654459306, 3188396048, 3373015174, 1466479909, 544179635, 3110523913, 3462522015, 1591671054, 702138776, 2966460450, 3352799412, 1504918807, 783551873, 3082640443, 3233442989, 3988292384, 2596254646, 62317068, 1957810842, 3939845945, 2647816111, 81470997, 1943803523, 3814918930, 2489596804, 225274430, 2053790376, 3826175755, 2466906013, 167816743, 2097651377, 4027552580, 2265490386, 503444072, 1762050814, 4150417245, 2154129355, 426522225, 1852507879, 4275313526, 2312317920, 282753626, 1742555852, 4189708143, 2394877945, 397917763, 1622183637, 3604390888, 2714866558, 953729732, 1340076626, 3518719985, 2797360999, 1068828381, 1219638859, 3624741850, 2936675148, 906185462, 1090812512, 3747672003, 2825379669, 829329135, 1181335161, 3412177804, 3160834842, 628085408, 1382605366, 3423369109, 3138078467, 570562233, 1426400815, 3317316542, 2998733608, 733239954, 1555261956, 3268935591, 3050360625, 752459403, 1541320221, 2607071920, 3965973030, 1969922972, 40735498, 2617837225, 3943577151, 1913087877, 83908371, 2512341634, 3803740692, 2075208622, 213261112, 2463272603, 3855990285, 2094854071, 198958881, 2262029012, 4057260610, 1759359992, 534414190, 2176718541, 4139329115, 1873836001, 414664567, 2282248934, 4279200368, 1711684554, 285281116, 2405801727, 4167216745, 1634467795, 376229701, 2685067896, 3608007406, 1308918612, 956543938, 2808555105, 3495958263, 1231636301, 1047427035, 2932959818, 3654703836, 1088359270, 936918000, 2847714899, 3736837829, 1202900863, 817233897, 3183342108, 3401237130, 1404277552, 615818150, 3134207493, 3453421203, 1423857449, 601450431, 3009837614, 3294710456, 1567103746, 711928724, 3020668471, 3272380065, 1510334235, 755167117]), type$.JSArray_int);
    B.List_X3d0 = A._setArrayType(makeConstList([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13]), type$.JSArray_int);
    B.List_X3d = A._setArrayType(makeConstList([5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]), type$.JSArray_int);
    B.List_eea = A._setArrayType(makeConstList([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 0, 0]), type$.JSArray_int);
    B.List_empty = A._setArrayType(makeConstList([]), type$.JSArray_dynamic);
    B.List_i3t = A._setArrayType(makeConstList([1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577]), type$.JSArray_int);
    B.List_qQn = A._setArrayType(makeConstList([3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258]), type$.JSArray_int);
    B.List_uSC = A._setArrayType(makeConstList([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]), type$.JSArray_int);
    B.List_empty0 = A._setArrayType(makeConstList([]), A.findType("JSArray<Symbol0>"));
    B.Map_empty = new A.ConstantStringMap(0, {}, B.List_empty0, A.findType("ConstantStringMap<Symbol0,@>"));
    B.Symbol_call = new A.Symbol("call");
    B.Utf8Decoder_false = new A.Utf8Decoder(false);
  })();
  (function staticFields() {
    $._JS_INTEROP_INTERCEPTOR_TAG = null;
    $.Primitives__identityHashCodeProperty = null;
    $.BoundClosure__receiverFieldNameCache = null;
    $.BoundClosure__interceptorFieldNameCache = null;
    $.getTagFunction = null;
    $.alternateTagFunction = null;
    $.prototypeForTagFunction = null;
    $.dispatchRecordsForInstanceTags = null;
    $.interceptorsForUncacheableTags = null;
    $.initNativeDispatchFlag = null;
    $._toStringVisiting = A._setArrayType([], A.findType("JSArray<Object>"));
    $.SHA256Digest__k = A._setArrayType([1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298], type$.JSArray_int);
    $._MASK32_HI_BITS = A._setArrayType([4294967295, 2147483647, 1073741823, 536870911, 268435455, 134217727, 67108863, 33554431, 16777215, 8388607, 4194303, 2097151, 1048575, 524287, 262143, 131071, 65535, 32767, 16383, 8191, 4095, 2047, 1023, 511, 255, 127, 63, 31, 15, 7, 3, 1, 0], type$.JSArray_int);
  })();
  (function lazyInitializers() {
    var _lazyFinal = hunkHelpers.lazyFinal;
    _lazyFinal($, "DART_CLOSURE_PROPERTY_NAME", "$get$DART_CLOSURE_PROPERTY_NAME", () => A.getIsolateAffinityTag("_$dart_dartClosure"));
    _lazyFinal($, "Utf8Decoder__decoder", "$get$Utf8Decoder__decoder", () => new A.Utf8Decoder__decoder_closure().call$0());
    _lazyFinal($, "Utf8Decoder__decoderNonfatal", "$get$Utf8Decoder__decoderNonfatal", () => new A.Utf8Decoder__decoderNonfatal_closure().call$0());
  })();
  (function nativeSupport() {
    !function() {
      var intern = function(s) {
        var o = {};
        o[s] = 1;
        return Object.keys(hunkHelpers.convertToFastObject(o))[0];
      };
      init.getIsolateTag = function(name) {
        return intern("___dart_" + name + init.isolateTag);
      };
      var tableProperty = "___dart_isolate_tags_";
      var usedProperties = Object[tableProperty] || (Object[tableProperty] = Object.create(null));
      var rootProperty = "_ZxYxX";
      for (var i = 0;; i++) {
        var property = intern(rootProperty + "_" + i + "_");
        if (!(property in usedProperties)) {
          usedProperties[property] = 1;
          init.isolateTag = property;
          break;
        }
      }
      init.dispatchPropertyName = init.getIsolateTag("dispatch_record");
    }();
    hunkHelpers.setOrUpdateInterceptorsByTag({ArrayBuffer: J.Interceptor, ApplicationCacheErrorEvent: J.JavaScriptObject, DOMError: J.JavaScriptObject, ErrorEvent: J.JavaScriptObject, Event: J.JavaScriptObject, InputEvent: J.JavaScriptObject, SubmitEvent: J.JavaScriptObject, MediaError: J.JavaScriptObject, NavigatorUserMediaError: J.JavaScriptObject, OverconstrainedError: J.JavaScriptObject, PositionError: J.JavaScriptObject, GeolocationPositionError: J.JavaScriptObject, SensorErrorEvent: J.JavaScriptObject, SpeechRecognitionError: J.JavaScriptObject, ArrayBufferView: A.NativeTypedData, DataView: A.NativeByteData, Uint32Array: A.NativeUint32List, Uint8Array: A.NativeUint8List, DOMException: A.DomException});
    hunkHelpers.setOrUpdateLeafTags({ArrayBuffer: true, ApplicationCacheErrorEvent: true, DOMError: true, ErrorEvent: true, Event: true, InputEvent: true, SubmitEvent: true, MediaError: true, NavigatorUserMediaError: true, OverconstrainedError: true, PositionError: true, GeolocationPositionError: true, SensorErrorEvent: true, SpeechRecognitionError: true, ArrayBufferView: false, DataView: true, Uint32Array: true, Uint8Array: false, DOMException: true});
    A.NativeTypedArray.$nativeSuperclassTag = "ArrayBufferView";
    A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin.$nativeSuperclassTag = "ArrayBufferView";
    A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin.$nativeSuperclassTag = "ArrayBufferView";
    A.NativeTypedArrayOfInt.$nativeSuperclassTag = "ArrayBufferView";
  })();
  Function.prototype.call$0 = function() {
    return this();
  };
  Function.prototype.call$1 = function(a) {
    return this(a);
  };
  Function.prototype.call$2 = function(a, b) {
    return this(a, b);
  };
  Function.prototype.call$3 = function(a, b, c) {
    return this(a, b, c);
  };
  convertAllToFastObject(holders);
  convertToFastObject($);
  (function(callback) {
    if (typeof document === "undefined") {
      callback(null);
      return;
    }
    if (typeof document.currentScript != "undefined") {
      callback(document.currentScript);
      return;
    }
    var scripts = document.scripts;
    function onLoad(event) {
      for (var i = 0; i < scripts.length; ++i)
        scripts[i].removeEventListener("load", onLoad, false);
      callback(event.target);
    }
    for (var i = 0; i < scripts.length; ++i)
      scripts[i].addEventListener("load", onLoad, false);
  })(function(currentScript) {
    init.currentScript = currentScript;
    var callMain = A.main;
    if (typeof dartMainRunner === "function")
      dartMainRunner(callMain, []);
    else
      callMain([]);
  });